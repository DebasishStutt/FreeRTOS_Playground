
003_LEDTask_TaskNotify_Basic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ebc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  0800808c  0800808c  0001808c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082c4  080082c4  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  080082c4  080082c4  000182c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080082cc  080082cc  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082cc  080082cc  000182cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080082d0  080082d0  000182d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080082d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000145e4  2000006c  08008340  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20014650  08008340  00024650  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015399  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000035d0  00000000  00000000  00035478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001440  00000000  00000000  00038a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f8d  00000000  00000000  00039e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024b33  00000000  00000000  0003ae15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018e7d  00000000  00000000  0005f948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de44d  00000000  00000000  000787c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005974  00000000  00000000  00156c14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000014d  00000000  00000000  0015c588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008074 	.word	0x08008074

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	08008074 	.word	0x08008074

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	20012f30 	.word	0x20012f30
	...

080002b0 <memchr>:
 80002b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002b4:	2a10      	cmp	r2, #16
 80002b6:	db2b      	blt.n	8000310 <memchr+0x60>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	d008      	beq.n	80002d0 <memchr+0x20>
 80002be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c2:	3a01      	subs	r2, #1
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d02d      	beq.n	8000324 <memchr+0x74>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	b342      	cbz	r2, 8000320 <memchr+0x70>
 80002ce:	d1f6      	bne.n	80002be <memchr+0xe>
 80002d0:	b4f0      	push	{r4, r5, r6, r7}
 80002d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002da:	f022 0407 	bic.w	r4, r2, #7
 80002de:	f07f 0700 	mvns.w	r7, #0
 80002e2:	2300      	movs	r3, #0
 80002e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002e8:	3c08      	subs	r4, #8
 80002ea:	ea85 0501 	eor.w	r5, r5, r1
 80002ee:	ea86 0601 	eor.w	r6, r6, r1
 80002f2:	fa85 f547 	uadd8	r5, r5, r7
 80002f6:	faa3 f587 	sel	r5, r3, r7
 80002fa:	fa86 f647 	uadd8	r6, r6, r7
 80002fe:	faa5 f687 	sel	r6, r5, r7
 8000302:	b98e      	cbnz	r6, 8000328 <memchr+0x78>
 8000304:	d1ee      	bne.n	80002e4 <memchr+0x34>
 8000306:	bcf0      	pop	{r4, r5, r6, r7}
 8000308:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800030c:	f002 0207 	and.w	r2, r2, #7
 8000310:	b132      	cbz	r2, 8000320 <memchr+0x70>
 8000312:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000316:	3a01      	subs	r2, #1
 8000318:	ea83 0301 	eor.w	r3, r3, r1
 800031c:	b113      	cbz	r3, 8000324 <memchr+0x74>
 800031e:	d1f8      	bne.n	8000312 <memchr+0x62>
 8000320:	2000      	movs	r0, #0
 8000322:	4770      	bx	lr
 8000324:	3801      	subs	r0, #1
 8000326:	4770      	bx	lr
 8000328:	2d00      	cmp	r5, #0
 800032a:	bf06      	itte	eq
 800032c:	4635      	moveq	r5, r6
 800032e:	3803      	subeq	r0, #3
 8000330:	3807      	subne	r0, #7
 8000332:	f015 0f01 	tst.w	r5, #1
 8000336:	d107      	bne.n	8000348 <memchr+0x98>
 8000338:	3001      	adds	r0, #1
 800033a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800033e:	bf02      	ittt	eq
 8000340:	3001      	addeq	r0, #1
 8000342:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000346:	3001      	addeq	r0, #1
 8000348:	bcf0      	pop	{r4, r5, r6, r7}
 800034a:	3801      	subs	r0, #1
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop

08000350 <__aeabi_uldivmod>:
 8000350:	b953      	cbnz	r3, 8000368 <__aeabi_uldivmod+0x18>
 8000352:	b94a      	cbnz	r2, 8000368 <__aeabi_uldivmod+0x18>
 8000354:	2900      	cmp	r1, #0
 8000356:	bf08      	it	eq
 8000358:	2800      	cmpeq	r0, #0
 800035a:	bf1c      	itt	ne
 800035c:	f04f 31ff 	movne.w	r1, #4294967295
 8000360:	f04f 30ff 	movne.w	r0, #4294967295
 8000364:	f000 b970 	b.w	8000648 <__aeabi_idiv0>
 8000368:	f1ad 0c08 	sub.w	ip, sp, #8
 800036c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000370:	f000 f806 	bl	8000380 <__udivmoddi4>
 8000374:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000378:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800037c:	b004      	add	sp, #16
 800037e:	4770      	bx	lr

08000380 <__udivmoddi4>:
 8000380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000384:	9e08      	ldr	r6, [sp, #32]
 8000386:	460d      	mov	r5, r1
 8000388:	4604      	mov	r4, r0
 800038a:	460f      	mov	r7, r1
 800038c:	2b00      	cmp	r3, #0
 800038e:	d14a      	bne.n	8000426 <__udivmoddi4+0xa6>
 8000390:	428a      	cmp	r2, r1
 8000392:	4694      	mov	ip, r2
 8000394:	d965      	bls.n	8000462 <__udivmoddi4+0xe2>
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	b143      	cbz	r3, 80003ae <__udivmoddi4+0x2e>
 800039c:	fa02 fc03 	lsl.w	ip, r2, r3
 80003a0:	f1c3 0220 	rsb	r2, r3, #32
 80003a4:	409f      	lsls	r7, r3
 80003a6:	fa20 f202 	lsr.w	r2, r0, r2
 80003aa:	4317      	orrs	r7, r2
 80003ac:	409c      	lsls	r4, r3
 80003ae:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003b2:	fa1f f58c 	uxth.w	r5, ip
 80003b6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003ba:	0c22      	lsrs	r2, r4, #16
 80003bc:	fb0e 7711 	mls	r7, lr, r1, r7
 80003c0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80003c4:	fb01 f005 	mul.w	r0, r1, r5
 80003c8:	4290      	cmp	r0, r2
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x62>
 80003cc:	eb1c 0202 	adds.w	r2, ip, r2
 80003d0:	f101 37ff 	add.w	r7, r1, #4294967295
 80003d4:	f080 811c 	bcs.w	8000610 <__udivmoddi4+0x290>
 80003d8:	4290      	cmp	r0, r2
 80003da:	f240 8119 	bls.w	8000610 <__udivmoddi4+0x290>
 80003de:	3902      	subs	r1, #2
 80003e0:	4462      	add	r2, ip
 80003e2:	1a12      	subs	r2, r2, r0
 80003e4:	b2a4      	uxth	r4, r4
 80003e6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003ea:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ee:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f2:	fb00 f505 	mul.w	r5, r0, r5
 80003f6:	42a5      	cmp	r5, r4
 80003f8:	d90a      	bls.n	8000410 <__udivmoddi4+0x90>
 80003fa:	eb1c 0404 	adds.w	r4, ip, r4
 80003fe:	f100 32ff 	add.w	r2, r0, #4294967295
 8000402:	f080 8107 	bcs.w	8000614 <__udivmoddi4+0x294>
 8000406:	42a5      	cmp	r5, r4
 8000408:	f240 8104 	bls.w	8000614 <__udivmoddi4+0x294>
 800040c:	4464      	add	r4, ip
 800040e:	3802      	subs	r0, #2
 8000410:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000414:	1b64      	subs	r4, r4, r5
 8000416:	2100      	movs	r1, #0
 8000418:	b11e      	cbz	r6, 8000422 <__udivmoddi4+0xa2>
 800041a:	40dc      	lsrs	r4, r3
 800041c:	2300      	movs	r3, #0
 800041e:	e9c6 4300 	strd	r4, r3, [r6]
 8000422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000426:	428b      	cmp	r3, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0xbc>
 800042a:	2e00      	cmp	r6, #0
 800042c:	f000 80ed 	beq.w	800060a <__udivmoddi4+0x28a>
 8000430:	2100      	movs	r1, #0
 8000432:	e9c6 0500 	strd	r0, r5, [r6]
 8000436:	4608      	mov	r0, r1
 8000438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043c:	fab3 f183 	clz	r1, r3
 8000440:	2900      	cmp	r1, #0
 8000442:	d149      	bne.n	80004d8 <__udivmoddi4+0x158>
 8000444:	42ab      	cmp	r3, r5
 8000446:	d302      	bcc.n	800044e <__udivmoddi4+0xce>
 8000448:	4282      	cmp	r2, r0
 800044a:	f200 80f8 	bhi.w	800063e <__udivmoddi4+0x2be>
 800044e:	1a84      	subs	r4, r0, r2
 8000450:	eb65 0203 	sbc.w	r2, r5, r3
 8000454:	2001      	movs	r0, #1
 8000456:	4617      	mov	r7, r2
 8000458:	2e00      	cmp	r6, #0
 800045a:	d0e2      	beq.n	8000422 <__udivmoddi4+0xa2>
 800045c:	e9c6 4700 	strd	r4, r7, [r6]
 8000460:	e7df      	b.n	8000422 <__udivmoddi4+0xa2>
 8000462:	b902      	cbnz	r2, 8000466 <__udivmoddi4+0xe6>
 8000464:	deff      	udf	#255	; 0xff
 8000466:	fab2 f382 	clz	r3, r2
 800046a:	2b00      	cmp	r3, #0
 800046c:	f040 8090 	bne.w	8000590 <__udivmoddi4+0x210>
 8000470:	1a8a      	subs	r2, r1, r2
 8000472:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000476:	fa1f fe8c 	uxth.w	lr, ip
 800047a:	2101      	movs	r1, #1
 800047c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000480:	fb07 2015 	mls	r0, r7, r5, r2
 8000484:	0c22      	lsrs	r2, r4, #16
 8000486:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800048a:	fb0e f005 	mul.w	r0, lr, r5
 800048e:	4290      	cmp	r0, r2
 8000490:	d908      	bls.n	80004a4 <__udivmoddi4+0x124>
 8000492:	eb1c 0202 	adds.w	r2, ip, r2
 8000496:	f105 38ff 	add.w	r8, r5, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0x122>
 800049c:	4290      	cmp	r0, r2
 800049e:	f200 80cb 	bhi.w	8000638 <__udivmoddi4+0x2b8>
 80004a2:	4645      	mov	r5, r8
 80004a4:	1a12      	subs	r2, r2, r0
 80004a6:	b2a4      	uxth	r4, r4
 80004a8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ac:	fb07 2210 	mls	r2, r7, r0, r2
 80004b0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004b4:	fb0e fe00 	mul.w	lr, lr, r0
 80004b8:	45a6      	cmp	lr, r4
 80004ba:	d908      	bls.n	80004ce <__udivmoddi4+0x14e>
 80004bc:	eb1c 0404 	adds.w	r4, ip, r4
 80004c0:	f100 32ff 	add.w	r2, r0, #4294967295
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x14c>
 80004c6:	45a6      	cmp	lr, r4
 80004c8:	f200 80bb 	bhi.w	8000642 <__udivmoddi4+0x2c2>
 80004cc:	4610      	mov	r0, r2
 80004ce:	eba4 040e 	sub.w	r4, r4, lr
 80004d2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80004d6:	e79f      	b.n	8000418 <__udivmoddi4+0x98>
 80004d8:	f1c1 0720 	rsb	r7, r1, #32
 80004dc:	408b      	lsls	r3, r1
 80004de:	fa22 fc07 	lsr.w	ip, r2, r7
 80004e2:	ea4c 0c03 	orr.w	ip, ip, r3
 80004e6:	fa05 f401 	lsl.w	r4, r5, r1
 80004ea:	fa20 f307 	lsr.w	r3, r0, r7
 80004ee:	40fd      	lsrs	r5, r7
 80004f0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004f4:	4323      	orrs	r3, r4
 80004f6:	fbb5 f8f9 	udiv	r8, r5, r9
 80004fa:	fa1f fe8c 	uxth.w	lr, ip
 80004fe:	fb09 5518 	mls	r5, r9, r8, r5
 8000502:	0c1c      	lsrs	r4, r3, #16
 8000504:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000508:	fb08 f50e 	mul.w	r5, r8, lr
 800050c:	42a5      	cmp	r5, r4
 800050e:	fa02 f201 	lsl.w	r2, r2, r1
 8000512:	fa00 f001 	lsl.w	r0, r0, r1
 8000516:	d90b      	bls.n	8000530 <__udivmoddi4+0x1b0>
 8000518:	eb1c 0404 	adds.w	r4, ip, r4
 800051c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000520:	f080 8088 	bcs.w	8000634 <__udivmoddi4+0x2b4>
 8000524:	42a5      	cmp	r5, r4
 8000526:	f240 8085 	bls.w	8000634 <__udivmoddi4+0x2b4>
 800052a:	f1a8 0802 	sub.w	r8, r8, #2
 800052e:	4464      	add	r4, ip
 8000530:	1b64      	subs	r4, r4, r5
 8000532:	b29d      	uxth	r5, r3
 8000534:	fbb4 f3f9 	udiv	r3, r4, r9
 8000538:	fb09 4413 	mls	r4, r9, r3, r4
 800053c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000540:	fb03 fe0e 	mul.w	lr, r3, lr
 8000544:	45a6      	cmp	lr, r4
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x1da>
 8000548:	eb1c 0404 	adds.w	r4, ip, r4
 800054c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000550:	d26c      	bcs.n	800062c <__udivmoddi4+0x2ac>
 8000552:	45a6      	cmp	lr, r4
 8000554:	d96a      	bls.n	800062c <__udivmoddi4+0x2ac>
 8000556:	3b02      	subs	r3, #2
 8000558:	4464      	add	r4, ip
 800055a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800055e:	fba3 9502 	umull	r9, r5, r3, r2
 8000562:	eba4 040e 	sub.w	r4, r4, lr
 8000566:	42ac      	cmp	r4, r5
 8000568:	46c8      	mov	r8, r9
 800056a:	46ae      	mov	lr, r5
 800056c:	d356      	bcc.n	800061c <__udivmoddi4+0x29c>
 800056e:	d053      	beq.n	8000618 <__udivmoddi4+0x298>
 8000570:	b156      	cbz	r6, 8000588 <__udivmoddi4+0x208>
 8000572:	ebb0 0208 	subs.w	r2, r0, r8
 8000576:	eb64 040e 	sbc.w	r4, r4, lr
 800057a:	fa04 f707 	lsl.w	r7, r4, r7
 800057e:	40ca      	lsrs	r2, r1
 8000580:	40cc      	lsrs	r4, r1
 8000582:	4317      	orrs	r7, r2
 8000584:	e9c6 7400 	strd	r7, r4, [r6]
 8000588:	4618      	mov	r0, r3
 800058a:	2100      	movs	r1, #0
 800058c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000590:	f1c3 0120 	rsb	r1, r3, #32
 8000594:	fa02 fc03 	lsl.w	ip, r2, r3
 8000598:	fa20 f201 	lsr.w	r2, r0, r1
 800059c:	fa25 f101 	lsr.w	r1, r5, r1
 80005a0:	409d      	lsls	r5, r3
 80005a2:	432a      	orrs	r2, r5
 80005a4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005a8:	fa1f fe8c 	uxth.w	lr, ip
 80005ac:	fbb1 f0f7 	udiv	r0, r1, r7
 80005b0:	fb07 1510 	mls	r5, r7, r0, r1
 80005b4:	0c11      	lsrs	r1, r2, #16
 80005b6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005ba:	fb00 f50e 	mul.w	r5, r0, lr
 80005be:	428d      	cmp	r5, r1
 80005c0:	fa04 f403 	lsl.w	r4, r4, r3
 80005c4:	d908      	bls.n	80005d8 <__udivmoddi4+0x258>
 80005c6:	eb1c 0101 	adds.w	r1, ip, r1
 80005ca:	f100 38ff 	add.w	r8, r0, #4294967295
 80005ce:	d22f      	bcs.n	8000630 <__udivmoddi4+0x2b0>
 80005d0:	428d      	cmp	r5, r1
 80005d2:	d92d      	bls.n	8000630 <__udivmoddi4+0x2b0>
 80005d4:	3802      	subs	r0, #2
 80005d6:	4461      	add	r1, ip
 80005d8:	1b49      	subs	r1, r1, r5
 80005da:	b292      	uxth	r2, r2
 80005dc:	fbb1 f5f7 	udiv	r5, r1, r7
 80005e0:	fb07 1115 	mls	r1, r7, r5, r1
 80005e4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005e8:	fb05 f10e 	mul.w	r1, r5, lr
 80005ec:	4291      	cmp	r1, r2
 80005ee:	d908      	bls.n	8000602 <__udivmoddi4+0x282>
 80005f0:	eb1c 0202 	adds.w	r2, ip, r2
 80005f4:	f105 38ff 	add.w	r8, r5, #4294967295
 80005f8:	d216      	bcs.n	8000628 <__udivmoddi4+0x2a8>
 80005fa:	4291      	cmp	r1, r2
 80005fc:	d914      	bls.n	8000628 <__udivmoddi4+0x2a8>
 80005fe:	3d02      	subs	r5, #2
 8000600:	4462      	add	r2, ip
 8000602:	1a52      	subs	r2, r2, r1
 8000604:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000608:	e738      	b.n	800047c <__udivmoddi4+0xfc>
 800060a:	4631      	mov	r1, r6
 800060c:	4630      	mov	r0, r6
 800060e:	e708      	b.n	8000422 <__udivmoddi4+0xa2>
 8000610:	4639      	mov	r1, r7
 8000612:	e6e6      	b.n	80003e2 <__udivmoddi4+0x62>
 8000614:	4610      	mov	r0, r2
 8000616:	e6fb      	b.n	8000410 <__udivmoddi4+0x90>
 8000618:	4548      	cmp	r0, r9
 800061a:	d2a9      	bcs.n	8000570 <__udivmoddi4+0x1f0>
 800061c:	ebb9 0802 	subs.w	r8, r9, r2
 8000620:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000624:	3b01      	subs	r3, #1
 8000626:	e7a3      	b.n	8000570 <__udivmoddi4+0x1f0>
 8000628:	4645      	mov	r5, r8
 800062a:	e7ea      	b.n	8000602 <__udivmoddi4+0x282>
 800062c:	462b      	mov	r3, r5
 800062e:	e794      	b.n	800055a <__udivmoddi4+0x1da>
 8000630:	4640      	mov	r0, r8
 8000632:	e7d1      	b.n	80005d8 <__udivmoddi4+0x258>
 8000634:	46d0      	mov	r8, sl
 8000636:	e77b      	b.n	8000530 <__udivmoddi4+0x1b0>
 8000638:	3d02      	subs	r5, #2
 800063a:	4462      	add	r2, ip
 800063c:	e732      	b.n	80004a4 <__udivmoddi4+0x124>
 800063e:	4608      	mov	r0, r1
 8000640:	e70a      	b.n	8000458 <__udivmoddi4+0xd8>
 8000642:	4464      	add	r4, ip
 8000644:	3802      	subs	r0, #2
 8000646:	e742      	b.n	80004ce <__udivmoddi4+0x14e>

08000648 <__aeabi_idiv0>:
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop

0800064c <greenLedTask_handler>:
extern  void SEGGER_UART_init(uint32_t);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void greenLedTask_handler(void *parameters) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b0a2      	sub	sp, #136	; 0x88
 8000650:	af02      	add	r7, sp, #8
 8000652:	6078      	str	r0, [r7, #4]
	char msg[100];
	int count = 1;
 8000654:	2301      	movs	r3, #1
 8000656:	67fb      	str	r3, [r7, #124]	; 0x7c
	int count2 = 0;
 8000658:	2300      	movs	r3, #0
 800065a:	67bb      	str	r3, [r7, #120]	; 0x78

	BaseType_t notifyResult = 0u;
 800065c:	2300      	movs	r3, #0
 800065e:	677b      	str	r3, [r7, #116]	; 0x74
	TickType_t prevWakeTime = xTaskGetTickCount();
 8000660:	f002 fea2 	bl	80033a8 <xTaskGetTickCount>
 8000664:	4603      	mov	r3, r0
 8000666:	60bb      	str	r3, [r7, #8]
	TickType_t frequency = 200;
 8000668:	23c8      	movs	r3, #200	; 0xc8
 800066a:	673b      	str	r3, [r7, #112]	; 0x70

	 while(1) {
		 notifyResult = xTaskNotifyWaitIndexed(0, 0, 0, NULL, 2000); //(0, 0, 0, 2000);
 800066c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000670:	9300      	str	r3, [sp, #0]
 8000672:	2300      	movs	r3, #0
 8000674:	2200      	movs	r2, #0
 8000676:	2100      	movs	r1, #0
 8000678:	2000      	movs	r0, #0
 800067a:	f003 fad7 	bl	8003c2c <xTaskGenericNotifyWait>
 800067e:	6778      	str	r0, [r7, #116]	; 0x74

		 if (notifyResult == pdTRUE) {
 8000680:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000682:	2b01      	cmp	r3, #1
 8000684:	d10b      	bne.n	800069e <greenLedTask_handler+0x52>
		 	snprintf(msg,100,"%s\n", "Notification at greenLED task received\n");
 8000686:	f107 000c 	add.w	r0, r7, #12
 800068a:	4b25      	ldr	r3, [pc, #148]	; (8000720 <greenLedTask_handler+0xd4>)
 800068c:	4a25      	ldr	r2, [pc, #148]	; (8000724 <greenLedTask_handler+0xd8>)
 800068e:	2164      	movs	r1, #100	; 0x64
 8000690:	f007 f810 	bl	80076b4 <sniprintf>
		 	SEGGER_SYSVIEW_PrintfTarget(msg);
 8000694:	f107 030c 	add.w	r3, r7, #12
 8000698:	4618      	mov	r0, r3
 800069a:	f006 ff6d 	bl	8007578 <SEGGER_SYSVIEW_PrintfTarget>
		 }
		//snprintf(msg,100,"%s\n", (char*)parameters);
		//SEGGER_SYSVIEW_PrintfTarget(msg);
		if (count == 6) {
 800069e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80006a0:	2b06      	cmp	r3, #6
 80006a2:	d101      	bne.n	80006a8 <greenLedTask_handler+0x5c>
			count = 1;
 80006a4:	2301      	movs	r3, #1
 80006a6:	67fb      	str	r3, [r7, #124]	; 0x7c
		}

		count2 = count;
 80006a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80006aa:	67bb      	str	r3, [r7, #120]	; 0x78
		while (count2 > 0) {
 80006ac:	e016      	b.n	80006dc <greenLedTask_handler+0x90>
			HAL_GPIO_TogglePin(GPIOA, greenLed);
 80006ae:	2120      	movs	r1, #32
 80006b0:	481d      	ldr	r0, [pc, #116]	; (8000728 <greenLedTask_handler+0xdc>)
 80006b2:	f000 fe2c 	bl	800130e <HAL_GPIO_TogglePin>

			// using fixed delay span
			// vTaskDelay(pdMS_TO_TICKS(200));

			// using fixed task wake up
			vTaskDelayUntil(&prevWakeTime, frequency);
 80006b6:	f107 0308 	add.w	r3, r7, #8
 80006ba:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80006bc:	4618      	mov	r0, r3
 80006be:	f002 fc81 	bl	8002fc4 <xTaskDelayUntil>

			HAL_GPIO_TogglePin(GPIOA, greenLed);
 80006c2:	2120      	movs	r1, #32
 80006c4:	4818      	ldr	r0, [pc, #96]	; (8000728 <greenLedTask_handler+0xdc>)
 80006c6:	f000 fe22 	bl	800130e <HAL_GPIO_TogglePin>

			// using fixed delay span
		    // vTaskDelay(pdMS_TO_TICKS(200));

			// using fixed task wake up
			vTaskDelayUntil(&prevWakeTime, frequency);
 80006ca:	f107 0308 	add.w	r3, r7, #8
 80006ce:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80006d0:	4618      	mov	r0, r3
 80006d2:	f002 fc77 	bl	8002fc4 <xTaskDelayUntil>
			count2--;
 80006d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80006d8:	3b01      	subs	r3, #1
 80006da:	67bb      	str	r3, [r7, #120]	; 0x78
		while (count2 > 0) {
 80006dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80006de:	2b00      	cmp	r3, #0
 80006e0:	dce5      	bgt.n	80006ae <greenLedTask_handler+0x62>
		}
		count++;
 80006e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80006e4:	3301      	adds	r3, #1
 80006e6:	67fb      	str	r3, [r7, #124]	; 0x7c
		// HAL_GPIO_TogglePin(GPIOA, greenLed);
		HAL_GPIO_WritePin(GPIOA, greenLed, 0u);
 80006e8:	2200      	movs	r2, #0
 80006ea:	2120      	movs	r1, #32
 80006ec:	480e      	ldr	r0, [pc, #56]	; (8000728 <greenLedTask_handler+0xdc>)
 80006ee:	f000 fdf5 	bl	80012dc <HAL_GPIO_WritePin>
		//vTaskDelay(pdMS_TO_TICKS(2000));
		vTaskDelayUntil(&prevWakeTime, (frequency*10u));
 80006f2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80006f4:	4613      	mov	r3, r2
 80006f6:	009b      	lsls	r3, r3, #2
 80006f8:	4413      	add	r3, r2
 80006fa:	005b      	lsls	r3, r3, #1
 80006fc:	461a      	mov	r2, r3
 80006fe:	f107 0308 	add.w	r3, r7, #8
 8000702:	4611      	mov	r1, r2
 8000704:	4618      	mov	r0, r3
 8000706:	f002 fc5d 	bl	8002fc4 <xTaskDelayUntil>

		// printf("%s\n", (char *)parameters);
		// taskYIELD();
		xTaskNotifyIndexed(tickCountingTaskHandle, 0, 0, eNoAction); //(tickCountingTaskHandle, 0, 0);
 800070a:	4b08      	ldr	r3, [pc, #32]	; (800072c <greenLedTask_handler+0xe0>)
 800070c:	6818      	ldr	r0, [r3, #0]
 800070e:	2300      	movs	r3, #0
 8000710:	9300      	str	r3, [sp, #0]
 8000712:	2300      	movs	r3, #0
 8000714:	2200      	movs	r2, #0
 8000716:	2100      	movs	r1, #0
 8000718:	f003 fb10 	bl	8003d3c <xTaskGenericNotify>
		 notifyResult = xTaskNotifyWaitIndexed(0, 0, 0, NULL, 2000); //(0, 0, 0, 2000);
 800071c:	e7a6      	b.n	800066c <greenLedTask_handler+0x20>
 800071e:	bf00      	nop
 8000720:	0800808c 	.word	0x0800808c
 8000724:	080080b4 	.word	0x080080b4
 8000728:	40020000 	.word	0x40020000
 800072c:	2000008c 	.word	0x2000008c

08000730 <sendDataToPC_handler>:
	 }
}

static void sendDataToPC_handler(void *parameters) {
 8000730:	b580      	push	{r7, lr}
 8000732:	b0ac      	sub	sp, #176	; 0xb0
 8000734:	af02      	add	r7, sp, #8
 8000736:	6078      	str	r0, [r7, #4]
	while(1) {
		// printf("%s\n", (char *)parameters);
		// snprintf(msg,100,"%s\n", (char*)parameters);
		// SEGGER_SYSVIEW_PrintfTarget(msg);
		// taskYIELD();
		if ((xTaskNotifyWaitIndexed(1, 0, 0, &notificationVal, 2000)) == pdTRUE) {
 8000738:	f107 030c 	add.w	r3, r7, #12
 800073c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000740:	9200      	str	r2, [sp, #0]
 8000742:	2200      	movs	r2, #0
 8000744:	2100      	movs	r1, #0
 8000746:	2001      	movs	r0, #1
 8000748:	f003 fa70 	bl	8003c2c <xTaskGenericNotifyWait>
 800074c:	4603      	mov	r3, r0
 800074e:	2b01      	cmp	r3, #1
 8000750:	d1f2      	bne.n	8000738 <sendDataToPC_handler+0x8>
			snprintf(msg, 100, "%s", (char*)parameters);
 8000752:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	4a10      	ldr	r2, [pc, #64]	; (800079c <sendDataToPC_handler+0x6c>)
 800075a:	2164      	movs	r1, #100	; 0x64
 800075c:	f006 ffaa 	bl	80076b4 <sniprintf>

			snprintf(time, 50, "%lu\n", notificationVal);
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	f107 0010 	add.w	r0, r7, #16
 8000766:	4a0e      	ldr	r2, [pc, #56]	; (80007a0 <sendDataToPC_handler+0x70>)
 8000768:	2132      	movs	r1, #50	; 0x32
 800076a:	f006 ffa3 	bl	80076b4 <sniprintf>

			strcat(msg, time);
 800076e:	f107 0210 	add.w	r2, r7, #16
 8000772:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000776:	4611      	mov	r1, r2
 8000778:	4618      	mov	r0, r3
 800077a:	f006 ffe7 	bl	800774c <strcat>

			SEGGER_SYSVIEW_PrintfTarget(msg);
 800077e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000782:	4618      	mov	r0, r3
 8000784:	f006 fef8 	bl	8007578 <SEGGER_SYSVIEW_PrintfTarget>

			// xTaskNotifyIndexed(tickCountingTaskHandle, 1, 0, eNoAction);
			xTaskGenericNotify( tickCountingTaskHandle, 1, 0, eNoAction, NULL );
 8000788:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <sendDataToPC_handler+0x74>)
 800078a:	6818      	ldr	r0, [r3, #0]
 800078c:	2300      	movs	r3, #0
 800078e:	9300      	str	r3, [sp, #0]
 8000790:	2300      	movs	r3, #0
 8000792:	2200      	movs	r2, #0
 8000794:	2101      	movs	r1, #1
 8000796:	f003 fad1 	bl	8003d3c <xTaskGenericNotify>
		if ((xTaskNotifyWaitIndexed(1, 0, 0, &notificationVal, 2000)) == pdTRUE) {
 800079a:	e7cd      	b.n	8000738 <sendDataToPC_handler+0x8>
 800079c:	080080b8 	.word	0x080080b8
 80007a0:	080080bc 	.word	0x080080bc
 80007a4:	2000008c 	.word	0x2000008c

080007a8 <tickCountingTask_handler>:


	}
}

static void tickCountingTask_handler(void *parameters) {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b0a2      	sub	sp, #136	; 0x88
 80007ac:	af02      	add	r7, sp, #8
 80007ae:	6078      	str	r0, [r7, #4]
	char msg[100];
	uint32_t secElapsed = 0u;
 80007b0:	2300      	movs	r3, #0
 80007b2:	67fb      	str	r3, [r7, #124]	; 0x7c
	uint32_t currSysTimeMS = xTaskGetTickCount() * (1/configTICK_RATE_HZ) * 1000;
 80007b4:	f002 fdf8 	bl	80033a8 <xTaskGetTickCount>
 80007b8:	2300      	movs	r3, #0
 80007ba:	67bb      	str	r3, [r7, #120]	; 0x78
	uint32_t prevSysTimeMS = currSysTimeMS;
 80007bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80007be:	677b      	str	r3, [r7, #116]	; 0x74
	while(1) {
		// printf("%s\n", (char *)parameters);
		// snprintf(msg,100,"%s\n", (char*)parameters);
		// SEGGER_SYSVIEW_PrintfTarget(msg);
		// taskYIELD();
		if ((currSysTimeMS - prevSysTimeMS) >= 1000) {
 80007c0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80007c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80007c4:	1ad3      	subs	r3, r2, r3
 80007c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80007ca:	d31a      	bcc.n	8000802 <tickCountingTask_handler+0x5a>
			prevSysTimeMS = currSysTimeMS;
 80007cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80007ce:	677b      	str	r3, [r7, #116]	; 0x74
			secElapsed++;
 80007d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80007d2:	3301      	adds	r3, #1
 80007d4:	67fb      	str	r3, [r7, #124]	; 0x7c
			xTaskNotifyIndexed(sendDataToPCHandle, 1, secElapsed, eSetValueWithOverwrite);
 80007d6:	4b1e      	ldr	r3, [pc, #120]	; (8000850 <tickCountingTask_handler+0xa8>)
 80007d8:	6818      	ldr	r0, [r3, #0]
 80007da:	2300      	movs	r3, #0
 80007dc:	9300      	str	r3, [sp, #0]
 80007de:	2303      	movs	r3, #3
 80007e0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80007e2:	2101      	movs	r1, #1
 80007e4:	f003 faaa 	bl	8003d3c <xTaskGenericNotify>
			if ((xTaskNotifyWaitIndexed(1, 0, 0, NULL, 2000)) == pdFALSE) {
 80007e8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80007ec:	9300      	str	r3, [sp, #0]
 80007ee:	2300      	movs	r3, #0
 80007f0:	2200      	movs	r2, #0
 80007f2:	2100      	movs	r1, #0
 80007f4:	2001      	movs	r0, #1
 80007f6:	f003 fa19 	bl	8003c2c <xTaskGenericNotifyWait>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d100      	bne.n	8000802 <tickCountingTask_handler+0x5a>
				while (1);
 8000800:	e7fe      	b.n	8000800 <tickCountingTask_handler+0x58>
			}
		}
		xTaskNotifyIndexed(greenLedTaskHandle, 0, 0, eNoAction); //(greenLedTaskHandle, 0, 0);
 8000802:	4b14      	ldr	r3, [pc, #80]	; (8000854 <tickCountingTask_handler+0xac>)
 8000804:	6818      	ldr	r0, [r3, #0]
 8000806:	2300      	movs	r3, #0
 8000808:	9300      	str	r3, [sp, #0]
 800080a:	2300      	movs	r3, #0
 800080c:	2200      	movs	r2, #0
 800080e:	2100      	movs	r1, #0
 8000810:	f003 fa94 	bl	8003d3c <xTaskGenericNotify>

		BaseType_t notifyResult = xTaskNotifyWaitIndexed(0, 0, 0, NULL, 2000); //(0, 0, 0, 2000);
 8000814:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000818:	9300      	str	r3, [sp, #0]
 800081a:	2300      	movs	r3, #0
 800081c:	2200      	movs	r2, #0
 800081e:	2100      	movs	r1, #0
 8000820:	2000      	movs	r0, #0
 8000822:	f003 fa03 	bl	8003c2c <xTaskGenericNotifyWait>
 8000826:	6738      	str	r0, [r7, #112]	; 0x70

		if (notifyResult == pdTRUE) {
 8000828:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800082a:	2b01      	cmp	r3, #1
 800082c:	d10b      	bne.n	8000846 <tickCountingTask_handler+0x9e>
			snprintf(msg,100,"%s\n", "Notification at tickcount received\n");
 800082e:	f107 000c 	add.w	r0, r7, #12
 8000832:	4b09      	ldr	r3, [pc, #36]	; (8000858 <tickCountingTask_handler+0xb0>)
 8000834:	4a09      	ldr	r2, [pc, #36]	; (800085c <tickCountingTask_handler+0xb4>)
 8000836:	2164      	movs	r1, #100	; 0x64
 8000838:	f006 ff3c 	bl	80076b4 <sniprintf>
			SEGGER_SYSVIEW_PrintfTarget(msg);
 800083c:	f107 030c 	add.w	r3, r7, #12
 8000840:	4618      	mov	r0, r3
 8000842:	f006 fe99 	bl	8007578 <SEGGER_SYSVIEW_PrintfTarget>
		}

		currSysTimeMS = xTaskGetTickCount();//  * (1/configTICK_RATE_HZ) * 1000;
 8000846:	f002 fdaf 	bl	80033a8 <xTaskGetTickCount>
 800084a:	67b8      	str	r0, [r7, #120]	; 0x78
	while(1) {
 800084c:	e7b8      	b.n	80007c0 <tickCountingTask_handler+0x18>
 800084e:	bf00      	nop
 8000850:	20000090 	.word	0x20000090
 8000854:	20000088 	.word	0x20000088
 8000858:	080080c4 	.word	0x080080c4
 800085c:	080080b4 	.word	0x080080b4

08000860 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b086      	sub	sp, #24
 8000864:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000866:	f000 fa81 	bl	8000d6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800086a:	f000 f877 	bl	800095c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800086e:	f000 f8e7 	bl	8000a40 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  // enable cycle counter register to have proper time stamps in SysVIew
  DWT_CTRL_CNT |= (1 << 0);
 8000872:	4b2c      	ldr	r3, [pc, #176]	; (8000924 <main+0xc4>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4a2b      	ldr	r2, [pc, #172]	; (8000924 <main+0xc4>)
 8000878:	f043 0301 	orr.w	r3, r3, #1
 800087c:	6013      	str	r3, [r2, #0]

  SEGGER_UART_init(500000);
 800087e:	482a      	ldr	r0, [pc, #168]	; (8000928 <main+0xc8>)
 8000880:	f004 fd1c 	bl	80052bc <SEGGER_UART_init>

  // configure and call sysview apis to record
  SEGGER_SYSVIEW_Conf();
 8000884:	f004 fb44 	bl	8004f10 <SEGGER_SYSVIEW_Conf>
  // SEGGER_SYSVIEW_Start();


  // create tasks
  status = xTaskCreate(greenLedTask_handler, "greenLedTask", 200, "Hello from greenLedTask", 2, &greenLedTaskHandle);
 8000888:	4b28      	ldr	r3, [pc, #160]	; (800092c <main+0xcc>)
 800088a:	9301      	str	r3, [sp, #4]
 800088c:	2302      	movs	r3, #2
 800088e:	9300      	str	r3, [sp, #0]
 8000890:	4b27      	ldr	r3, [pc, #156]	; (8000930 <main+0xd0>)
 8000892:	22c8      	movs	r2, #200	; 0xc8
 8000894:	4927      	ldr	r1, [pc, #156]	; (8000934 <main+0xd4>)
 8000896:	4828      	ldr	r0, [pc, #160]	; (8000938 <main+0xd8>)
 8000898:	f002 fa0c 	bl	8002cb4 <xTaskCreate>
 800089c:	60f8      	str	r0, [r7, #12]
  configASSERT(status == pdPASS);
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	2b01      	cmp	r3, #1
 80008a2:	d00a      	beq.n	80008ba <main+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80008a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008a8:	f383 8811 	msr	BASEPRI, r3
 80008ac:	f3bf 8f6f 	isb	sy
 80008b0:	f3bf 8f4f 	dsb	sy
 80008b4:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80008b6:	bf00      	nop
 80008b8:	e7fe      	b.n	80008b8 <main+0x58>

  status = xTaskCreate(tickCountingTask_handler, "tickCountingTask", 200, "Hello from tickCountingTask", 2, &tickCountingTaskHandle);
 80008ba:	4b20      	ldr	r3, [pc, #128]	; (800093c <main+0xdc>)
 80008bc:	9301      	str	r3, [sp, #4]
 80008be:	2302      	movs	r3, #2
 80008c0:	9300      	str	r3, [sp, #0]
 80008c2:	4b1f      	ldr	r3, [pc, #124]	; (8000940 <main+0xe0>)
 80008c4:	22c8      	movs	r2, #200	; 0xc8
 80008c6:	491f      	ldr	r1, [pc, #124]	; (8000944 <main+0xe4>)
 80008c8:	481f      	ldr	r0, [pc, #124]	; (8000948 <main+0xe8>)
 80008ca:	f002 f9f3 	bl	8002cb4 <xTaskCreate>
 80008ce:	60f8      	str	r0, [r7, #12]
  configASSERT(status == pdPASS);
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	2b01      	cmp	r3, #1
 80008d4:	d00a      	beq.n	80008ec <main+0x8c>
        __asm volatile
 80008d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008da:	f383 8811 	msr	BASEPRI, r3
 80008de:	f3bf 8f6f 	isb	sy
 80008e2:	f3bf 8f4f 	dsb	sy
 80008e6:	607b      	str	r3, [r7, #4]
    }
 80008e8:	bf00      	nop
 80008ea:	e7fe      	b.n	80008ea <main+0x8a>

  status = xTaskCreate(sendDataToPC_handler, "sendDataToPCTask", 200, "Hello from sendDataToPCTask: ", 2, &sendDataToPCHandle);
 80008ec:	4b17      	ldr	r3, [pc, #92]	; (800094c <main+0xec>)
 80008ee:	9301      	str	r3, [sp, #4]
 80008f0:	2302      	movs	r3, #2
 80008f2:	9300      	str	r3, [sp, #0]
 80008f4:	4b16      	ldr	r3, [pc, #88]	; (8000950 <main+0xf0>)
 80008f6:	22c8      	movs	r2, #200	; 0xc8
 80008f8:	4916      	ldr	r1, [pc, #88]	; (8000954 <main+0xf4>)
 80008fa:	4817      	ldr	r0, [pc, #92]	; (8000958 <main+0xf8>)
 80008fc:	f002 f9da 	bl	8002cb4 <xTaskCreate>
 8000900:	60f8      	str	r0, [r7, #12]
    configASSERT(status == pdPASS);
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	2b01      	cmp	r3, #1
 8000906:	d00a      	beq.n	800091e <main+0xbe>
        __asm volatile
 8000908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800090c:	f383 8811 	msr	BASEPRI, r3
 8000910:	f3bf 8f6f 	isb	sy
 8000914:	f3bf 8f4f 	dsb	sy
 8000918:	603b      	str	r3, [r7, #0]
    }
 800091a:	bf00      	nop
 800091c:	e7fe      	b.n	800091c <main+0xbc>

  // start scheduler to run tasks
  vTaskStartScheduler();
 800091e:	f002 fbd3 	bl	80030c8 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000922:	e7fe      	b.n	8000922 <main+0xc2>
 8000924:	e0001000 	.word	0xe0001000
 8000928:	0007a120 	.word	0x0007a120
 800092c:	20000088 	.word	0x20000088
 8000930:	080080e8 	.word	0x080080e8
 8000934:	08008100 	.word	0x08008100
 8000938:	0800064d 	.word	0x0800064d
 800093c:	2000008c 	.word	0x2000008c
 8000940:	08008110 	.word	0x08008110
 8000944:	0800812c 	.word	0x0800812c
 8000948:	080007a9 	.word	0x080007a9
 800094c:	20000090 	.word	0x20000090
 8000950:	08008140 	.word	0x08008140
 8000954:	08008160 	.word	0x08008160
 8000958:	08000731 	.word	0x08000731

0800095c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b094      	sub	sp, #80	; 0x50
 8000960:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000962:	f107 031c 	add.w	r3, r7, #28
 8000966:	2234      	movs	r2, #52	; 0x34
 8000968:	2100      	movs	r1, #0
 800096a:	4618      	mov	r0, r3
 800096c:	f006 fee6 	bl	800773c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000970:	f107 0308 	add.w	r3, r7, #8
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
 800097e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000980:	2300      	movs	r3, #0
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	4b2c      	ldr	r3, [pc, #176]	; (8000a38 <SystemClock_Config+0xdc>)
 8000986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000988:	4a2b      	ldr	r2, [pc, #172]	; (8000a38 <SystemClock_Config+0xdc>)
 800098a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800098e:	6413      	str	r3, [r2, #64]	; 0x40
 8000990:	4b29      	ldr	r3, [pc, #164]	; (8000a38 <SystemClock_Config+0xdc>)
 8000992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000994:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000998:	607b      	str	r3, [r7, #4]
 800099a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800099c:	2300      	movs	r3, #0
 800099e:	603b      	str	r3, [r7, #0]
 80009a0:	4b26      	ldr	r3, [pc, #152]	; (8000a3c <SystemClock_Config+0xe0>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a25      	ldr	r2, [pc, #148]	; (8000a3c <SystemClock_Config+0xe0>)
 80009a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009aa:	6013      	str	r3, [r2, #0]
 80009ac:	4b23      	ldr	r3, [pc, #140]	; (8000a3c <SystemClock_Config+0xe0>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009b4:	603b      	str	r3, [r7, #0]
 80009b6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009b8:	2302      	movs	r3, #2
 80009ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009bc:	2301      	movs	r3, #1
 80009be:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009c0:	2310      	movs	r3, #16
 80009c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009c4:	2302      	movs	r3, #2
 80009c6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009c8:	2300      	movs	r3, #0
 80009ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80009cc:	2308      	movs	r3, #8
 80009ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80009d0:	23b4      	movs	r3, #180	; 0xb4
 80009d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009d4:	2302      	movs	r3, #2
 80009d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009d8:	2302      	movs	r3, #2
 80009da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009dc:	2302      	movs	r3, #2
 80009de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009e0:	f107 031c 	add.w	r3, r7, #28
 80009e4:	4618      	mov	r0, r3
 80009e6:	f001 f865 	bl	8001ab4 <HAL_RCC_OscConfig>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80009f0:	f000 f8b6 	bl	8000b60 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80009f4:	f000 fca6 	bl	8001344 <HAL_PWREx_EnableOverDrive>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80009fe:	f000 f8af 	bl	8000b60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a02:	230f      	movs	r3, #15
 8000a04:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a06:	2302      	movs	r3, #2
 8000a08:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a0e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a12:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a18:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a1a:	f107 0308 	add.w	r3, r7, #8
 8000a1e:	2105      	movs	r1, #5
 8000a20:	4618      	mov	r0, r3
 8000a22:	f000 fcdf 	bl	80013e4 <HAL_RCC_ClockConfig>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000a2c:	f000 f898 	bl	8000b60 <Error_Handler>
  }
}
 8000a30:	bf00      	nop
 8000a32:	3750      	adds	r7, #80	; 0x50
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	40023800 	.word	0x40023800
 8000a3c:	40007000 	.word	0x40007000

08000a40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08a      	sub	sp, #40	; 0x28
 8000a44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a46:	f107 0314 	add.w	r3, r7, #20
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	605a      	str	r2, [r3, #4]
 8000a50:	609a      	str	r2, [r3, #8]
 8000a52:	60da      	str	r2, [r3, #12]
 8000a54:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	613b      	str	r3, [r7, #16]
 8000a5a:	4b35      	ldr	r3, [pc, #212]	; (8000b30 <MX_GPIO_Init+0xf0>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	4a34      	ldr	r2, [pc, #208]	; (8000b30 <MX_GPIO_Init+0xf0>)
 8000a60:	f043 0304 	orr.w	r3, r3, #4
 8000a64:	6313      	str	r3, [r2, #48]	; 0x30
 8000a66:	4b32      	ldr	r3, [pc, #200]	; (8000b30 <MX_GPIO_Init+0xf0>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	f003 0304 	and.w	r3, r3, #4
 8000a6e:	613b      	str	r3, [r7, #16]
 8000a70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	60fb      	str	r3, [r7, #12]
 8000a76:	4b2e      	ldr	r3, [pc, #184]	; (8000b30 <MX_GPIO_Init+0xf0>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	4a2d      	ldr	r2, [pc, #180]	; (8000b30 <MX_GPIO_Init+0xf0>)
 8000a7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a80:	6313      	str	r3, [r2, #48]	; 0x30
 8000a82:	4b2b      	ldr	r3, [pc, #172]	; (8000b30 <MX_GPIO_Init+0xf0>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60bb      	str	r3, [r7, #8]
 8000a92:	4b27      	ldr	r3, [pc, #156]	; (8000b30 <MX_GPIO_Init+0xf0>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	4a26      	ldr	r2, [pc, #152]	; (8000b30 <MX_GPIO_Init+0xf0>)
 8000a98:	f043 0301 	orr.w	r3, r3, #1
 8000a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9e:	4b24      	ldr	r3, [pc, #144]	; (8000b30 <MX_GPIO_Init+0xf0>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	f003 0301 	and.w	r3, r3, #1
 8000aa6:	60bb      	str	r3, [r7, #8]
 8000aa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	607b      	str	r3, [r7, #4]
 8000aae:	4b20      	ldr	r3, [pc, #128]	; (8000b30 <MX_GPIO_Init+0xf0>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	4a1f      	ldr	r2, [pc, #124]	; (8000b30 <MX_GPIO_Init+0xf0>)
 8000ab4:	f043 0302 	orr.w	r3, r3, #2
 8000ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aba:	4b1d      	ldr	r3, [pc, #116]	; (8000b30 <MX_GPIO_Init+0xf0>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	f003 0302 	and.w	r3, r3, #2
 8000ac2:	607b      	str	r3, [r7, #4]
 8000ac4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2120      	movs	r1, #32
 8000aca:	481a      	ldr	r0, [pc, #104]	; (8000b34 <MX_GPIO_Init+0xf4>)
 8000acc:	f000 fc06 	bl	80012dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ad0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ad4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ad6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ada:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4814      	ldr	r0, [pc, #80]	; (8000b38 <MX_GPIO_Init+0xf8>)
 8000ae8:	f000 fa64 	bl	8000fb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000aec:	230c      	movs	r3, #12
 8000aee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af0:	2302      	movs	r3, #2
 8000af2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af8:	2303      	movs	r3, #3
 8000afa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000afc:	2307      	movs	r3, #7
 8000afe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	4619      	mov	r1, r3
 8000b06:	480b      	ldr	r0, [pc, #44]	; (8000b34 <MX_GPIO_Init+0xf4>)
 8000b08:	f000 fa54 	bl	8000fb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b0c:	2320      	movs	r3, #32
 8000b0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b10:	2301      	movs	r3, #1
 8000b12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	4619      	mov	r1, r3
 8000b22:	4804      	ldr	r0, [pc, #16]	; (8000b34 <MX_GPIO_Init+0xf4>)
 8000b24:	f000 fa46 	bl	8000fb4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b28:	bf00      	nop
 8000b2a:	3728      	adds	r7, #40	; 0x28
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	40023800 	.word	0x40023800
 8000b34:	40020000 	.word	0x40020000
 8000b38:	40020800 	.word	0x40020800

08000b3c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a04      	ldr	r2, [pc, #16]	; (8000b5c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d101      	bne.n	8000b52 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b4e:	f000 f92f 	bl	8000db0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b52:	bf00      	nop
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40001000 	.word	0x40001000

08000b60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b64:	b672      	cpsid	i
}
 8000b66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <Error_Handler+0x8>
	...

08000b6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	607b      	str	r3, [r7, #4]
 8000b76:	4b10      	ldr	r3, [pc, #64]	; (8000bb8 <HAL_MspInit+0x4c>)
 8000b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7a:	4a0f      	ldr	r2, [pc, #60]	; (8000bb8 <HAL_MspInit+0x4c>)
 8000b7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b80:	6453      	str	r3, [r2, #68]	; 0x44
 8000b82:	4b0d      	ldr	r3, [pc, #52]	; (8000bb8 <HAL_MspInit+0x4c>)
 8000b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b8a:	607b      	str	r3, [r7, #4]
 8000b8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	603b      	str	r3, [r7, #0]
 8000b92:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <HAL_MspInit+0x4c>)
 8000b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b96:	4a08      	ldr	r2, [pc, #32]	; (8000bb8 <HAL_MspInit+0x4c>)
 8000b98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b9e:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <HAL_MspInit+0x4c>)
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ba6:	603b      	str	r3, [r7, #0]
 8000ba8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000baa:	f003 fe2d 	bl	8004808 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40023800 	.word	0x40023800

08000bbc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b08e      	sub	sp, #56	; 0x38
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000bcc:	2300      	movs	r3, #0
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	4b33      	ldr	r3, [pc, #204]	; (8000ca0 <HAL_InitTick+0xe4>)
 8000bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd4:	4a32      	ldr	r2, [pc, #200]	; (8000ca0 <HAL_InitTick+0xe4>)
 8000bd6:	f043 0310 	orr.w	r3, r3, #16
 8000bda:	6413      	str	r3, [r2, #64]	; 0x40
 8000bdc:	4b30      	ldr	r3, [pc, #192]	; (8000ca0 <HAL_InitTick+0xe4>)
 8000bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be0:	f003 0310 	and.w	r3, r3, #16
 8000be4:	60fb      	str	r3, [r7, #12]
 8000be6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000be8:	f107 0210 	add.w	r2, r7, #16
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	4611      	mov	r1, r2
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f000 fcfc 	bl	80015f0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000bf8:	6a3b      	ldr	r3, [r7, #32]
 8000bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d103      	bne.n	8000c0a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c02:	f000 fce1 	bl	80015c8 <HAL_RCC_GetPCLK1Freq>
 8000c06:	6378      	str	r0, [r7, #52]	; 0x34
 8000c08:	e004      	b.n	8000c14 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c0a:	f000 fcdd 	bl	80015c8 <HAL_RCC_GetPCLK1Freq>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c16:	4a23      	ldr	r2, [pc, #140]	; (8000ca4 <HAL_InitTick+0xe8>)
 8000c18:	fba2 2303 	umull	r2, r3, r2, r3
 8000c1c:	0c9b      	lsrs	r3, r3, #18
 8000c1e:	3b01      	subs	r3, #1
 8000c20:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c22:	4b21      	ldr	r3, [pc, #132]	; (8000ca8 <HAL_InitTick+0xec>)
 8000c24:	4a21      	ldr	r2, [pc, #132]	; (8000cac <HAL_InitTick+0xf0>)
 8000c26:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c28:	4b1f      	ldr	r3, [pc, #124]	; (8000ca8 <HAL_InitTick+0xec>)
 8000c2a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c2e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c30:	4a1d      	ldr	r2, [pc, #116]	; (8000ca8 <HAL_InitTick+0xec>)
 8000c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c34:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c36:	4b1c      	ldr	r3, [pc, #112]	; (8000ca8 <HAL_InitTick+0xec>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c3c:	4b1a      	ldr	r3, [pc, #104]	; (8000ca8 <HAL_InitTick+0xec>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c42:	4b19      	ldr	r3, [pc, #100]	; (8000ca8 <HAL_InitTick+0xec>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000c48:	4817      	ldr	r0, [pc, #92]	; (8000ca8 <HAL_InitTick+0xec>)
 8000c4a:	f001 f9d1 	bl	8001ff0 <HAL_TIM_Base_Init>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000c54:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d11b      	bne.n	8000c94 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000c5c:	4812      	ldr	r0, [pc, #72]	; (8000ca8 <HAL_InitTick+0xec>)
 8000c5e:	f001 fa21 	bl	80020a4 <HAL_TIM_Base_Start_IT>
 8000c62:	4603      	mov	r3, r0
 8000c64:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000c68:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d111      	bne.n	8000c94 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c70:	2036      	movs	r0, #54	; 0x36
 8000c72:	f000 f991 	bl	8000f98 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2b0f      	cmp	r3, #15
 8000c7a:	d808      	bhi.n	8000c8e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	6879      	ldr	r1, [r7, #4]
 8000c80:	2036      	movs	r0, #54	; 0x36
 8000c82:	f000 f96d 	bl	8000f60 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c86:	4a0a      	ldr	r2, [pc, #40]	; (8000cb0 <HAL_InitTick+0xf4>)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6013      	str	r3, [r2, #0]
 8000c8c:	e002      	b.n	8000c94 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c94:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3738      	adds	r7, #56	; 0x38
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	40023800 	.word	0x40023800
 8000ca4:	431bde83 	.word	0x431bde83
 8000ca8:	20000094 	.word	0x20000094
 8000cac:	40001000 	.word	0x40001000
 8000cb0:	20000004 	.word	0x20000004

08000cb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <NMI_Handler+0x4>

08000cba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cbe:	e7fe      	b.n	8000cbe <HardFault_Handler+0x4>

08000cc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <MemManage_Handler+0x4>

08000cc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cca:	e7fe      	b.n	8000cca <BusFault_Handler+0x4>

08000ccc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd0:	e7fe      	b.n	8000cd0 <UsageFault_Handler+0x4>

08000cd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ce4:	4802      	ldr	r0, [pc, #8]	; (8000cf0 <TIM6_DAC_IRQHandler+0x10>)
 8000ce6:	f001 fa4d 	bl	8002184 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000094 	.word	0x20000094

08000cf4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cf8:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <SystemInit+0x20>)
 8000cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cfe:	4a05      	ldr	r2, [pc, #20]	; (8000d14 <SystemInit+0x20>)
 8000d00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d08:	bf00      	nop
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d50 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d1c:	f7ff ffea 	bl	8000cf4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d20:	480c      	ldr	r0, [pc, #48]	; (8000d54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d22:	490d      	ldr	r1, [pc, #52]	; (8000d58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d24:	4a0d      	ldr	r2, [pc, #52]	; (8000d5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d28:	e002      	b.n	8000d30 <LoopCopyDataInit>

08000d2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d2e:	3304      	adds	r3, #4

08000d30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d34:	d3f9      	bcc.n	8000d2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d36:	4a0a      	ldr	r2, [pc, #40]	; (8000d60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d38:	4c0a      	ldr	r4, [pc, #40]	; (8000d64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d3c:	e001      	b.n	8000d42 <LoopFillZerobss>

08000d3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d40:	3204      	adds	r2, #4

08000d42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d44:	d3fb      	bcc.n	8000d3e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000d46:	f006 fd11 	bl	800776c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d4a:	f7ff fd89 	bl	8000860 <main>
  bx  lr    
 8000d4e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d58:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000d5c:	080082d4 	.word	0x080082d4
  ldr r2, =_sbss
 8000d60:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000d64:	20014650 	.word	0x20014650

08000d68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d68:	e7fe      	b.n	8000d68 <ADC_IRQHandler>
	...

08000d6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d70:	4b0e      	ldr	r3, [pc, #56]	; (8000dac <HAL_Init+0x40>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a0d      	ldr	r2, [pc, #52]	; (8000dac <HAL_Init+0x40>)
 8000d76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d7c:	4b0b      	ldr	r3, [pc, #44]	; (8000dac <HAL_Init+0x40>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a0a      	ldr	r2, [pc, #40]	; (8000dac <HAL_Init+0x40>)
 8000d82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d88:	4b08      	ldr	r3, [pc, #32]	; (8000dac <HAL_Init+0x40>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a07      	ldr	r2, [pc, #28]	; (8000dac <HAL_Init+0x40>)
 8000d8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d94:	2003      	movs	r0, #3
 8000d96:	f000 f8d8 	bl	8000f4a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	f7ff ff0e 	bl	8000bbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000da0:	f7ff fee4 	bl	8000b6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000da4:	2300      	movs	r3, #0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40023c00 	.word	0x40023c00

08000db0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000db4:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <HAL_IncTick+0x20>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	461a      	mov	r2, r3
 8000dba:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <HAL_IncTick+0x24>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	4a04      	ldr	r2, [pc, #16]	; (8000dd4 <HAL_IncTick+0x24>)
 8000dc2:	6013      	str	r3, [r2, #0]
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	20000008 	.word	0x20000008
 8000dd4:	200000dc 	.word	0x200000dc

08000dd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  return uwTick;
 8000ddc:	4b03      	ldr	r3, [pc, #12]	; (8000dec <HAL_GetTick+0x14>)
 8000dde:	681b      	ldr	r3, [r3, #0]
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	200000dc 	.word	0x200000dc

08000df0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	f003 0307 	and.w	r3, r3, #7
 8000dfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e00:	4b0c      	ldr	r3, [pc, #48]	; (8000e34 <__NVIC_SetPriorityGrouping+0x44>)
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e06:	68ba      	ldr	r2, [r7, #8]
 8000e08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e22:	4a04      	ldr	r2, [pc, #16]	; (8000e34 <__NVIC_SetPriorityGrouping+0x44>)
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	60d3      	str	r3, [r2, #12]
}
 8000e28:	bf00      	nop
 8000e2a:	3714      	adds	r7, #20
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e3c:	4b04      	ldr	r3, [pc, #16]	; (8000e50 <__NVIC_GetPriorityGrouping+0x18>)
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	0a1b      	lsrs	r3, r3, #8
 8000e42:	f003 0307 	and.w	r3, r3, #7
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	db0b      	blt.n	8000e7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e66:	79fb      	ldrb	r3, [r7, #7]
 8000e68:	f003 021f 	and.w	r2, r3, #31
 8000e6c:	4907      	ldr	r1, [pc, #28]	; (8000e8c <__NVIC_EnableIRQ+0x38>)
 8000e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e72:	095b      	lsrs	r3, r3, #5
 8000e74:	2001      	movs	r0, #1
 8000e76:	fa00 f202 	lsl.w	r2, r0, r2
 8000e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e7e:	bf00      	nop
 8000e80:	370c      	adds	r7, #12
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	e000e100 	.word	0xe000e100

08000e90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	6039      	str	r1, [r7, #0]
 8000e9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	db0a      	blt.n	8000eba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	b2da      	uxtb	r2, r3
 8000ea8:	490c      	ldr	r1, [pc, #48]	; (8000edc <__NVIC_SetPriority+0x4c>)
 8000eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eae:	0112      	lsls	r2, r2, #4
 8000eb0:	b2d2      	uxtb	r2, r2
 8000eb2:	440b      	add	r3, r1
 8000eb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eb8:	e00a      	b.n	8000ed0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	b2da      	uxtb	r2, r3
 8000ebe:	4908      	ldr	r1, [pc, #32]	; (8000ee0 <__NVIC_SetPriority+0x50>)
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	f003 030f 	and.w	r3, r3, #15
 8000ec6:	3b04      	subs	r3, #4
 8000ec8:	0112      	lsls	r2, r2, #4
 8000eca:	b2d2      	uxtb	r2, r2
 8000ecc:	440b      	add	r3, r1
 8000ece:	761a      	strb	r2, [r3, #24]
}
 8000ed0:	bf00      	nop
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	e000e100 	.word	0xe000e100
 8000ee0:	e000ed00 	.word	0xe000ed00

08000ee4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b089      	sub	sp, #36	; 0x24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	f003 0307 	and.w	r3, r3, #7
 8000ef6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	f1c3 0307 	rsb	r3, r3, #7
 8000efe:	2b04      	cmp	r3, #4
 8000f00:	bf28      	it	cs
 8000f02:	2304      	movcs	r3, #4
 8000f04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	3304      	adds	r3, #4
 8000f0a:	2b06      	cmp	r3, #6
 8000f0c:	d902      	bls.n	8000f14 <NVIC_EncodePriority+0x30>
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	3b03      	subs	r3, #3
 8000f12:	e000      	b.n	8000f16 <NVIC_EncodePriority+0x32>
 8000f14:	2300      	movs	r3, #0
 8000f16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f18:	f04f 32ff 	mov.w	r2, #4294967295
 8000f1c:	69bb      	ldr	r3, [r7, #24]
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	43da      	mvns	r2, r3
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	401a      	ands	r2, r3
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	fa01 f303 	lsl.w	r3, r1, r3
 8000f36:	43d9      	mvns	r1, r3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f3c:	4313      	orrs	r3, r2
         );
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3724      	adds	r7, #36	; 0x24
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr

08000f4a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b082      	sub	sp, #8
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f7ff ff4c 	bl	8000df0 <__NVIC_SetPriorityGrouping>
}
 8000f58:	bf00      	nop
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	607a      	str	r2, [r7, #4]
 8000f6c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f72:	f7ff ff61 	bl	8000e38 <__NVIC_GetPriorityGrouping>
 8000f76:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f78:	687a      	ldr	r2, [r7, #4]
 8000f7a:	68b9      	ldr	r1, [r7, #8]
 8000f7c:	6978      	ldr	r0, [r7, #20]
 8000f7e:	f7ff ffb1 	bl	8000ee4 <NVIC_EncodePriority>
 8000f82:	4602      	mov	r2, r0
 8000f84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f88:	4611      	mov	r1, r2
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff ff80 	bl	8000e90 <__NVIC_SetPriority>
}
 8000f90:	bf00      	nop
 8000f92:	3718      	adds	r7, #24
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff ff54 	bl	8000e54 <__NVIC_EnableIRQ>
}
 8000fac:	bf00      	nop
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b089      	sub	sp, #36	; 0x24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fca:	2300      	movs	r3, #0
 8000fcc:	61fb      	str	r3, [r7, #28]
 8000fce:	e165      	b.n	800129c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	697a      	ldr	r2, [r7, #20]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	f040 8154 	bne.w	8001296 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f003 0303 	and.w	r3, r3, #3
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d005      	beq.n	8001006 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001002:	2b02      	cmp	r3, #2
 8001004:	d130      	bne.n	8001068 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	2203      	movs	r2, #3
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	43db      	mvns	r3, r3
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	4013      	ands	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	68da      	ldr	r2, [r3, #12]
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	4313      	orrs	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800103c:	2201      	movs	r2, #1
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	43db      	mvns	r3, r3
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	4013      	ands	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	091b      	lsrs	r3, r3, #4
 8001052:	f003 0201 	and.w	r2, r3, #1
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	4313      	orrs	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f003 0303 	and.w	r3, r3, #3
 8001070:	2b03      	cmp	r3, #3
 8001072:	d017      	beq.n	80010a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	2203      	movs	r2, #3
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	43db      	mvns	r3, r3
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	4013      	ands	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	689a      	ldr	r2, [r3, #8]
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	4313      	orrs	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f003 0303 	and.w	r3, r3, #3
 80010ac:	2b02      	cmp	r3, #2
 80010ae:	d123      	bne.n	80010f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	08da      	lsrs	r2, r3, #3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	3208      	adds	r2, #8
 80010b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	f003 0307 	and.w	r3, r3, #7
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	220f      	movs	r2, #15
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	43db      	mvns	r3, r3
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	4013      	ands	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	691a      	ldr	r2, [r3, #16]
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	f003 0307 	and.w	r3, r3, #7
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	08da      	lsrs	r2, r3, #3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	3208      	adds	r2, #8
 80010f2:	69b9      	ldr	r1, [r7, #24]
 80010f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	2203      	movs	r2, #3
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	43db      	mvns	r3, r3
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	4013      	ands	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f003 0203 	and.w	r2, r3, #3
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4313      	orrs	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001134:	2b00      	cmp	r3, #0
 8001136:	f000 80ae 	beq.w	8001296 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	60fb      	str	r3, [r7, #12]
 800113e:	4b5d      	ldr	r3, [pc, #372]	; (80012b4 <HAL_GPIO_Init+0x300>)
 8001140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001142:	4a5c      	ldr	r2, [pc, #368]	; (80012b4 <HAL_GPIO_Init+0x300>)
 8001144:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001148:	6453      	str	r3, [r2, #68]	; 0x44
 800114a:	4b5a      	ldr	r3, [pc, #360]	; (80012b4 <HAL_GPIO_Init+0x300>)
 800114c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001156:	4a58      	ldr	r2, [pc, #352]	; (80012b8 <HAL_GPIO_Init+0x304>)
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	089b      	lsrs	r3, r3, #2
 800115c:	3302      	adds	r3, #2
 800115e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001162:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	f003 0303 	and.w	r3, r3, #3
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	220f      	movs	r2, #15
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	43db      	mvns	r3, r3
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	4013      	ands	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a4f      	ldr	r2, [pc, #316]	; (80012bc <HAL_GPIO_Init+0x308>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d025      	beq.n	80011ce <HAL_GPIO_Init+0x21a>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a4e      	ldr	r2, [pc, #312]	; (80012c0 <HAL_GPIO_Init+0x30c>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d01f      	beq.n	80011ca <HAL_GPIO_Init+0x216>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a4d      	ldr	r2, [pc, #308]	; (80012c4 <HAL_GPIO_Init+0x310>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d019      	beq.n	80011c6 <HAL_GPIO_Init+0x212>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a4c      	ldr	r2, [pc, #304]	; (80012c8 <HAL_GPIO_Init+0x314>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d013      	beq.n	80011c2 <HAL_GPIO_Init+0x20e>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a4b      	ldr	r2, [pc, #300]	; (80012cc <HAL_GPIO_Init+0x318>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d00d      	beq.n	80011be <HAL_GPIO_Init+0x20a>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a4a      	ldr	r2, [pc, #296]	; (80012d0 <HAL_GPIO_Init+0x31c>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d007      	beq.n	80011ba <HAL_GPIO_Init+0x206>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a49      	ldr	r2, [pc, #292]	; (80012d4 <HAL_GPIO_Init+0x320>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d101      	bne.n	80011b6 <HAL_GPIO_Init+0x202>
 80011b2:	2306      	movs	r3, #6
 80011b4:	e00c      	b.n	80011d0 <HAL_GPIO_Init+0x21c>
 80011b6:	2307      	movs	r3, #7
 80011b8:	e00a      	b.n	80011d0 <HAL_GPIO_Init+0x21c>
 80011ba:	2305      	movs	r3, #5
 80011bc:	e008      	b.n	80011d0 <HAL_GPIO_Init+0x21c>
 80011be:	2304      	movs	r3, #4
 80011c0:	e006      	b.n	80011d0 <HAL_GPIO_Init+0x21c>
 80011c2:	2303      	movs	r3, #3
 80011c4:	e004      	b.n	80011d0 <HAL_GPIO_Init+0x21c>
 80011c6:	2302      	movs	r3, #2
 80011c8:	e002      	b.n	80011d0 <HAL_GPIO_Init+0x21c>
 80011ca:	2301      	movs	r3, #1
 80011cc:	e000      	b.n	80011d0 <HAL_GPIO_Init+0x21c>
 80011ce:	2300      	movs	r3, #0
 80011d0:	69fa      	ldr	r2, [r7, #28]
 80011d2:	f002 0203 	and.w	r2, r2, #3
 80011d6:	0092      	lsls	r2, r2, #2
 80011d8:	4093      	lsls	r3, r2
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	4313      	orrs	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011e0:	4935      	ldr	r1, [pc, #212]	; (80012b8 <HAL_GPIO_Init+0x304>)
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	089b      	lsrs	r3, r3, #2
 80011e6:	3302      	adds	r3, #2
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011ee:	4b3a      	ldr	r3, [pc, #232]	; (80012d8 <HAL_GPIO_Init+0x324>)
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	43db      	mvns	r3, r3
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	4013      	ands	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d003      	beq.n	8001212 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	4313      	orrs	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001212:	4a31      	ldr	r2, [pc, #196]	; (80012d8 <HAL_GPIO_Init+0x324>)
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001218:	4b2f      	ldr	r3, [pc, #188]	; (80012d8 <HAL_GPIO_Init+0x324>)
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	43db      	mvns	r3, r3
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	4013      	ands	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001230:	2b00      	cmp	r3, #0
 8001232:	d003      	beq.n	800123c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	4313      	orrs	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800123c:	4a26      	ldr	r2, [pc, #152]	; (80012d8 <HAL_GPIO_Init+0x324>)
 800123e:	69bb      	ldr	r3, [r7, #24]
 8001240:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001242:	4b25      	ldr	r3, [pc, #148]	; (80012d8 <HAL_GPIO_Init+0x324>)
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	43db      	mvns	r3, r3
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	4013      	ands	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d003      	beq.n	8001266 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	4313      	orrs	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001266:	4a1c      	ldr	r2, [pc, #112]	; (80012d8 <HAL_GPIO_Init+0x324>)
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800126c:	4b1a      	ldr	r3, [pc, #104]	; (80012d8 <HAL_GPIO_Init+0x324>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	43db      	mvns	r3, r3
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	4013      	ands	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d003      	beq.n	8001290 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	4313      	orrs	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001290:	4a11      	ldr	r2, [pc, #68]	; (80012d8 <HAL_GPIO_Init+0x324>)
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	3301      	adds	r3, #1
 800129a:	61fb      	str	r3, [r7, #28]
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	2b0f      	cmp	r3, #15
 80012a0:	f67f ae96 	bls.w	8000fd0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012a4:	bf00      	nop
 80012a6:	bf00      	nop
 80012a8:	3724      	adds	r7, #36	; 0x24
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	40023800 	.word	0x40023800
 80012b8:	40013800 	.word	0x40013800
 80012bc:	40020000 	.word	0x40020000
 80012c0:	40020400 	.word	0x40020400
 80012c4:	40020800 	.word	0x40020800
 80012c8:	40020c00 	.word	0x40020c00
 80012cc:	40021000 	.word	0x40021000
 80012d0:	40021400 	.word	0x40021400
 80012d4:	40021800 	.word	0x40021800
 80012d8:	40013c00 	.word	0x40013c00

080012dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	460b      	mov	r3, r1
 80012e6:	807b      	strh	r3, [r7, #2]
 80012e8:	4613      	mov	r3, r2
 80012ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012ec:	787b      	ldrb	r3, [r7, #1]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d003      	beq.n	80012fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012f2:	887a      	ldrh	r2, [r7, #2]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012f8:	e003      	b.n	8001302 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012fa:	887b      	ldrh	r3, [r7, #2]
 80012fc:	041a      	lsls	r2, r3, #16
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	619a      	str	r2, [r3, #24]
}
 8001302:	bf00      	nop
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr

0800130e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800130e:	b480      	push	{r7}
 8001310:	b085      	sub	sp, #20
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
 8001316:	460b      	mov	r3, r1
 8001318:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	695b      	ldr	r3, [r3, #20]
 800131e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001320:	887a      	ldrh	r2, [r7, #2]
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	4013      	ands	r3, r2
 8001326:	041a      	lsls	r2, r3, #16
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	43d9      	mvns	r1, r3
 800132c:	887b      	ldrh	r3, [r7, #2]
 800132e:	400b      	ands	r3, r1
 8001330:	431a      	orrs	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	619a      	str	r2, [r3, #24]
}
 8001336:	bf00      	nop
 8001338:	3714      	adds	r7, #20
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
	...

08001344 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800134a:	2300      	movs	r3, #0
 800134c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	603b      	str	r3, [r7, #0]
 8001352:	4b20      	ldr	r3, [pc, #128]	; (80013d4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001356:	4a1f      	ldr	r2, [pc, #124]	; (80013d4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001358:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800135c:	6413      	str	r3, [r2, #64]	; 0x40
 800135e:	4b1d      	ldr	r3, [pc, #116]	; (80013d4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001366:	603b      	str	r3, [r7, #0]
 8001368:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800136a:	4b1b      	ldr	r3, [pc, #108]	; (80013d8 <HAL_PWREx_EnableOverDrive+0x94>)
 800136c:	2201      	movs	r2, #1
 800136e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001370:	f7ff fd32 	bl	8000dd8 <HAL_GetTick>
 8001374:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001376:	e009      	b.n	800138c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001378:	f7ff fd2e 	bl	8000dd8 <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001386:	d901      	bls.n	800138c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001388:	2303      	movs	r3, #3
 800138a:	e01f      	b.n	80013cc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800138c:	4b13      	ldr	r3, [pc, #76]	; (80013dc <HAL_PWREx_EnableOverDrive+0x98>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001398:	d1ee      	bne.n	8001378 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800139a:	4b11      	ldr	r3, [pc, #68]	; (80013e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800139c:	2201      	movs	r2, #1
 800139e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013a0:	f7ff fd1a 	bl	8000dd8 <HAL_GetTick>
 80013a4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80013a6:	e009      	b.n	80013bc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80013a8:	f7ff fd16 	bl	8000dd8 <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013b6:	d901      	bls.n	80013bc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80013b8:	2303      	movs	r3, #3
 80013ba:	e007      	b.n	80013cc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80013bc:	4b07      	ldr	r3, [pc, #28]	; (80013dc <HAL_PWREx_EnableOverDrive+0x98>)
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80013c8:	d1ee      	bne.n	80013a8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80013ca:	2300      	movs	r3, #0
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40023800 	.word	0x40023800
 80013d8:	420e0040 	.word	0x420e0040
 80013dc:	40007000 	.word	0x40007000
 80013e0:	420e0044 	.word	0x420e0044

080013e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d101      	bne.n	80013f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	e0cc      	b.n	8001592 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013f8:	4b68      	ldr	r3, [pc, #416]	; (800159c <HAL_RCC_ClockConfig+0x1b8>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 030f 	and.w	r3, r3, #15
 8001400:	683a      	ldr	r2, [r7, #0]
 8001402:	429a      	cmp	r2, r3
 8001404:	d90c      	bls.n	8001420 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001406:	4b65      	ldr	r3, [pc, #404]	; (800159c <HAL_RCC_ClockConfig+0x1b8>)
 8001408:	683a      	ldr	r2, [r7, #0]
 800140a:	b2d2      	uxtb	r2, r2
 800140c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800140e:	4b63      	ldr	r3, [pc, #396]	; (800159c <HAL_RCC_ClockConfig+0x1b8>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 030f 	and.w	r3, r3, #15
 8001416:	683a      	ldr	r2, [r7, #0]
 8001418:	429a      	cmp	r2, r3
 800141a:	d001      	beq.n	8001420 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	e0b8      	b.n	8001592 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 0302 	and.w	r3, r3, #2
 8001428:	2b00      	cmp	r3, #0
 800142a:	d020      	beq.n	800146e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 0304 	and.w	r3, r3, #4
 8001434:	2b00      	cmp	r3, #0
 8001436:	d005      	beq.n	8001444 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001438:	4b59      	ldr	r3, [pc, #356]	; (80015a0 <HAL_RCC_ClockConfig+0x1bc>)
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	4a58      	ldr	r2, [pc, #352]	; (80015a0 <HAL_RCC_ClockConfig+0x1bc>)
 800143e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001442:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0308 	and.w	r3, r3, #8
 800144c:	2b00      	cmp	r3, #0
 800144e:	d005      	beq.n	800145c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001450:	4b53      	ldr	r3, [pc, #332]	; (80015a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	4a52      	ldr	r2, [pc, #328]	; (80015a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001456:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800145a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800145c:	4b50      	ldr	r3, [pc, #320]	; (80015a0 <HAL_RCC_ClockConfig+0x1bc>)
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	494d      	ldr	r1, [pc, #308]	; (80015a0 <HAL_RCC_ClockConfig+0x1bc>)
 800146a:	4313      	orrs	r3, r2
 800146c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	2b00      	cmp	r3, #0
 8001478:	d044      	beq.n	8001504 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d107      	bne.n	8001492 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001482:	4b47      	ldr	r3, [pc, #284]	; (80015a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d119      	bne.n	80014c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e07f      	b.n	8001592 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	2b02      	cmp	r3, #2
 8001498:	d003      	beq.n	80014a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800149e:	2b03      	cmp	r3, #3
 80014a0:	d107      	bne.n	80014b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014a2:	4b3f      	ldr	r3, [pc, #252]	; (80015a0 <HAL_RCC_ClockConfig+0x1bc>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d109      	bne.n	80014c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e06f      	b.n	8001592 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014b2:	4b3b      	ldr	r3, [pc, #236]	; (80015a0 <HAL_RCC_ClockConfig+0x1bc>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d101      	bne.n	80014c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e067      	b.n	8001592 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014c2:	4b37      	ldr	r3, [pc, #220]	; (80015a0 <HAL_RCC_ClockConfig+0x1bc>)
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	f023 0203 	bic.w	r2, r3, #3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	4934      	ldr	r1, [pc, #208]	; (80015a0 <HAL_RCC_ClockConfig+0x1bc>)
 80014d0:	4313      	orrs	r3, r2
 80014d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014d4:	f7ff fc80 	bl	8000dd8 <HAL_GetTick>
 80014d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014da:	e00a      	b.n	80014f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014dc:	f7ff fc7c 	bl	8000dd8 <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e04f      	b.n	8001592 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014f2:	4b2b      	ldr	r3, [pc, #172]	; (80015a0 <HAL_RCC_ClockConfig+0x1bc>)
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	f003 020c 	and.w	r2, r3, #12
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	429a      	cmp	r2, r3
 8001502:	d1eb      	bne.n	80014dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001504:	4b25      	ldr	r3, [pc, #148]	; (800159c <HAL_RCC_ClockConfig+0x1b8>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 030f 	and.w	r3, r3, #15
 800150c:	683a      	ldr	r2, [r7, #0]
 800150e:	429a      	cmp	r2, r3
 8001510:	d20c      	bcs.n	800152c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001512:	4b22      	ldr	r3, [pc, #136]	; (800159c <HAL_RCC_ClockConfig+0x1b8>)
 8001514:	683a      	ldr	r2, [r7, #0]
 8001516:	b2d2      	uxtb	r2, r2
 8001518:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800151a:	4b20      	ldr	r3, [pc, #128]	; (800159c <HAL_RCC_ClockConfig+0x1b8>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 030f 	and.w	r3, r3, #15
 8001522:	683a      	ldr	r2, [r7, #0]
 8001524:	429a      	cmp	r2, r3
 8001526:	d001      	beq.n	800152c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e032      	b.n	8001592 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0304 	and.w	r3, r3, #4
 8001534:	2b00      	cmp	r3, #0
 8001536:	d008      	beq.n	800154a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001538:	4b19      	ldr	r3, [pc, #100]	; (80015a0 <HAL_RCC_ClockConfig+0x1bc>)
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	4916      	ldr	r1, [pc, #88]	; (80015a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001546:	4313      	orrs	r3, r2
 8001548:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0308 	and.w	r3, r3, #8
 8001552:	2b00      	cmp	r3, #0
 8001554:	d009      	beq.n	800156a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001556:	4b12      	ldr	r3, [pc, #72]	; (80015a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	691b      	ldr	r3, [r3, #16]
 8001562:	00db      	lsls	r3, r3, #3
 8001564:	490e      	ldr	r1, [pc, #56]	; (80015a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001566:	4313      	orrs	r3, r2
 8001568:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800156a:	f000 f873 	bl	8001654 <HAL_RCC_GetSysClockFreq>
 800156e:	4602      	mov	r2, r0
 8001570:	4b0b      	ldr	r3, [pc, #44]	; (80015a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	091b      	lsrs	r3, r3, #4
 8001576:	f003 030f 	and.w	r3, r3, #15
 800157a:	490a      	ldr	r1, [pc, #40]	; (80015a4 <HAL_RCC_ClockConfig+0x1c0>)
 800157c:	5ccb      	ldrb	r3, [r1, r3]
 800157e:	fa22 f303 	lsr.w	r3, r2, r3
 8001582:	4a09      	ldr	r2, [pc, #36]	; (80015a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001584:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001586:	4b09      	ldr	r3, [pc, #36]	; (80015ac <HAL_RCC_ClockConfig+0x1c8>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff fb16 	bl	8000bbc <HAL_InitTick>

  return HAL_OK;
 8001590:	2300      	movs	r3, #0
}
 8001592:	4618      	mov	r0, r3
 8001594:	3710      	adds	r7, #16
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40023c00 	.word	0x40023c00
 80015a0:	40023800 	.word	0x40023800
 80015a4:	08008250 	.word	0x08008250
 80015a8:	20000000 	.word	0x20000000
 80015ac:	20000004 	.word	0x20000004

080015b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015b4:	4b03      	ldr	r3, [pc, #12]	; (80015c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80015b6:	681b      	ldr	r3, [r3, #0]
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	20000000 	.word	0x20000000

080015c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80015cc:	f7ff fff0 	bl	80015b0 <HAL_RCC_GetHCLKFreq>
 80015d0:	4602      	mov	r2, r0
 80015d2:	4b05      	ldr	r3, [pc, #20]	; (80015e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	0a9b      	lsrs	r3, r3, #10
 80015d8:	f003 0307 	and.w	r3, r3, #7
 80015dc:	4903      	ldr	r1, [pc, #12]	; (80015ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80015de:	5ccb      	ldrb	r3, [r1, r3]
 80015e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	40023800 	.word	0x40023800
 80015ec:	08008260 	.word	0x08008260

080015f0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	220f      	movs	r2, #15
 80015fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001600:	4b12      	ldr	r3, [pc, #72]	; (800164c <HAL_RCC_GetClockConfig+0x5c>)
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	f003 0203 	and.w	r2, r3, #3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800160c:	4b0f      	ldr	r3, [pc, #60]	; (800164c <HAL_RCC_GetClockConfig+0x5c>)
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001618:	4b0c      	ldr	r3, [pc, #48]	; (800164c <HAL_RCC_GetClockConfig+0x5c>)
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001624:	4b09      	ldr	r3, [pc, #36]	; (800164c <HAL_RCC_GetClockConfig+0x5c>)
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	08db      	lsrs	r3, r3, #3
 800162a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001632:	4b07      	ldr	r3, [pc, #28]	; (8001650 <HAL_RCC_GetClockConfig+0x60>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 020f 	and.w	r2, r3, #15
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	601a      	str	r2, [r3, #0]
}
 800163e:	bf00      	nop
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	40023800 	.word	0x40023800
 8001650:	40023c00 	.word	0x40023c00

08001654 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001654:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001658:	b0ae      	sub	sp, #184	; 0xb8
 800165a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800165c:	2300      	movs	r3, #0
 800165e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001662:	2300      	movs	r3, #0
 8001664:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001668:	2300      	movs	r3, #0
 800166a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800166e:	2300      	movs	r3, #0
 8001670:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001674:	2300      	movs	r3, #0
 8001676:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800167a:	4bcb      	ldr	r3, [pc, #812]	; (80019a8 <HAL_RCC_GetSysClockFreq+0x354>)
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	f003 030c 	and.w	r3, r3, #12
 8001682:	2b0c      	cmp	r3, #12
 8001684:	f200 8206 	bhi.w	8001a94 <HAL_RCC_GetSysClockFreq+0x440>
 8001688:	a201      	add	r2, pc, #4	; (adr r2, 8001690 <HAL_RCC_GetSysClockFreq+0x3c>)
 800168a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800168e:	bf00      	nop
 8001690:	080016c5 	.word	0x080016c5
 8001694:	08001a95 	.word	0x08001a95
 8001698:	08001a95 	.word	0x08001a95
 800169c:	08001a95 	.word	0x08001a95
 80016a0:	080016cd 	.word	0x080016cd
 80016a4:	08001a95 	.word	0x08001a95
 80016a8:	08001a95 	.word	0x08001a95
 80016ac:	08001a95 	.word	0x08001a95
 80016b0:	080016d5 	.word	0x080016d5
 80016b4:	08001a95 	.word	0x08001a95
 80016b8:	08001a95 	.word	0x08001a95
 80016bc:	08001a95 	.word	0x08001a95
 80016c0:	080018c5 	.word	0x080018c5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80016c4:	4bb9      	ldr	r3, [pc, #740]	; (80019ac <HAL_RCC_GetSysClockFreq+0x358>)
 80016c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80016ca:	e1e7      	b.n	8001a9c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80016cc:	4bb8      	ldr	r3, [pc, #736]	; (80019b0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80016ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80016d2:	e1e3      	b.n	8001a9c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016d4:	4bb4      	ldr	r3, [pc, #720]	; (80019a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016e0:	4bb1      	ldr	r3, [pc, #708]	; (80019a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d071      	beq.n	80017d0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016ec:	4bae      	ldr	r3, [pc, #696]	; (80019a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	099b      	lsrs	r3, r3, #6
 80016f2:	2200      	movs	r2, #0
 80016f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80016f8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80016fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001700:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001704:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001708:	2300      	movs	r3, #0
 800170a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800170e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001712:	4622      	mov	r2, r4
 8001714:	462b      	mov	r3, r5
 8001716:	f04f 0000 	mov.w	r0, #0
 800171a:	f04f 0100 	mov.w	r1, #0
 800171e:	0159      	lsls	r1, r3, #5
 8001720:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001724:	0150      	lsls	r0, r2, #5
 8001726:	4602      	mov	r2, r0
 8001728:	460b      	mov	r3, r1
 800172a:	4621      	mov	r1, r4
 800172c:	1a51      	subs	r1, r2, r1
 800172e:	6439      	str	r1, [r7, #64]	; 0x40
 8001730:	4629      	mov	r1, r5
 8001732:	eb63 0301 	sbc.w	r3, r3, r1
 8001736:	647b      	str	r3, [r7, #68]	; 0x44
 8001738:	f04f 0200 	mov.w	r2, #0
 800173c:	f04f 0300 	mov.w	r3, #0
 8001740:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001744:	4649      	mov	r1, r9
 8001746:	018b      	lsls	r3, r1, #6
 8001748:	4641      	mov	r1, r8
 800174a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800174e:	4641      	mov	r1, r8
 8001750:	018a      	lsls	r2, r1, #6
 8001752:	4641      	mov	r1, r8
 8001754:	1a51      	subs	r1, r2, r1
 8001756:	63b9      	str	r1, [r7, #56]	; 0x38
 8001758:	4649      	mov	r1, r9
 800175a:	eb63 0301 	sbc.w	r3, r3, r1
 800175e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001760:	f04f 0200 	mov.w	r2, #0
 8001764:	f04f 0300 	mov.w	r3, #0
 8001768:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800176c:	4649      	mov	r1, r9
 800176e:	00cb      	lsls	r3, r1, #3
 8001770:	4641      	mov	r1, r8
 8001772:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001776:	4641      	mov	r1, r8
 8001778:	00ca      	lsls	r2, r1, #3
 800177a:	4610      	mov	r0, r2
 800177c:	4619      	mov	r1, r3
 800177e:	4603      	mov	r3, r0
 8001780:	4622      	mov	r2, r4
 8001782:	189b      	adds	r3, r3, r2
 8001784:	633b      	str	r3, [r7, #48]	; 0x30
 8001786:	462b      	mov	r3, r5
 8001788:	460a      	mov	r2, r1
 800178a:	eb42 0303 	adc.w	r3, r2, r3
 800178e:	637b      	str	r3, [r7, #52]	; 0x34
 8001790:	f04f 0200 	mov.w	r2, #0
 8001794:	f04f 0300 	mov.w	r3, #0
 8001798:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800179c:	4629      	mov	r1, r5
 800179e:	024b      	lsls	r3, r1, #9
 80017a0:	4621      	mov	r1, r4
 80017a2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80017a6:	4621      	mov	r1, r4
 80017a8:	024a      	lsls	r2, r1, #9
 80017aa:	4610      	mov	r0, r2
 80017ac:	4619      	mov	r1, r3
 80017ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80017b2:	2200      	movs	r2, #0
 80017b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80017b8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80017bc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80017c0:	f7fe fdc6 	bl	8000350 <__aeabi_uldivmod>
 80017c4:	4602      	mov	r2, r0
 80017c6:	460b      	mov	r3, r1
 80017c8:	4613      	mov	r3, r2
 80017ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80017ce:	e067      	b.n	80018a0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017d0:	4b75      	ldr	r3, [pc, #468]	; (80019a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	099b      	lsrs	r3, r3, #6
 80017d6:	2200      	movs	r2, #0
 80017d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80017dc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80017e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80017e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80017ea:	2300      	movs	r3, #0
 80017ec:	67fb      	str	r3, [r7, #124]	; 0x7c
 80017ee:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80017f2:	4622      	mov	r2, r4
 80017f4:	462b      	mov	r3, r5
 80017f6:	f04f 0000 	mov.w	r0, #0
 80017fa:	f04f 0100 	mov.w	r1, #0
 80017fe:	0159      	lsls	r1, r3, #5
 8001800:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001804:	0150      	lsls	r0, r2, #5
 8001806:	4602      	mov	r2, r0
 8001808:	460b      	mov	r3, r1
 800180a:	4621      	mov	r1, r4
 800180c:	1a51      	subs	r1, r2, r1
 800180e:	62b9      	str	r1, [r7, #40]	; 0x28
 8001810:	4629      	mov	r1, r5
 8001812:	eb63 0301 	sbc.w	r3, r3, r1
 8001816:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001818:	f04f 0200 	mov.w	r2, #0
 800181c:	f04f 0300 	mov.w	r3, #0
 8001820:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001824:	4649      	mov	r1, r9
 8001826:	018b      	lsls	r3, r1, #6
 8001828:	4641      	mov	r1, r8
 800182a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800182e:	4641      	mov	r1, r8
 8001830:	018a      	lsls	r2, r1, #6
 8001832:	4641      	mov	r1, r8
 8001834:	ebb2 0a01 	subs.w	sl, r2, r1
 8001838:	4649      	mov	r1, r9
 800183a:	eb63 0b01 	sbc.w	fp, r3, r1
 800183e:	f04f 0200 	mov.w	r2, #0
 8001842:	f04f 0300 	mov.w	r3, #0
 8001846:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800184a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800184e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001852:	4692      	mov	sl, r2
 8001854:	469b      	mov	fp, r3
 8001856:	4623      	mov	r3, r4
 8001858:	eb1a 0303 	adds.w	r3, sl, r3
 800185c:	623b      	str	r3, [r7, #32]
 800185e:	462b      	mov	r3, r5
 8001860:	eb4b 0303 	adc.w	r3, fp, r3
 8001864:	627b      	str	r3, [r7, #36]	; 0x24
 8001866:	f04f 0200 	mov.w	r2, #0
 800186a:	f04f 0300 	mov.w	r3, #0
 800186e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001872:	4629      	mov	r1, r5
 8001874:	028b      	lsls	r3, r1, #10
 8001876:	4621      	mov	r1, r4
 8001878:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800187c:	4621      	mov	r1, r4
 800187e:	028a      	lsls	r2, r1, #10
 8001880:	4610      	mov	r0, r2
 8001882:	4619      	mov	r1, r3
 8001884:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001888:	2200      	movs	r2, #0
 800188a:	673b      	str	r3, [r7, #112]	; 0x70
 800188c:	677a      	str	r2, [r7, #116]	; 0x74
 800188e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001892:	f7fe fd5d 	bl	8000350 <__aeabi_uldivmod>
 8001896:	4602      	mov	r2, r0
 8001898:	460b      	mov	r3, r1
 800189a:	4613      	mov	r3, r2
 800189c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80018a0:	4b41      	ldr	r3, [pc, #260]	; (80019a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	0c1b      	lsrs	r3, r3, #16
 80018a6:	f003 0303 	and.w	r3, r3, #3
 80018aa:	3301      	adds	r3, #1
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80018b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80018b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80018ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80018be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80018c2:	e0eb      	b.n	8001a9c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018c4:	4b38      	ldr	r3, [pc, #224]	; (80019a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018d0:	4b35      	ldr	r3, [pc, #212]	; (80019a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d06b      	beq.n	80019b4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018dc:	4b32      	ldr	r3, [pc, #200]	; (80019a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	099b      	lsrs	r3, r3, #6
 80018e2:	2200      	movs	r2, #0
 80018e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80018e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80018e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80018ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018ee:	663b      	str	r3, [r7, #96]	; 0x60
 80018f0:	2300      	movs	r3, #0
 80018f2:	667b      	str	r3, [r7, #100]	; 0x64
 80018f4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80018f8:	4622      	mov	r2, r4
 80018fa:	462b      	mov	r3, r5
 80018fc:	f04f 0000 	mov.w	r0, #0
 8001900:	f04f 0100 	mov.w	r1, #0
 8001904:	0159      	lsls	r1, r3, #5
 8001906:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800190a:	0150      	lsls	r0, r2, #5
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	4621      	mov	r1, r4
 8001912:	1a51      	subs	r1, r2, r1
 8001914:	61b9      	str	r1, [r7, #24]
 8001916:	4629      	mov	r1, r5
 8001918:	eb63 0301 	sbc.w	r3, r3, r1
 800191c:	61fb      	str	r3, [r7, #28]
 800191e:	f04f 0200 	mov.w	r2, #0
 8001922:	f04f 0300 	mov.w	r3, #0
 8001926:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800192a:	4659      	mov	r1, fp
 800192c:	018b      	lsls	r3, r1, #6
 800192e:	4651      	mov	r1, sl
 8001930:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001934:	4651      	mov	r1, sl
 8001936:	018a      	lsls	r2, r1, #6
 8001938:	4651      	mov	r1, sl
 800193a:	ebb2 0801 	subs.w	r8, r2, r1
 800193e:	4659      	mov	r1, fp
 8001940:	eb63 0901 	sbc.w	r9, r3, r1
 8001944:	f04f 0200 	mov.w	r2, #0
 8001948:	f04f 0300 	mov.w	r3, #0
 800194c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001950:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001954:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001958:	4690      	mov	r8, r2
 800195a:	4699      	mov	r9, r3
 800195c:	4623      	mov	r3, r4
 800195e:	eb18 0303 	adds.w	r3, r8, r3
 8001962:	613b      	str	r3, [r7, #16]
 8001964:	462b      	mov	r3, r5
 8001966:	eb49 0303 	adc.w	r3, r9, r3
 800196a:	617b      	str	r3, [r7, #20]
 800196c:	f04f 0200 	mov.w	r2, #0
 8001970:	f04f 0300 	mov.w	r3, #0
 8001974:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001978:	4629      	mov	r1, r5
 800197a:	024b      	lsls	r3, r1, #9
 800197c:	4621      	mov	r1, r4
 800197e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001982:	4621      	mov	r1, r4
 8001984:	024a      	lsls	r2, r1, #9
 8001986:	4610      	mov	r0, r2
 8001988:	4619      	mov	r1, r3
 800198a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800198e:	2200      	movs	r2, #0
 8001990:	65bb      	str	r3, [r7, #88]	; 0x58
 8001992:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001994:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001998:	f7fe fcda 	bl	8000350 <__aeabi_uldivmod>
 800199c:	4602      	mov	r2, r0
 800199e:	460b      	mov	r3, r1
 80019a0:	4613      	mov	r3, r2
 80019a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80019a6:	e065      	b.n	8001a74 <HAL_RCC_GetSysClockFreq+0x420>
 80019a8:	40023800 	.word	0x40023800
 80019ac:	00f42400 	.word	0x00f42400
 80019b0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019b4:	4b3d      	ldr	r3, [pc, #244]	; (8001aac <HAL_RCC_GetSysClockFreq+0x458>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	099b      	lsrs	r3, r3, #6
 80019ba:	2200      	movs	r2, #0
 80019bc:	4618      	mov	r0, r3
 80019be:	4611      	mov	r1, r2
 80019c0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80019c4:	653b      	str	r3, [r7, #80]	; 0x50
 80019c6:	2300      	movs	r3, #0
 80019c8:	657b      	str	r3, [r7, #84]	; 0x54
 80019ca:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80019ce:	4642      	mov	r2, r8
 80019d0:	464b      	mov	r3, r9
 80019d2:	f04f 0000 	mov.w	r0, #0
 80019d6:	f04f 0100 	mov.w	r1, #0
 80019da:	0159      	lsls	r1, r3, #5
 80019dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019e0:	0150      	lsls	r0, r2, #5
 80019e2:	4602      	mov	r2, r0
 80019e4:	460b      	mov	r3, r1
 80019e6:	4641      	mov	r1, r8
 80019e8:	1a51      	subs	r1, r2, r1
 80019ea:	60b9      	str	r1, [r7, #8]
 80019ec:	4649      	mov	r1, r9
 80019ee:	eb63 0301 	sbc.w	r3, r3, r1
 80019f2:	60fb      	str	r3, [r7, #12]
 80019f4:	f04f 0200 	mov.w	r2, #0
 80019f8:	f04f 0300 	mov.w	r3, #0
 80019fc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001a00:	4659      	mov	r1, fp
 8001a02:	018b      	lsls	r3, r1, #6
 8001a04:	4651      	mov	r1, sl
 8001a06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a0a:	4651      	mov	r1, sl
 8001a0c:	018a      	lsls	r2, r1, #6
 8001a0e:	4651      	mov	r1, sl
 8001a10:	1a54      	subs	r4, r2, r1
 8001a12:	4659      	mov	r1, fp
 8001a14:	eb63 0501 	sbc.w	r5, r3, r1
 8001a18:	f04f 0200 	mov.w	r2, #0
 8001a1c:	f04f 0300 	mov.w	r3, #0
 8001a20:	00eb      	lsls	r3, r5, #3
 8001a22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a26:	00e2      	lsls	r2, r4, #3
 8001a28:	4614      	mov	r4, r2
 8001a2a:	461d      	mov	r5, r3
 8001a2c:	4643      	mov	r3, r8
 8001a2e:	18e3      	adds	r3, r4, r3
 8001a30:	603b      	str	r3, [r7, #0]
 8001a32:	464b      	mov	r3, r9
 8001a34:	eb45 0303 	adc.w	r3, r5, r3
 8001a38:	607b      	str	r3, [r7, #4]
 8001a3a:	f04f 0200 	mov.w	r2, #0
 8001a3e:	f04f 0300 	mov.w	r3, #0
 8001a42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a46:	4629      	mov	r1, r5
 8001a48:	028b      	lsls	r3, r1, #10
 8001a4a:	4621      	mov	r1, r4
 8001a4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a50:	4621      	mov	r1, r4
 8001a52:	028a      	lsls	r2, r1, #10
 8001a54:	4610      	mov	r0, r2
 8001a56:	4619      	mov	r1, r3
 8001a58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001a60:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001a62:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001a66:	f7fe fc73 	bl	8000350 <__aeabi_uldivmod>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	4613      	mov	r3, r2
 8001a70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001a74:	4b0d      	ldr	r3, [pc, #52]	; (8001aac <HAL_RCC_GetSysClockFreq+0x458>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	0f1b      	lsrs	r3, r3, #28
 8001a7a:	f003 0307 	and.w	r3, r3, #7
 8001a7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001a82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001a86:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001a92:	e003      	b.n	8001a9c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a94:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001a96:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001a9a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a9c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	37b8      	adds	r7, #184	; 0xb8
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001aaa:	bf00      	nop
 8001aac:	40023800 	.word	0x40023800
 8001ab0:	00f42400 	.word	0x00f42400

08001ab4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d101      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e28d      	b.n	8001fe2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	f000 8083 	beq.w	8001bda <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001ad4:	4b94      	ldr	r3, [pc, #592]	; (8001d28 <HAL_RCC_OscConfig+0x274>)
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f003 030c 	and.w	r3, r3, #12
 8001adc:	2b04      	cmp	r3, #4
 8001ade:	d019      	beq.n	8001b14 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001ae0:	4b91      	ldr	r3, [pc, #580]	; (8001d28 <HAL_RCC_OscConfig+0x274>)
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001ae8:	2b08      	cmp	r3, #8
 8001aea:	d106      	bne.n	8001afa <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001aec:	4b8e      	ldr	r3, [pc, #568]	; (8001d28 <HAL_RCC_OscConfig+0x274>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001af4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001af8:	d00c      	beq.n	8001b14 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001afa:	4b8b      	ldr	r3, [pc, #556]	; (8001d28 <HAL_RCC_OscConfig+0x274>)
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b02:	2b0c      	cmp	r3, #12
 8001b04:	d112      	bne.n	8001b2c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b06:	4b88      	ldr	r3, [pc, #544]	; (8001d28 <HAL_RCC_OscConfig+0x274>)
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b12:	d10b      	bne.n	8001b2c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b14:	4b84      	ldr	r3, [pc, #528]	; (8001d28 <HAL_RCC_OscConfig+0x274>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d05b      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x124>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d157      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e25a      	b.n	8001fe2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b34:	d106      	bne.n	8001b44 <HAL_RCC_OscConfig+0x90>
 8001b36:	4b7c      	ldr	r3, [pc, #496]	; (8001d28 <HAL_RCC_OscConfig+0x274>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a7b      	ldr	r2, [pc, #492]	; (8001d28 <HAL_RCC_OscConfig+0x274>)
 8001b3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b40:	6013      	str	r3, [r2, #0]
 8001b42:	e01d      	b.n	8001b80 <HAL_RCC_OscConfig+0xcc>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b4c:	d10c      	bne.n	8001b68 <HAL_RCC_OscConfig+0xb4>
 8001b4e:	4b76      	ldr	r3, [pc, #472]	; (8001d28 <HAL_RCC_OscConfig+0x274>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a75      	ldr	r2, [pc, #468]	; (8001d28 <HAL_RCC_OscConfig+0x274>)
 8001b54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b58:	6013      	str	r3, [r2, #0]
 8001b5a:	4b73      	ldr	r3, [pc, #460]	; (8001d28 <HAL_RCC_OscConfig+0x274>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a72      	ldr	r2, [pc, #456]	; (8001d28 <HAL_RCC_OscConfig+0x274>)
 8001b60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b64:	6013      	str	r3, [r2, #0]
 8001b66:	e00b      	b.n	8001b80 <HAL_RCC_OscConfig+0xcc>
 8001b68:	4b6f      	ldr	r3, [pc, #444]	; (8001d28 <HAL_RCC_OscConfig+0x274>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a6e      	ldr	r2, [pc, #440]	; (8001d28 <HAL_RCC_OscConfig+0x274>)
 8001b6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b72:	6013      	str	r3, [r2, #0]
 8001b74:	4b6c      	ldr	r3, [pc, #432]	; (8001d28 <HAL_RCC_OscConfig+0x274>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a6b      	ldr	r2, [pc, #428]	; (8001d28 <HAL_RCC_OscConfig+0x274>)
 8001b7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d013      	beq.n	8001bb0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b88:	f7ff f926 	bl	8000dd8 <HAL_GetTick>
 8001b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b8e:	e008      	b.n	8001ba2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b90:	f7ff f922 	bl	8000dd8 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b64      	cmp	r3, #100	; 0x64
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e21f      	b.n	8001fe2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ba2:	4b61      	ldr	r3, [pc, #388]	; (8001d28 <HAL_RCC_OscConfig+0x274>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d0f0      	beq.n	8001b90 <HAL_RCC_OscConfig+0xdc>
 8001bae:	e014      	b.n	8001bda <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb0:	f7ff f912 	bl	8000dd8 <HAL_GetTick>
 8001bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bb6:	e008      	b.n	8001bca <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bb8:	f7ff f90e 	bl	8000dd8 <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	2b64      	cmp	r3, #100	; 0x64
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e20b      	b.n	8001fe2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bca:	4b57      	ldr	r3, [pc, #348]	; (8001d28 <HAL_RCC_OscConfig+0x274>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d1f0      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x104>
 8001bd6:	e000      	b.n	8001bda <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d06f      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001be6:	4b50      	ldr	r3, [pc, #320]	; (8001d28 <HAL_RCC_OscConfig+0x274>)
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f003 030c 	and.w	r3, r3, #12
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d017      	beq.n	8001c22 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001bf2:	4b4d      	ldr	r3, [pc, #308]	; (8001d28 <HAL_RCC_OscConfig+0x274>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001bfa:	2b08      	cmp	r3, #8
 8001bfc:	d105      	bne.n	8001c0a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001bfe:	4b4a      	ldr	r3, [pc, #296]	; (8001d28 <HAL_RCC_OscConfig+0x274>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d00b      	beq.n	8001c22 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c0a:	4b47      	ldr	r3, [pc, #284]	; (8001d28 <HAL_RCC_OscConfig+0x274>)
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c12:	2b0c      	cmp	r3, #12
 8001c14:	d11c      	bne.n	8001c50 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c16:	4b44      	ldr	r3, [pc, #272]	; (8001d28 <HAL_RCC_OscConfig+0x274>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d116      	bne.n	8001c50 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c22:	4b41      	ldr	r3, [pc, #260]	; (8001d28 <HAL_RCC_OscConfig+0x274>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d005      	beq.n	8001c3a <HAL_RCC_OscConfig+0x186>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d001      	beq.n	8001c3a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e1d3      	b.n	8001fe2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c3a:	4b3b      	ldr	r3, [pc, #236]	; (8001d28 <HAL_RCC_OscConfig+0x274>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	691b      	ldr	r3, [r3, #16]
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	4937      	ldr	r1, [pc, #220]	; (8001d28 <HAL_RCC_OscConfig+0x274>)
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c4e:	e03a      	b.n	8001cc6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d020      	beq.n	8001c9a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c58:	4b34      	ldr	r3, [pc, #208]	; (8001d2c <HAL_RCC_OscConfig+0x278>)
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c5e:	f7ff f8bb 	bl	8000dd8 <HAL_GetTick>
 8001c62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c64:	e008      	b.n	8001c78 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c66:	f7ff f8b7 	bl	8000dd8 <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d901      	bls.n	8001c78 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e1b4      	b.n	8001fe2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c78:	4b2b      	ldr	r3, [pc, #172]	; (8001d28 <HAL_RCC_OscConfig+0x274>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0302 	and.w	r3, r3, #2
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d0f0      	beq.n	8001c66 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c84:	4b28      	ldr	r3, [pc, #160]	; (8001d28 <HAL_RCC_OscConfig+0x274>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	691b      	ldr	r3, [r3, #16]
 8001c90:	00db      	lsls	r3, r3, #3
 8001c92:	4925      	ldr	r1, [pc, #148]	; (8001d28 <HAL_RCC_OscConfig+0x274>)
 8001c94:	4313      	orrs	r3, r2
 8001c96:	600b      	str	r3, [r1, #0]
 8001c98:	e015      	b.n	8001cc6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c9a:	4b24      	ldr	r3, [pc, #144]	; (8001d2c <HAL_RCC_OscConfig+0x278>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca0:	f7ff f89a 	bl	8000dd8 <HAL_GetTick>
 8001ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ca6:	e008      	b.n	8001cba <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ca8:	f7ff f896 	bl	8000dd8 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e193      	b.n	8001fe2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cba:	4b1b      	ldr	r3, [pc, #108]	; (8001d28 <HAL_RCC_OscConfig+0x274>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d1f0      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0308 	and.w	r3, r3, #8
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d036      	beq.n	8001d40 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	695b      	ldr	r3, [r3, #20]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d016      	beq.n	8001d08 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cda:	4b15      	ldr	r3, [pc, #84]	; (8001d30 <HAL_RCC_OscConfig+0x27c>)
 8001cdc:	2201      	movs	r2, #1
 8001cde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ce0:	f7ff f87a 	bl	8000dd8 <HAL_GetTick>
 8001ce4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ce6:	e008      	b.n	8001cfa <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ce8:	f7ff f876 	bl	8000dd8 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e173      	b.n	8001fe2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cfa:	4b0b      	ldr	r3, [pc, #44]	; (8001d28 <HAL_RCC_OscConfig+0x274>)
 8001cfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d0f0      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x234>
 8001d06:	e01b      	b.n	8001d40 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d08:	4b09      	ldr	r3, [pc, #36]	; (8001d30 <HAL_RCC_OscConfig+0x27c>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d0e:	f7ff f863 	bl	8000dd8 <HAL_GetTick>
 8001d12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d14:	e00e      	b.n	8001d34 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d16:	f7ff f85f 	bl	8000dd8 <HAL_GetTick>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d907      	bls.n	8001d34 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e15c      	b.n	8001fe2 <HAL_RCC_OscConfig+0x52e>
 8001d28:	40023800 	.word	0x40023800
 8001d2c:	42470000 	.word	0x42470000
 8001d30:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d34:	4b8a      	ldr	r3, [pc, #552]	; (8001f60 <HAL_RCC_OscConfig+0x4ac>)
 8001d36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d38:	f003 0302 	and.w	r3, r3, #2
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d1ea      	bne.n	8001d16 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0304 	and.w	r3, r3, #4
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	f000 8097 	beq.w	8001e7c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d52:	4b83      	ldr	r3, [pc, #524]	; (8001f60 <HAL_RCC_OscConfig+0x4ac>)
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d10f      	bne.n	8001d7e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	60bb      	str	r3, [r7, #8]
 8001d62:	4b7f      	ldr	r3, [pc, #508]	; (8001f60 <HAL_RCC_OscConfig+0x4ac>)
 8001d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d66:	4a7e      	ldr	r2, [pc, #504]	; (8001f60 <HAL_RCC_OscConfig+0x4ac>)
 8001d68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d6e:	4b7c      	ldr	r3, [pc, #496]	; (8001f60 <HAL_RCC_OscConfig+0x4ac>)
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d76:	60bb      	str	r3, [r7, #8]
 8001d78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d7e:	4b79      	ldr	r3, [pc, #484]	; (8001f64 <HAL_RCC_OscConfig+0x4b0>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d118      	bne.n	8001dbc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d8a:	4b76      	ldr	r3, [pc, #472]	; (8001f64 <HAL_RCC_OscConfig+0x4b0>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a75      	ldr	r2, [pc, #468]	; (8001f64 <HAL_RCC_OscConfig+0x4b0>)
 8001d90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d96:	f7ff f81f 	bl	8000dd8 <HAL_GetTick>
 8001d9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d9c:	e008      	b.n	8001db0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d9e:	f7ff f81b 	bl	8000dd8 <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e118      	b.n	8001fe2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db0:	4b6c      	ldr	r3, [pc, #432]	; (8001f64 <HAL_RCC_OscConfig+0x4b0>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d0f0      	beq.n	8001d9e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d106      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x31e>
 8001dc4:	4b66      	ldr	r3, [pc, #408]	; (8001f60 <HAL_RCC_OscConfig+0x4ac>)
 8001dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc8:	4a65      	ldr	r2, [pc, #404]	; (8001f60 <HAL_RCC_OscConfig+0x4ac>)
 8001dca:	f043 0301 	orr.w	r3, r3, #1
 8001dce:	6713      	str	r3, [r2, #112]	; 0x70
 8001dd0:	e01c      	b.n	8001e0c <HAL_RCC_OscConfig+0x358>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	2b05      	cmp	r3, #5
 8001dd8:	d10c      	bne.n	8001df4 <HAL_RCC_OscConfig+0x340>
 8001dda:	4b61      	ldr	r3, [pc, #388]	; (8001f60 <HAL_RCC_OscConfig+0x4ac>)
 8001ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dde:	4a60      	ldr	r2, [pc, #384]	; (8001f60 <HAL_RCC_OscConfig+0x4ac>)
 8001de0:	f043 0304 	orr.w	r3, r3, #4
 8001de4:	6713      	str	r3, [r2, #112]	; 0x70
 8001de6:	4b5e      	ldr	r3, [pc, #376]	; (8001f60 <HAL_RCC_OscConfig+0x4ac>)
 8001de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dea:	4a5d      	ldr	r2, [pc, #372]	; (8001f60 <HAL_RCC_OscConfig+0x4ac>)
 8001dec:	f043 0301 	orr.w	r3, r3, #1
 8001df0:	6713      	str	r3, [r2, #112]	; 0x70
 8001df2:	e00b      	b.n	8001e0c <HAL_RCC_OscConfig+0x358>
 8001df4:	4b5a      	ldr	r3, [pc, #360]	; (8001f60 <HAL_RCC_OscConfig+0x4ac>)
 8001df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001df8:	4a59      	ldr	r2, [pc, #356]	; (8001f60 <HAL_RCC_OscConfig+0x4ac>)
 8001dfa:	f023 0301 	bic.w	r3, r3, #1
 8001dfe:	6713      	str	r3, [r2, #112]	; 0x70
 8001e00:	4b57      	ldr	r3, [pc, #348]	; (8001f60 <HAL_RCC_OscConfig+0x4ac>)
 8001e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e04:	4a56      	ldr	r2, [pc, #344]	; (8001f60 <HAL_RCC_OscConfig+0x4ac>)
 8001e06:	f023 0304 	bic.w	r3, r3, #4
 8001e0a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d015      	beq.n	8001e40 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e14:	f7fe ffe0 	bl	8000dd8 <HAL_GetTick>
 8001e18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e1a:	e00a      	b.n	8001e32 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e1c:	f7fe ffdc 	bl	8000dd8 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e0d7      	b.n	8001fe2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e32:	4b4b      	ldr	r3, [pc, #300]	; (8001f60 <HAL_RCC_OscConfig+0x4ac>)
 8001e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d0ee      	beq.n	8001e1c <HAL_RCC_OscConfig+0x368>
 8001e3e:	e014      	b.n	8001e6a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e40:	f7fe ffca 	bl	8000dd8 <HAL_GetTick>
 8001e44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e46:	e00a      	b.n	8001e5e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e48:	f7fe ffc6 	bl	8000dd8 <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e0c1      	b.n	8001fe2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e5e:	4b40      	ldr	r3, [pc, #256]	; (8001f60 <HAL_RCC_OscConfig+0x4ac>)
 8001e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d1ee      	bne.n	8001e48 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e6a:	7dfb      	ldrb	r3, [r7, #23]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d105      	bne.n	8001e7c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e70:	4b3b      	ldr	r3, [pc, #236]	; (8001f60 <HAL_RCC_OscConfig+0x4ac>)
 8001e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e74:	4a3a      	ldr	r2, [pc, #232]	; (8001f60 <HAL_RCC_OscConfig+0x4ac>)
 8001e76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e7a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	f000 80ad 	beq.w	8001fe0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e86:	4b36      	ldr	r3, [pc, #216]	; (8001f60 <HAL_RCC_OscConfig+0x4ac>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f003 030c 	and.w	r3, r3, #12
 8001e8e:	2b08      	cmp	r3, #8
 8001e90:	d060      	beq.n	8001f54 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d145      	bne.n	8001f26 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e9a:	4b33      	ldr	r3, [pc, #204]	; (8001f68 <HAL_RCC_OscConfig+0x4b4>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea0:	f7fe ff9a 	bl	8000dd8 <HAL_GetTick>
 8001ea4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ea6:	e008      	b.n	8001eba <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ea8:	f7fe ff96 	bl	8000dd8 <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e093      	b.n	8001fe2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eba:	4b29      	ldr	r3, [pc, #164]	; (8001f60 <HAL_RCC_OscConfig+0x4ac>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d1f0      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	69da      	ldr	r2, [r3, #28]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a1b      	ldr	r3, [r3, #32]
 8001ece:	431a      	orrs	r2, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed4:	019b      	lsls	r3, r3, #6
 8001ed6:	431a      	orrs	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001edc:	085b      	lsrs	r3, r3, #1
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	041b      	lsls	r3, r3, #16
 8001ee2:	431a      	orrs	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee8:	061b      	lsls	r3, r3, #24
 8001eea:	431a      	orrs	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef0:	071b      	lsls	r3, r3, #28
 8001ef2:	491b      	ldr	r1, [pc, #108]	; (8001f60 <HAL_RCC_OscConfig+0x4ac>)
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ef8:	4b1b      	ldr	r3, [pc, #108]	; (8001f68 <HAL_RCC_OscConfig+0x4b4>)
 8001efa:	2201      	movs	r2, #1
 8001efc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001efe:	f7fe ff6b 	bl	8000dd8 <HAL_GetTick>
 8001f02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f04:	e008      	b.n	8001f18 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f06:	f7fe ff67 	bl	8000dd8 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d901      	bls.n	8001f18 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e064      	b.n	8001fe2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f18:	4b11      	ldr	r3, [pc, #68]	; (8001f60 <HAL_RCC_OscConfig+0x4ac>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d0f0      	beq.n	8001f06 <HAL_RCC_OscConfig+0x452>
 8001f24:	e05c      	b.n	8001fe0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f26:	4b10      	ldr	r3, [pc, #64]	; (8001f68 <HAL_RCC_OscConfig+0x4b4>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f2c:	f7fe ff54 	bl	8000dd8 <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f34:	f7fe ff50 	bl	8000dd8 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e04d      	b.n	8001fe2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f46:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <HAL_RCC_OscConfig+0x4ac>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d1f0      	bne.n	8001f34 <HAL_RCC_OscConfig+0x480>
 8001f52:	e045      	b.n	8001fe0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d107      	bne.n	8001f6c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e040      	b.n	8001fe2 <HAL_RCC_OscConfig+0x52e>
 8001f60:	40023800 	.word	0x40023800
 8001f64:	40007000 	.word	0x40007000
 8001f68:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f6c:	4b1f      	ldr	r3, [pc, #124]	; (8001fec <HAL_RCC_OscConfig+0x538>)
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	699b      	ldr	r3, [r3, #24]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d030      	beq.n	8001fdc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d129      	bne.n	8001fdc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d122      	bne.n	8001fdc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001fa2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d119      	bne.n	8001fdc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb2:	085b      	lsrs	r3, r3, #1
 8001fb4:	3b01      	subs	r3, #1
 8001fb6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d10f      	bne.n	8001fdc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d107      	bne.n	8001fdc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d001      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e000      	b.n	8001fe2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3718      	adds	r7, #24
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	40023800 	.word	0x40023800

08001ff0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d101      	bne.n	8002002 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e041      	b.n	8002086 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002008:	b2db      	uxtb	r3, r3
 800200a:	2b00      	cmp	r3, #0
 800200c:	d106      	bne.n	800201c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f000 f839 	bl	800208e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2202      	movs	r2, #2
 8002020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	3304      	adds	r3, #4
 800202c:	4619      	mov	r1, r3
 800202e:	4610      	mov	r0, r2
 8002030:	f000 f9c0 	bl	80023b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2201      	movs	r2, #1
 8002040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2201      	movs	r2, #1
 8002058:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2201      	movs	r2, #1
 8002068:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2201      	movs	r2, #1
 8002078:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800208e:	b480      	push	{r7}
 8002090:	b083      	sub	sp, #12
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002096:	bf00      	nop
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
	...

080020a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d001      	beq.n	80020bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e04e      	b.n	800215a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2202      	movs	r2, #2
 80020c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	68da      	ldr	r2, [r3, #12]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f042 0201 	orr.w	r2, r2, #1
 80020d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a23      	ldr	r2, [pc, #140]	; (8002168 <HAL_TIM_Base_Start_IT+0xc4>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d022      	beq.n	8002124 <HAL_TIM_Base_Start_IT+0x80>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020e6:	d01d      	beq.n	8002124 <HAL_TIM_Base_Start_IT+0x80>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a1f      	ldr	r2, [pc, #124]	; (800216c <HAL_TIM_Base_Start_IT+0xc8>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d018      	beq.n	8002124 <HAL_TIM_Base_Start_IT+0x80>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a1e      	ldr	r2, [pc, #120]	; (8002170 <HAL_TIM_Base_Start_IT+0xcc>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d013      	beq.n	8002124 <HAL_TIM_Base_Start_IT+0x80>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a1c      	ldr	r2, [pc, #112]	; (8002174 <HAL_TIM_Base_Start_IT+0xd0>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d00e      	beq.n	8002124 <HAL_TIM_Base_Start_IT+0x80>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a1b      	ldr	r2, [pc, #108]	; (8002178 <HAL_TIM_Base_Start_IT+0xd4>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d009      	beq.n	8002124 <HAL_TIM_Base_Start_IT+0x80>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a19      	ldr	r2, [pc, #100]	; (800217c <HAL_TIM_Base_Start_IT+0xd8>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d004      	beq.n	8002124 <HAL_TIM_Base_Start_IT+0x80>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a18      	ldr	r2, [pc, #96]	; (8002180 <HAL_TIM_Base_Start_IT+0xdc>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d111      	bne.n	8002148 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f003 0307 	and.w	r3, r3, #7
 800212e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2b06      	cmp	r3, #6
 8002134:	d010      	beq.n	8002158 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f042 0201 	orr.w	r2, r2, #1
 8002144:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002146:	e007      	b.n	8002158 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f042 0201 	orr.w	r2, r2, #1
 8002156:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3714      	adds	r7, #20
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	40010000 	.word	0x40010000
 800216c:	40000400 	.word	0x40000400
 8002170:	40000800 	.word	0x40000800
 8002174:	40000c00 	.word	0x40000c00
 8002178:	40010400 	.word	0x40010400
 800217c:	40014000 	.word	0x40014000
 8002180:	40001800 	.word	0x40001800

08002184 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d020      	beq.n	80021e8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	f003 0302 	and.w	r3, r3, #2
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d01b      	beq.n	80021e8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f06f 0202 	mvn.w	r2, #2
 80021b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2201      	movs	r2, #1
 80021be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	699b      	ldr	r3, [r3, #24]
 80021c6:	f003 0303 	and.w	r3, r3, #3
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d003      	beq.n	80021d6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f000 f8d2 	bl	8002378 <HAL_TIM_IC_CaptureCallback>
 80021d4:	e005      	b.n	80021e2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f000 f8c4 	bl	8002364 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f000 f8d5 	bl	800238c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	f003 0304 	and.w	r3, r3, #4
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d020      	beq.n	8002234 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	f003 0304 	and.w	r3, r3, #4
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d01b      	beq.n	8002234 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f06f 0204 	mvn.w	r2, #4
 8002204:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2202      	movs	r2, #2
 800220a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002216:	2b00      	cmp	r3, #0
 8002218:	d003      	beq.n	8002222 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f000 f8ac 	bl	8002378 <HAL_TIM_IC_CaptureCallback>
 8002220:	e005      	b.n	800222e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f000 f89e 	bl	8002364 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f000 f8af 	bl	800238c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	f003 0308 	and.w	r3, r3, #8
 800223a:	2b00      	cmp	r3, #0
 800223c:	d020      	beq.n	8002280 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	f003 0308 	and.w	r3, r3, #8
 8002244:	2b00      	cmp	r3, #0
 8002246:	d01b      	beq.n	8002280 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f06f 0208 	mvn.w	r2, #8
 8002250:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2204      	movs	r2, #4
 8002256:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	69db      	ldr	r3, [r3, #28]
 800225e:	f003 0303 	and.w	r3, r3, #3
 8002262:	2b00      	cmp	r3, #0
 8002264:	d003      	beq.n	800226e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f000 f886 	bl	8002378 <HAL_TIM_IC_CaptureCallback>
 800226c:	e005      	b.n	800227a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f000 f878 	bl	8002364 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f000 f889 	bl	800238c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	f003 0310 	and.w	r3, r3, #16
 8002286:	2b00      	cmp	r3, #0
 8002288:	d020      	beq.n	80022cc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	f003 0310 	and.w	r3, r3, #16
 8002290:	2b00      	cmp	r3, #0
 8002292:	d01b      	beq.n	80022cc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f06f 0210 	mvn.w	r2, #16
 800229c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2208      	movs	r2, #8
 80022a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	69db      	ldr	r3, [r3, #28]
 80022aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d003      	beq.n	80022ba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 f860 	bl	8002378 <HAL_TIM_IC_CaptureCallback>
 80022b8:	e005      	b.n	80022c6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 f852 	bl	8002364 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f000 f863 	bl	800238c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00c      	beq.n	80022f0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f003 0301 	and.w	r3, r3, #1
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d007      	beq.n	80022f0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f06f 0201 	mvn.w	r2, #1
 80022e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f7fe fc26 	bl	8000b3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00c      	beq.n	8002314 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002300:	2b00      	cmp	r3, #0
 8002302:	d007      	beq.n	8002314 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800230c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f000 f906 	bl	8002520 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800231a:	2b00      	cmp	r3, #0
 800231c:	d00c      	beq.n	8002338 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002324:	2b00      	cmp	r3, #0
 8002326:	d007      	beq.n	8002338 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f000 f834 	bl	80023a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	f003 0320 	and.w	r3, r3, #32
 800233e:	2b00      	cmp	r3, #0
 8002340:	d00c      	beq.n	800235c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	f003 0320 	and.w	r3, r3, #32
 8002348:	2b00      	cmp	r3, #0
 800234a:	d007      	beq.n	800235c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f06f 0220 	mvn.w	r2, #32
 8002354:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f000 f8d8 	bl	800250c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800235c:	bf00      	nop
 800235e:	3710      	adds	r7, #16
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800236c:	bf00      	nop
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002380:	bf00      	nop
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002394:	bf00      	nop
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80023a8:	bf00      	nop
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	4a46      	ldr	r2, [pc, #280]	; (80024e0 <TIM_Base_SetConfig+0x12c>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d013      	beq.n	80023f4 <TIM_Base_SetConfig+0x40>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023d2:	d00f      	beq.n	80023f4 <TIM_Base_SetConfig+0x40>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4a43      	ldr	r2, [pc, #268]	; (80024e4 <TIM_Base_SetConfig+0x130>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d00b      	beq.n	80023f4 <TIM_Base_SetConfig+0x40>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4a42      	ldr	r2, [pc, #264]	; (80024e8 <TIM_Base_SetConfig+0x134>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d007      	beq.n	80023f4 <TIM_Base_SetConfig+0x40>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4a41      	ldr	r2, [pc, #260]	; (80024ec <TIM_Base_SetConfig+0x138>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d003      	beq.n	80023f4 <TIM_Base_SetConfig+0x40>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4a40      	ldr	r2, [pc, #256]	; (80024f0 <TIM_Base_SetConfig+0x13c>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d108      	bne.n	8002406 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	68fa      	ldr	r2, [r7, #12]
 8002402:	4313      	orrs	r3, r2
 8002404:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a35      	ldr	r2, [pc, #212]	; (80024e0 <TIM_Base_SetConfig+0x12c>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d02b      	beq.n	8002466 <TIM_Base_SetConfig+0xb2>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002414:	d027      	beq.n	8002466 <TIM_Base_SetConfig+0xb2>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a32      	ldr	r2, [pc, #200]	; (80024e4 <TIM_Base_SetConfig+0x130>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d023      	beq.n	8002466 <TIM_Base_SetConfig+0xb2>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a31      	ldr	r2, [pc, #196]	; (80024e8 <TIM_Base_SetConfig+0x134>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d01f      	beq.n	8002466 <TIM_Base_SetConfig+0xb2>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a30      	ldr	r2, [pc, #192]	; (80024ec <TIM_Base_SetConfig+0x138>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d01b      	beq.n	8002466 <TIM_Base_SetConfig+0xb2>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a2f      	ldr	r2, [pc, #188]	; (80024f0 <TIM_Base_SetConfig+0x13c>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d017      	beq.n	8002466 <TIM_Base_SetConfig+0xb2>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a2e      	ldr	r2, [pc, #184]	; (80024f4 <TIM_Base_SetConfig+0x140>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d013      	beq.n	8002466 <TIM_Base_SetConfig+0xb2>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a2d      	ldr	r2, [pc, #180]	; (80024f8 <TIM_Base_SetConfig+0x144>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d00f      	beq.n	8002466 <TIM_Base_SetConfig+0xb2>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a2c      	ldr	r2, [pc, #176]	; (80024fc <TIM_Base_SetConfig+0x148>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d00b      	beq.n	8002466 <TIM_Base_SetConfig+0xb2>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a2b      	ldr	r2, [pc, #172]	; (8002500 <TIM_Base_SetConfig+0x14c>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d007      	beq.n	8002466 <TIM_Base_SetConfig+0xb2>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a2a      	ldr	r2, [pc, #168]	; (8002504 <TIM_Base_SetConfig+0x150>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d003      	beq.n	8002466 <TIM_Base_SetConfig+0xb2>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a29      	ldr	r2, [pc, #164]	; (8002508 <TIM_Base_SetConfig+0x154>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d108      	bne.n	8002478 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800246c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	68fa      	ldr	r2, [r7, #12]
 8002474:	4313      	orrs	r3, r2
 8002476:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	695b      	ldr	r3, [r3, #20]
 8002482:	4313      	orrs	r3, r2
 8002484:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	68fa      	ldr	r2, [r7, #12]
 800248a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	689a      	ldr	r2, [r3, #8]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	4a10      	ldr	r2, [pc, #64]	; (80024e0 <TIM_Base_SetConfig+0x12c>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d003      	beq.n	80024ac <TIM_Base_SetConfig+0xf8>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4a12      	ldr	r2, [pc, #72]	; (80024f0 <TIM_Base_SetConfig+0x13c>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d103      	bne.n	80024b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	691a      	ldr	r2, [r3, #16]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d105      	bne.n	80024d2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	f023 0201 	bic.w	r2, r3, #1
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	611a      	str	r2, [r3, #16]
  }
}
 80024d2:	bf00      	nop
 80024d4:	3714      	adds	r7, #20
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	40010000 	.word	0x40010000
 80024e4:	40000400 	.word	0x40000400
 80024e8:	40000800 	.word	0x40000800
 80024ec:	40000c00 	.word	0x40000c00
 80024f0:	40010400 	.word	0x40010400
 80024f4:	40014000 	.word	0x40014000
 80024f8:	40014400 	.word	0x40014400
 80024fc:	40014800 	.word	0x40014800
 8002500:	40001800 	.word	0x40001800
 8002504:	40001c00 	.word	0x40001c00
 8002508:	40002000 	.word	0x40002000

0800250c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002528:	bf00      	nop
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f103 0208 	add.w	r2, r3, #8
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f04f 32ff 	mov.w	r2, #4294967295
 800254c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f103 0208 	add.w	r2, r3, #8
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f103 0208 	add.w	r2, r3, #8
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002582:	bf00      	nop
 8002584:	370c      	adds	r7, #12
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr

0800258e <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800258e:	b480      	push	{r7}
 8002590:	b085      	sub	sp, #20
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
 8002596:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025a4:	d103      	bne.n	80025ae <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	60fb      	str	r3, [r7, #12]
 80025ac:	e00c      	b.n	80025c8 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	3308      	adds	r3, #8
 80025b2:	60fb      	str	r3, [r7, #12]
 80025b4:	e002      	b.n	80025bc <vListInsert+0x2e>
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	68ba      	ldr	r2, [r7, #8]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d2f6      	bcs.n	80025b6 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	685a      	ldr	r2, [r3, #4]
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	683a      	ldr	r2, [r7, #0]
 80025d6:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	68fa      	ldr	r2, [r7, #12]
 80025dc:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	683a      	ldr	r2, [r7, #0]
 80025e2:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	1c5a      	adds	r2, r3, #1
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	601a      	str	r2, [r3, #0]
}
 80025f4:	bf00      	nop
 80025f6:	3714      	adds	r7, #20
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002600:	b480      	push	{r7}
 8002602:	b085      	sub	sp, #20
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	691b      	ldr	r3, [r3, #16]
 800260c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	6892      	ldr	r2, [r2, #8]
 8002616:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	6852      	ldr	r2, [r2, #4]
 8002620:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	429a      	cmp	r2, r3
 800262a:	d103      	bne.n	8002634 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	689a      	ldr	r2, [r3, #8]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	1e5a      	subs	r2, r3, #1
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
}
 8002648:	4618      	mov	r0, r3
 800264a:	3714      	adds	r7, #20
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b086      	sub	sp, #24
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800265e:	2301      	movs	r3, #1
 8002660:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d10a      	bne.n	8002682 <xQueueGenericReset+0x2e>
        __asm volatile
 800266c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002670:	f383 8811 	msr	BASEPRI, r3
 8002674:	f3bf 8f6f 	isb	sy
 8002678:	f3bf 8f4f 	dsb	sy
 800267c:	60fb      	str	r3, [r7, #12]
    }
 800267e:	bf00      	nop
 8002680:	e7fe      	b.n	8002680 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d05d      	beq.n	8002744 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 800268c:	2b00      	cmp	r3, #0
 800268e:	d059      	beq.n	8002744 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002698:	2100      	movs	r1, #0
 800269a:	fba3 2302 	umull	r2, r3, r3, r2
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d000      	beq.n	80026a4 <xQueueGenericReset+0x50>
 80026a2:	2101      	movs	r1, #1
 80026a4:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d14c      	bne.n	8002744 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 80026aa:	f002 f92b 	bl	8004904 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026b6:	6939      	ldr	r1, [r7, #16]
 80026b8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80026ba:	fb01 f303 	mul.w	r3, r1, r3
 80026be:	441a      	add	r2, r3
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	2200      	movs	r2, #0
 80026c8:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026da:	3b01      	subs	r3, #1
 80026dc:	6939      	ldr	r1, [r7, #16]
 80026de:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80026e0:	fb01 f303 	mul.w	r3, r1, r3
 80026e4:	441a      	add	r2, r3
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	22ff      	movs	r2, #255	; 0xff
 80026ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	22ff      	movs	r2, #255	; 0xff
 80026f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d114      	bne.n	800272a <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	691b      	ldr	r3, [r3, #16]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d01a      	beq.n	800273e <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	3310      	adds	r3, #16
 800270c:	4618      	mov	r0, r3
 800270e:	f001 f85d 	bl	80037cc <xTaskRemoveFromEventList>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d012      	beq.n	800273e <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002718:	4b15      	ldr	r3, [pc, #84]	; (8002770 <xQueueGenericReset+0x11c>)
 800271a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	f3bf 8f4f 	dsb	sy
 8002724:	f3bf 8f6f 	isb	sy
 8002728:	e009      	b.n	800273e <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	3310      	adds	r3, #16
 800272e:	4618      	mov	r0, r3
 8002730:	f7ff ff00 	bl	8002534 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	3324      	adds	r3, #36	; 0x24
 8002738:	4618      	mov	r0, r3
 800273a:	f7ff fefb 	bl	8002534 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800273e:	f002 f911 	bl	8004964 <vPortExitCritical>
 8002742:	e001      	b.n	8002748 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8002744:	2300      	movs	r3, #0
 8002746:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10a      	bne.n	8002764 <xQueueGenericReset+0x110>
        __asm volatile
 800274e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002752:	f383 8811 	msr	BASEPRI, r3
 8002756:	f3bf 8f6f 	isb	sy
 800275a:	f3bf 8f4f 	dsb	sy
 800275e:	60bb      	str	r3, [r7, #8]
    }
 8002760:	bf00      	nop
 8002762:	e7fe      	b.n	8002762 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8002764:	697b      	ldr	r3, [r7, #20]
}
 8002766:	4618      	mov	r0, r3
 8002768:	3718      	adds	r7, #24
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	e000ed04 	.word	0xe000ed04

08002774 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002774:	b580      	push	{r7, lr}
 8002776:	b08a      	sub	sp, #40	; 0x28
 8002778:	af02      	add	r7, sp, #8
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	4613      	mov	r3, r2
 8002780:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002782:	2300      	movs	r3, #0
 8002784:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d02e      	beq.n	80027ea <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800278c:	2100      	movs	r1, #0
 800278e:	68ba      	ldr	r2, [r7, #8]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	fba3 2302 	umull	r2, r3, r3, r2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d000      	beq.n	800279c <xQueueGenericCreate+0x28>
 800279a:	2101      	movs	r1, #1
 800279c:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d123      	bne.n	80027ea <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	68ba      	ldr	r2, [r7, #8]
 80027a6:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80027aa:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80027ae:	d81c      	bhi.n	80027ea <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	68ba      	ldr	r2, [r7, #8]
 80027b4:	fb02 f303 	mul.w	r3, r2, r3
 80027b8:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	3350      	adds	r3, #80	; 0x50
 80027be:	4618      	mov	r0, r3
 80027c0:	f002 f9cc 	bl	8004b5c <pvPortMalloc>
 80027c4:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d01c      	beq.n	8002806 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	3350      	adds	r3, #80	; 0x50
 80027d4:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80027d6:	79fa      	ldrb	r2, [r7, #7]
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	9300      	str	r3, [sp, #0]
 80027dc:	4613      	mov	r3, r2
 80027de:	697a      	ldr	r2, [r7, #20]
 80027e0:	68b9      	ldr	r1, [r7, #8]
 80027e2:	68f8      	ldr	r0, [r7, #12]
 80027e4:	f000 f814 	bl	8002810 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80027e8:	e00d      	b.n	8002806 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d10a      	bne.n	8002806 <xQueueGenericCreate+0x92>
        __asm volatile
 80027f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027f4:	f383 8811 	msr	BASEPRI, r3
 80027f8:	f3bf 8f6f 	isb	sy
 80027fc:	f3bf 8f4f 	dsb	sy
 8002800:	613b      	str	r3, [r7, #16]
    }
 8002802:	bf00      	nop
 8002804:	e7fe      	b.n	8002804 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002806:	69fb      	ldr	r3, [r7, #28]
    }
 8002808:	4618      	mov	r0, r3
 800280a:	3720      	adds	r7, #32
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	607a      	str	r2, [r7, #4]
 800281c:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d103      	bne.n	800282c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	601a      	str	r2, [r3, #0]
 800282a:	e002      	b.n	8002832 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	68ba      	ldr	r2, [r7, #8]
 800283c:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800283e:	2101      	movs	r1, #1
 8002840:	69b8      	ldr	r0, [r7, #24]
 8002842:	f7ff ff07 	bl	8002654 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	78fa      	ldrb	r2, [r7, #3]
 800284a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 800284e:	78fb      	ldrb	r3, [r7, #3]
 8002850:	68ba      	ldr	r2, [r7, #8]
 8002852:	68f9      	ldr	r1, [r7, #12]
 8002854:	2073      	movs	r0, #115	; 0x73
 8002856:	f004 f875 	bl	8006944 <SEGGER_SYSVIEW_RecordU32x3>
}
 800285a:	bf00      	nop
 800285c:	3710      	adds	r7, #16
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
	...

08002864 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002864:	b590      	push	{r4, r7, lr}
 8002866:	b08f      	sub	sp, #60	; 0x3c
 8002868:	af02      	add	r7, sp, #8
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002870:	2300      	movs	r3, #0
 8002872:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800287a:	2b00      	cmp	r3, #0
 800287c:	d10a      	bne.n	8002894 <xQueueReceive+0x30>
        __asm volatile
 800287e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002882:	f383 8811 	msr	BASEPRI, r3
 8002886:	f3bf 8f6f 	isb	sy
 800288a:	f3bf 8f4f 	dsb	sy
 800288e:	623b      	str	r3, [r7, #32]
    }
 8002890:	bf00      	nop
 8002892:	e7fe      	b.n	8002892 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d103      	bne.n	80028a2 <xQueueReceive+0x3e>
 800289a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800289c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <xQueueReceive+0x42>
 80028a2:	2301      	movs	r3, #1
 80028a4:	e000      	b.n	80028a8 <xQueueReceive+0x44>
 80028a6:	2300      	movs	r3, #0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d10a      	bne.n	80028c2 <xQueueReceive+0x5e>
        __asm volatile
 80028ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028b0:	f383 8811 	msr	BASEPRI, r3
 80028b4:	f3bf 8f6f 	isb	sy
 80028b8:	f3bf 8f4f 	dsb	sy
 80028bc:	61fb      	str	r3, [r7, #28]
    }
 80028be:	bf00      	nop
 80028c0:	e7fe      	b.n	80028c0 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80028c2:	f001 f995 	bl	8003bf0 <xTaskGetSchedulerState>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d102      	bne.n	80028d2 <xQueueReceive+0x6e>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d101      	bne.n	80028d6 <xQueueReceive+0x72>
 80028d2:	2301      	movs	r3, #1
 80028d4:	e000      	b.n	80028d8 <xQueueReceive+0x74>
 80028d6:	2300      	movs	r3, #0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d10a      	bne.n	80028f2 <xQueueReceive+0x8e>
        __asm volatile
 80028dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028e0:	f383 8811 	msr	BASEPRI, r3
 80028e4:	f3bf 8f6f 	isb	sy
 80028e8:	f3bf 8f4f 	dsb	sy
 80028ec:	61bb      	str	r3, [r7, #24]
    }
 80028ee:	bf00      	nop
 80028f0:	e7fe      	b.n	80028f0 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80028f2:	f002 f807 	bl	8004904 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80028f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028fa:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80028fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d02f      	beq.n	8002962 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002902:	68b9      	ldr	r1, [r7, #8]
 8002904:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002906:	f000 f8bd 	bl	8002a84 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 800290a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800290c:	4618      	mov	r0, r3
 800290e:	f004 fd47 	bl	80073a0 <SEGGER_SYSVIEW_ShrinkId>
 8002912:	4604      	mov	r4, r0
 8002914:	2000      	movs	r0, #0
 8002916:	f004 fd43 	bl	80073a0 <SEGGER_SYSVIEW_ShrinkId>
 800291a:	4602      	mov	r2, r0
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2101      	movs	r1, #1
 8002920:	9100      	str	r1, [sp, #0]
 8002922:	4621      	mov	r1, r4
 8002924:	205c      	movs	r0, #92	; 0x5c
 8002926:	f004 f883 	bl	8006a30 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800292a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292c:	1e5a      	subs	r2, r3, #1
 800292e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002930:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002934:	691b      	ldr	r3, [r3, #16]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d00f      	beq.n	800295a <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800293a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800293c:	3310      	adds	r3, #16
 800293e:	4618      	mov	r0, r3
 8002940:	f000 ff44 	bl	80037cc <xTaskRemoveFromEventList>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d007      	beq.n	800295a <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800294a:	4b4d      	ldr	r3, [pc, #308]	; (8002a80 <xQueueReceive+0x21c>)
 800294c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002950:	601a      	str	r2, [r3, #0]
 8002952:	f3bf 8f4f 	dsb	sy
 8002956:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800295a:	f002 f803 	bl	8004964 <vPortExitCritical>
                return pdPASS;
 800295e:	2301      	movs	r3, #1
 8002960:	e08a      	b.n	8002a78 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d113      	bne.n	8002990 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002968:	f001 fffc 	bl	8004964 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 800296c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800296e:	4618      	mov	r0, r3
 8002970:	f004 fd16 	bl	80073a0 <SEGGER_SYSVIEW_ShrinkId>
 8002974:	4604      	mov	r4, r0
 8002976:	2000      	movs	r0, #0
 8002978:	f004 fd12 	bl	80073a0 <SEGGER_SYSVIEW_ShrinkId>
 800297c:	4602      	mov	r2, r0
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2101      	movs	r1, #1
 8002982:	9100      	str	r1, [sp, #0]
 8002984:	4621      	mov	r1, r4
 8002986:	205c      	movs	r0, #92	; 0x5c
 8002988:	f004 f852 	bl	8006a30 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 800298c:	2300      	movs	r3, #0
 800298e:	e073      	b.n	8002a78 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002992:	2b00      	cmp	r3, #0
 8002994:	d106      	bne.n	80029a4 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002996:	f107 0310 	add.w	r3, r7, #16
 800299a:	4618      	mov	r0, r3
 800299c:	f000 ffee 	bl	800397c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80029a0:	2301      	movs	r3, #1
 80029a2:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80029a4:	f001 ffde 	bl	8004964 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80029a8:	f000 fbf0 	bl	800318c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80029ac:	f001 ffaa 	bl	8004904 <vPortEnterCritical>
 80029b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80029b6:	b25b      	sxtb	r3, r3
 80029b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029bc:	d103      	bne.n	80029c6 <xQueueReceive+0x162>
 80029be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029cc:	b25b      	sxtb	r3, r3
 80029ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029d2:	d103      	bne.n	80029dc <xQueueReceive+0x178>
 80029d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80029dc:	f001 ffc2 	bl	8004964 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80029e0:	1d3a      	adds	r2, r7, #4
 80029e2:	f107 0310 	add.w	r3, r7, #16
 80029e6:	4611      	mov	r1, r2
 80029e8:	4618      	mov	r0, r3
 80029ea:	f000 ffdd 	bl	80039a8 <xTaskCheckForTimeOut>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d124      	bne.n	8002a3e <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80029f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029f6:	f000 f8bd 	bl	8002b74 <prvIsQueueEmpty>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d018      	beq.n	8002a32 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a02:	3324      	adds	r3, #36	; 0x24
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	4611      	mov	r1, r2
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f000 fe73 	bl	80036f4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002a0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a10:	f000 f85e 	bl	8002ad0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002a14:	f000 fbc8 	bl	80031a8 <xTaskResumeAll>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	f47f af69 	bne.w	80028f2 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002a20:	4b17      	ldr	r3, [pc, #92]	; (8002a80 <xQueueReceive+0x21c>)
 8002a22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a26:	601a      	str	r2, [r3, #0]
 8002a28:	f3bf 8f4f 	dsb	sy
 8002a2c:	f3bf 8f6f 	isb	sy
 8002a30:	e75f      	b.n	80028f2 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002a32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a34:	f000 f84c 	bl	8002ad0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002a38:	f000 fbb6 	bl	80031a8 <xTaskResumeAll>
 8002a3c:	e759      	b.n	80028f2 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002a3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a40:	f000 f846 	bl	8002ad0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002a44:	f000 fbb0 	bl	80031a8 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a4a:	f000 f893 	bl	8002b74 <prvIsQueueEmpty>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	f43f af4e 	beq.w	80028f2 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f004 fca1 	bl	80073a0 <SEGGER_SYSVIEW_ShrinkId>
 8002a5e:	4604      	mov	r4, r0
 8002a60:	2000      	movs	r0, #0
 8002a62:	f004 fc9d 	bl	80073a0 <SEGGER_SYSVIEW_ShrinkId>
 8002a66:	4602      	mov	r2, r0
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2101      	movs	r1, #1
 8002a6c:	9100      	str	r1, [sp, #0]
 8002a6e:	4621      	mov	r1, r4
 8002a70:	205c      	movs	r0, #92	; 0x5c
 8002a72:	f003 ffdd 	bl	8006a30 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002a76:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3734      	adds	r7, #52	; 0x34
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd90      	pop	{r4, r7, pc}
 8002a80:	e000ed04 	.word	0xe000ed04

08002a84 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d018      	beq.n	8002ac8 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	68da      	ldr	r2, [r3, #12]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	441a      	add	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	68da      	ldr	r2, [r3, #12]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d303      	bcc.n	8002ab8 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	68d9      	ldr	r1, [r3, #12]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	6838      	ldr	r0, [r7, #0]
 8002ac4:	f004 fe78 	bl	80077b8 <memcpy>
    }
}
 8002ac8:	bf00      	nop
 8002aca:	3708      	adds	r7, #8
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002ad8:	f001 ff14 	bl	8004904 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ae2:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002ae4:	e011      	b.n	8002b0a <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d012      	beq.n	8002b14 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	3324      	adds	r3, #36	; 0x24
 8002af2:	4618      	mov	r0, r3
 8002af4:	f000 fe6a 	bl	80037cc <xTaskRemoveFromEventList>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8002afe:	f000 ffb9 	bl	8003a74 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002b02:	7bfb      	ldrb	r3, [r7, #15]
 8002b04:	3b01      	subs	r3, #1
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002b0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	dce9      	bgt.n	8002ae6 <prvUnlockQueue+0x16>
 8002b12:	e000      	b.n	8002b16 <prvUnlockQueue+0x46>
                    break;
 8002b14:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	22ff      	movs	r2, #255	; 0xff
 8002b1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002b1e:	f001 ff21 	bl	8004964 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002b22:	f001 feef 	bl	8004904 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b2c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b2e:	e011      	b.n	8002b54 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d012      	beq.n	8002b5e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	3310      	adds	r3, #16
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f000 fe45 	bl	80037cc <xTaskRemoveFromEventList>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d001      	beq.n	8002b4c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002b48:	f000 ff94 	bl	8003a74 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002b4c:	7bbb      	ldrb	r3, [r7, #14]
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	dce9      	bgt.n	8002b30 <prvUnlockQueue+0x60>
 8002b5c:	e000      	b.n	8002b60 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002b5e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	22ff      	movs	r2, #255	; 0xff
 8002b64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002b68:	f001 fefc 	bl	8004964 <vPortExitCritical>
}
 8002b6c:	bf00      	nop
 8002b6e:	3710      	adds	r7, #16
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002b7c:	f001 fec2 	bl	8004904 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d102      	bne.n	8002b8e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	60fb      	str	r3, [r7, #12]
 8002b8c:	e001      	b.n	8002b92 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002b92:	f001 fee7 	bl	8004964 <vPortExitCritical>

    return xReturn;
 8002b96:	68fb      	ldr	r3, [r7, #12]
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3710      	adds	r7, #16
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8002baa:	2300      	movs	r3, #0
 8002bac:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d10a      	bne.n	8002bca <vQueueAddToRegistry+0x2a>
        __asm volatile
 8002bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bb8:	f383 8811 	msr	BASEPRI, r3
 8002bbc:	f3bf 8f6f 	isb	sy
 8002bc0:	f3bf 8f4f 	dsb	sy
 8002bc4:	60fb      	str	r3, [r7, #12]
    }
 8002bc6:	bf00      	nop
 8002bc8:	e7fe      	b.n	8002bc8 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d024      	beq.n	8002c1a <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	617b      	str	r3, [r7, #20]
 8002bd4:	e01e      	b.n	8002c14 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002bd6:	4a1c      	ldr	r2, [pc, #112]	; (8002c48 <vQueueAddToRegistry+0xa8>)
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	4413      	add	r3, r2
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d105      	bne.n	8002bf2 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	00db      	lsls	r3, r3, #3
 8002bea:	4a17      	ldr	r2, [pc, #92]	; (8002c48 <vQueueAddToRegistry+0xa8>)
 8002bec:	4413      	add	r3, r2
 8002bee:	613b      	str	r3, [r7, #16]
                    break;
 8002bf0:	e013      	b.n	8002c1a <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d10a      	bne.n	8002c0e <vQueueAddToRegistry+0x6e>
 8002bf8:	4a13      	ldr	r2, [pc, #76]	; (8002c48 <vQueueAddToRegistry+0xa8>)
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d104      	bne.n	8002c0e <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	00db      	lsls	r3, r3, #3
 8002c08:	4a0f      	ldr	r2, [pc, #60]	; (8002c48 <vQueueAddToRegistry+0xa8>)
 8002c0a:	4413      	add	r3, r2
 8002c0c:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	3301      	adds	r3, #1
 8002c12:	617b      	str	r3, [r7, #20]
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	2b07      	cmp	r3, #7
 8002c18:	d9dd      	bls.n	8002bd6 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d00f      	beq.n	8002c40 <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	683a      	ldr	r2, [r7, #0]
 8002c24:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f004 fbb6 	bl	80073a0 <SEGGER_SYSVIEW_ShrinkId>
 8002c34:	4601      	mov	r1, r0
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	461a      	mov	r2, r3
 8002c3a:	2071      	movs	r0, #113	; 0x71
 8002c3c:	f003 fe28 	bl	8006890 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 8002c40:	bf00      	nop
 8002c42:	3718      	adds	r7, #24
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	200000e0 	.word	0x200000e0

08002c4c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b086      	sub	sp, #24
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002c5c:	f001 fe52 	bl	8004904 <vPortEnterCritical>
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c66:	b25b      	sxtb	r3, r3
 8002c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c6c:	d103      	bne.n	8002c76 <vQueueWaitForMessageRestricted+0x2a>
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c7c:	b25b      	sxtb	r3, r3
 8002c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c82:	d103      	bne.n	8002c8c <vQueueWaitForMessageRestricted+0x40>
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c8c:	f001 fe6a 	bl	8004964 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d106      	bne.n	8002ca6 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	3324      	adds	r3, #36	; 0x24
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	68b9      	ldr	r1, [r7, #8]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f000 fd4b 	bl	800373c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002ca6:	6978      	ldr	r0, [r7, #20]
 8002ca8:	f7ff ff12 	bl	8002ad0 <prvUnlockQueue>
    }
 8002cac:	bf00      	nop
 8002cae:	3718      	adds	r7, #24
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b08c      	sub	sp, #48	; 0x30
 8002cb8:	af04      	add	r7, sp, #16
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	603b      	str	r3, [r7, #0]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002cc4:	88fb      	ldrh	r3, [r7, #6]
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f001 ff47 	bl	8004b5c <pvPortMalloc>
 8002cce:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d013      	beq.n	8002cfe <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002cd6:	2060      	movs	r0, #96	; 0x60
 8002cd8:	f001 ff40 	bl	8004b5c <pvPortMalloc>
 8002cdc:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d008      	beq.n	8002cf6 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002ce4:	2260      	movs	r2, #96	; 0x60
 8002ce6:	2100      	movs	r1, #0
 8002ce8:	69f8      	ldr	r0, [r7, #28]
 8002cea:	f004 fd27 	bl	800773c <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	697a      	ldr	r2, [r7, #20]
 8002cf2:	631a      	str	r2, [r3, #48]	; 0x30
 8002cf4:	e005      	b.n	8002d02 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002cf6:	6978      	ldr	r0, [r7, #20]
 8002cf8:	f001 ffea 	bl	8004cd0 <vPortFree>
 8002cfc:	e001      	b.n	8002d02 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d013      	beq.n	8002d30 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002d08:	88fa      	ldrh	r2, [r7, #6]
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	9303      	str	r3, [sp, #12]
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	9302      	str	r3, [sp, #8]
 8002d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d14:	9301      	str	r3, [sp, #4]
 8002d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d18:	9300      	str	r3, [sp, #0]
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	68b9      	ldr	r1, [r7, #8]
 8002d1e:	68f8      	ldr	r0, [r7, #12]
 8002d20:	f000 f80e 	bl	8002d40 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002d24:	69f8      	ldr	r0, [r7, #28]
 8002d26:	f000 f899 	bl	8002e5c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	61bb      	str	r3, [r7, #24]
 8002d2e:	e002      	b.n	8002d36 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002d30:	f04f 33ff 	mov.w	r3, #4294967295
 8002d34:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002d36:	69bb      	ldr	r3, [r7, #24]
    }
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3720      	adds	r7, #32
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b088      	sub	sp, #32
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	607a      	str	r2, [r7, #4]
 8002d4c:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d50:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	461a      	mov	r2, r3
 8002d58:	21a5      	movs	r1, #165	; 0xa5
 8002d5a:	f004 fcef 	bl	800773c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002d68:	3b01      	subs	r3, #1
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	4413      	add	r3, r2
 8002d6e:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	f023 0307 	bic.w	r3, r3, #7
 8002d76:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	f003 0307 	and.w	r3, r3, #7
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d00a      	beq.n	8002d98 <prvInitialiseNewTask+0x58>
        __asm volatile
 8002d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d86:	f383 8811 	msr	BASEPRI, r3
 8002d8a:	f3bf 8f6f 	isb	sy
 8002d8e:	f3bf 8f4f 	dsb	sy
 8002d92:	617b      	str	r3, [r7, #20]
    }
 8002d94:	bf00      	nop
 8002d96:	e7fe      	b.n	8002d96 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d01e      	beq.n	8002ddc <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d9e:	2300      	movs	r3, #0
 8002da0:	61fb      	str	r3, [r7, #28]
 8002da2:	e012      	b.n	8002dca <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002da4:	68ba      	ldr	r2, [r7, #8]
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	4413      	add	r3, r2
 8002daa:	7819      	ldrb	r1, [r3, #0]
 8002dac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	4413      	add	r3, r2
 8002db2:	3334      	adds	r3, #52	; 0x34
 8002db4:	460a      	mov	r2, r1
 8002db6:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002db8:	68ba      	ldr	r2, [r7, #8]
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d006      	beq.n	8002dd2 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	61fb      	str	r3, [r7, #28]
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	2b09      	cmp	r3, #9
 8002dce:	d9e9      	bls.n	8002da4 <prvInitialiseNewTask+0x64>
 8002dd0:	e000      	b.n	8002dd4 <prvInitialiseNewTask+0x94>
            {
                break;
 8002dd2:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dde:	2b04      	cmp	r3, #4
 8002de0:	d90a      	bls.n	8002df8 <prvInitialiseNewTask+0xb8>
        __asm volatile
 8002de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002de6:	f383 8811 	msr	BASEPRI, r3
 8002dea:	f3bf 8f6f 	isb	sy
 8002dee:	f3bf 8f4f 	dsb	sy
 8002df2:	613b      	str	r3, [r7, #16]
    }
 8002df4:	bf00      	nop
 8002df6:	e7fe      	b.n	8002df6 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dfa:	2b04      	cmp	r3, #4
 8002dfc:	d901      	bls.n	8002e02 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002dfe:	2304      	movs	r3, #4
 8002e00:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e06:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e0c:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e10:	3304      	adds	r3, #4
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7ff fbae 	bl	8002574 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e1a:	3318      	adds	r3, #24
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7ff fba9 	bl	8002574 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e26:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e2a:	f1c3 0205 	rsb	r2, r3, #5
 8002e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e30:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e36:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002e38:	683a      	ldr	r2, [r7, #0]
 8002e3a:	68f9      	ldr	r1, [r7, #12]
 8002e3c:	69b8      	ldr	r0, [r7, #24]
 8002e3e:	f001 fbb5 	bl	80045ac <pxPortInitialiseStack>
 8002e42:	4602      	mov	r2, r0
 8002e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e46:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d002      	beq.n	8002e54 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e52:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002e54:	bf00      	nop
 8002e56:	3720      	adds	r7, #32
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002e5c:	b5b0      	push	{r4, r5, r7, lr}
 8002e5e:	b086      	sub	sp, #24
 8002e60:	af02      	add	r7, sp, #8
 8002e62:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002e64:	f001 fd4e 	bl	8004904 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002e68:	4b4f      	ldr	r3, [pc, #316]	; (8002fa8 <prvAddNewTaskToReadyList+0x14c>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	4a4e      	ldr	r2, [pc, #312]	; (8002fa8 <prvAddNewTaskToReadyList+0x14c>)
 8002e70:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002e72:	4b4e      	ldr	r3, [pc, #312]	; (8002fac <prvAddNewTaskToReadyList+0x150>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d109      	bne.n	8002e8e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002e7a:	4a4c      	ldr	r2, [pc, #304]	; (8002fac <prvAddNewTaskToReadyList+0x150>)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002e80:	4b49      	ldr	r3, [pc, #292]	; (8002fa8 <prvAddNewTaskToReadyList+0x14c>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d110      	bne.n	8002eaa <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002e88:	f000 fe18 	bl	8003abc <prvInitialiseTaskLists>
 8002e8c:	e00d      	b.n	8002eaa <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002e8e:	4b48      	ldr	r3, [pc, #288]	; (8002fb0 <prvAddNewTaskToReadyList+0x154>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d109      	bne.n	8002eaa <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002e96:	4b45      	ldr	r3, [pc, #276]	; (8002fac <prvAddNewTaskToReadyList+0x150>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d802      	bhi.n	8002eaa <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002ea4:	4a41      	ldr	r2, [pc, #260]	; (8002fac <prvAddNewTaskToReadyList+0x150>)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002eaa:	4b42      	ldr	r3, [pc, #264]	; (8002fb4 <prvAddNewTaskToReadyList+0x158>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	3301      	adds	r3, #1
 8002eb0:	4a40      	ldr	r2, [pc, #256]	; (8002fb4 <prvAddNewTaskToReadyList+0x158>)
 8002eb2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002eb4:	4b3f      	ldr	r3, [pc, #252]	; (8002fb4 <prvAddNewTaskToReadyList+0x158>)
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d016      	beq.n	8002ef0 <prvAddNewTaskToReadyList+0x94>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f004 f9a5 	bl	8007214 <SEGGER_SYSVIEW_OnTaskCreate>
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eda:	461d      	mov	r5, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	461c      	mov	r4, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee6:	1ae3      	subs	r3, r4, r3
 8002ee8:	9300      	str	r3, [sp, #0]
 8002eea:	462b      	mov	r3, r5
 8002eec:	f002 f8b2 	bl	8005054 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f004 fa12 	bl	800731c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002efc:	2201      	movs	r2, #1
 8002efe:	409a      	lsls	r2, r3
 8002f00:	4b2d      	ldr	r3, [pc, #180]	; (8002fb8 <prvAddNewTaskToReadyList+0x15c>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	4a2c      	ldr	r2, [pc, #176]	; (8002fb8 <prvAddNewTaskToReadyList+0x15c>)
 8002f08:	6013      	str	r3, [r2, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f0e:	492b      	ldr	r1, [pc, #172]	; (8002fbc <prvAddNewTaskToReadyList+0x160>)
 8002f10:	4613      	mov	r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	4413      	add	r3, r2
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	440b      	add	r3, r1
 8002f1a:	3304      	adds	r3, #4
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	60fb      	str	r3, [r7, #12]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	68fa      	ldr	r2, [r7, #12]
 8002f24:	609a      	str	r2, [r3, #8]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	689a      	ldr	r2, [r3, #8]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	60da      	str	r2, [r3, #12]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	3204      	adds	r2, #4
 8002f36:	605a      	str	r2, [r3, #4]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	1d1a      	adds	r2, r3, #4
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	609a      	str	r2, [r3, #8]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f44:	4613      	mov	r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	4413      	add	r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	4a1b      	ldr	r2, [pc, #108]	; (8002fbc <prvAddNewTaskToReadyList+0x160>)
 8002f4e:	441a      	add	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	615a      	str	r2, [r3, #20]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f58:	4918      	ldr	r1, [pc, #96]	; (8002fbc <prvAddNewTaskToReadyList+0x160>)
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	4413      	add	r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	440b      	add	r3, r1
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	1c59      	adds	r1, r3, #1
 8002f68:	4814      	ldr	r0, [pc, #80]	; (8002fbc <prvAddNewTaskToReadyList+0x160>)
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	4413      	add	r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	4403      	add	r3, r0
 8002f74:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002f76:	f001 fcf5 	bl	8004964 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002f7a:	4b0d      	ldr	r3, [pc, #52]	; (8002fb0 <prvAddNewTaskToReadyList+0x154>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d00e      	beq.n	8002fa0 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002f82:	4b0a      	ldr	r3, [pc, #40]	; (8002fac <prvAddNewTaskToReadyList+0x150>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d207      	bcs.n	8002fa0 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002f90:	4b0b      	ldr	r3, [pc, #44]	; (8002fc0 <prvAddNewTaskToReadyList+0x164>)
 8002f92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f96:	601a      	str	r2, [r3, #0]
 8002f98:	f3bf 8f4f 	dsb	sy
 8002f9c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002fa0:	bf00      	nop
 8002fa2:	3710      	adds	r7, #16
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bdb0      	pop	{r4, r5, r7, pc}
 8002fa8:	200001f8 	.word	0x200001f8
 8002fac:	20000120 	.word	0x20000120
 8002fb0:	20000204 	.word	0x20000204
 8002fb4:	20000214 	.word	0x20000214
 8002fb8:	20000200 	.word	0x20000200
 8002fbc:	20000124 	.word	0x20000124
 8002fc0:	e000ed04 	.word	0xe000ed04

08002fc4 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b08a      	sub	sp, #40	; 0x28
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	627b      	str	r3, [r7, #36]	; 0x24

        configASSERT( pxPreviousWakeTime );
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d10a      	bne.n	8002fee <xTaskDelayUntil+0x2a>
        __asm volatile
 8002fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fdc:	f383 8811 	msr	BASEPRI, r3
 8002fe0:	f3bf 8f6f 	isb	sy
 8002fe4:	f3bf 8f4f 	dsb	sy
 8002fe8:	617b      	str	r3, [r7, #20]
    }
 8002fea:	bf00      	nop
 8002fec:	e7fe      	b.n	8002fec <xTaskDelayUntil+0x28>
        configASSERT( ( xTimeIncrement > 0U ) );
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d10a      	bne.n	800300a <xTaskDelayUntil+0x46>
        __asm volatile
 8002ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ff8:	f383 8811 	msr	BASEPRI, r3
 8002ffc:	f3bf 8f6f 	isb	sy
 8003000:	f3bf 8f4f 	dsb	sy
 8003004:	613b      	str	r3, [r7, #16]
    }
 8003006:	bf00      	nop
 8003008:	e7fe      	b.n	8003008 <xTaskDelayUntil+0x44>
        configASSERT( uxSchedulerSuspended == 0 );
 800300a:	4b2c      	ldr	r3, [pc, #176]	; (80030bc <xTaskDelayUntil+0xf8>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00a      	beq.n	8003028 <xTaskDelayUntil+0x64>
        __asm volatile
 8003012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003016:	f383 8811 	msr	BASEPRI, r3
 800301a:	f3bf 8f6f 	isb	sy
 800301e:	f3bf 8f4f 	dsb	sy
 8003022:	60fb      	str	r3, [r7, #12]
    }
 8003024:	bf00      	nop
 8003026:	e7fe      	b.n	8003026 <xTaskDelayUntil+0x62>

        vTaskSuspendAll();
 8003028:	f000 f8b0 	bl	800318c <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 800302c:	4b24      	ldr	r3, [pc, #144]	; (80030c0 <xTaskDelayUntil+0xfc>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	623b      	str	r3, [r7, #32]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	683a      	ldr	r2, [r7, #0]
 8003038:	4413      	add	r3, r2
 800303a:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	6a3a      	ldr	r2, [r7, #32]
 8003042:	429a      	cmp	r2, r3
 8003044:	d20b      	bcs.n	800305e <xTaskDelayUntil+0x9a>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	69fa      	ldr	r2, [r7, #28]
 800304c:	429a      	cmp	r2, r3
 800304e:	d211      	bcs.n	8003074 <xTaskDelayUntil+0xb0>
 8003050:	69fa      	ldr	r2, [r7, #28]
 8003052:	6a3b      	ldr	r3, [r7, #32]
 8003054:	429a      	cmp	r2, r3
 8003056:	d90d      	bls.n	8003074 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 8003058:	2301      	movs	r3, #1
 800305a:	627b      	str	r3, [r7, #36]	; 0x24
 800305c:	e00a      	b.n	8003074 <xTaskDelayUntil+0xb0>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	69fa      	ldr	r2, [r7, #28]
 8003064:	429a      	cmp	r2, r3
 8003066:	d303      	bcc.n	8003070 <xTaskDelayUntil+0xac>
 8003068:	69fa      	ldr	r2, [r7, #28]
 800306a:	6a3b      	ldr	r3, [r7, #32]
 800306c:	429a      	cmp	r2, r3
 800306e:	d901      	bls.n	8003074 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 8003070:	2301      	movs	r3, #1
 8003072:	627b      	str	r3, [r7, #36]	; 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	69fa      	ldr	r2, [r7, #28]
 8003078:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 800307a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307c:	2b00      	cmp	r3, #0
 800307e:	d009      	beq.n	8003094 <xTaskDelayUntil+0xd0>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );
 8003080:	2024      	movs	r0, #36	; 0x24
 8003082:	f003 fbab 	bl	80067dc <SEGGER_SYSVIEW_RecordVoid>

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8003086:	69fa      	ldr	r2, [r7, #28]
 8003088:	6a3b      	ldr	r3, [r7, #32]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	2100      	movs	r1, #0
 800308e:	4618      	mov	r0, r3
 8003090:	f000 ff88 	bl	8003fa4 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8003094:	f000 f888 	bl	80031a8 <xTaskResumeAll>
 8003098:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d107      	bne.n	80030b0 <xTaskDelayUntil+0xec>
        {
            portYIELD_WITHIN_API();
 80030a0:	4b08      	ldr	r3, [pc, #32]	; (80030c4 <xTaskDelayUntil+0x100>)
 80030a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030a6:	601a      	str	r2, [r3, #0]
 80030a8:	f3bf 8f4f 	dsb	sy
 80030ac:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 80030b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80030b2:	4618      	mov	r0, r3
 80030b4:	3728      	adds	r7, #40	; 0x28
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	20000220 	.word	0x20000220
 80030c0:	200001fc 	.word	0x200001fc
 80030c4:	e000ed04 	.word	0xe000ed04

080030c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b086      	sub	sp, #24
 80030cc:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 80030ce:	4b27      	ldr	r3, [pc, #156]	; (800316c <vTaskStartScheduler+0xa4>)
 80030d0:	9301      	str	r3, [sp, #4]
 80030d2:	2300      	movs	r3, #0
 80030d4:	9300      	str	r3, [sp, #0]
 80030d6:	2300      	movs	r3, #0
 80030d8:	2282      	movs	r2, #130	; 0x82
 80030da:	4925      	ldr	r1, [pc, #148]	; (8003170 <vTaskStartScheduler+0xa8>)
 80030dc:	4825      	ldr	r0, [pc, #148]	; (8003174 <vTaskStartScheduler+0xac>)
 80030de:	f7ff fde9 	bl	8002cb4 <xTaskCreate>
 80030e2:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d102      	bne.n	80030f0 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 80030ea:	f000 ffdb 	bl	80040a4 <xTimerCreateTimerTask>
 80030ee:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d124      	bne.n	8003140 <vTaskStartScheduler+0x78>
        __asm volatile
 80030f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030fa:	f383 8811 	msr	BASEPRI, r3
 80030fe:	f3bf 8f6f 	isb	sy
 8003102:	f3bf 8f4f 	dsb	sy
 8003106:	60bb      	str	r3, [r7, #8]
    }
 8003108:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800310a:	4b1b      	ldr	r3, [pc, #108]	; (8003178 <vTaskStartScheduler+0xb0>)
 800310c:	f04f 32ff 	mov.w	r2, #4294967295
 8003110:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003112:	4b1a      	ldr	r3, [pc, #104]	; (800317c <vTaskStartScheduler+0xb4>)
 8003114:	2201      	movs	r2, #1
 8003116:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003118:	4b19      	ldr	r3, [pc, #100]	; (8003180 <vTaskStartScheduler+0xb8>)
 800311a:	2200      	movs	r2, #0
 800311c:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800311e:	4b19      	ldr	r3, [pc, #100]	; (8003184 <vTaskStartScheduler+0xbc>)
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	4b12      	ldr	r3, [pc, #72]	; (800316c <vTaskStartScheduler+0xa4>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	429a      	cmp	r2, r3
 8003128:	d102      	bne.n	8003130 <vTaskStartScheduler+0x68>
 800312a:	f004 f857 	bl	80071dc <SEGGER_SYSVIEW_OnIdle>
 800312e:	e004      	b.n	800313a <vTaskStartScheduler+0x72>
 8003130:	4b14      	ldr	r3, [pc, #80]	; (8003184 <vTaskStartScheduler+0xbc>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4618      	mov	r0, r3
 8003136:	f004 f8af 	bl	8007298 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800313a:	f001 fac3 	bl	80046c4 <xPortStartScheduler>
 800313e:	e00e      	b.n	800315e <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003146:	d10a      	bne.n	800315e <vTaskStartScheduler+0x96>
        __asm volatile
 8003148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800314c:	f383 8811 	msr	BASEPRI, r3
 8003150:	f3bf 8f6f 	isb	sy
 8003154:	f3bf 8f4f 	dsb	sy
 8003158:	607b      	str	r3, [r7, #4]
    }
 800315a:	bf00      	nop
 800315c:	e7fe      	b.n	800315c <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800315e:	4b0a      	ldr	r3, [pc, #40]	; (8003188 <vTaskStartScheduler+0xc0>)
 8003160:	681b      	ldr	r3, [r3, #0]
}
 8003162:	bf00      	nop
 8003164:	3710      	adds	r7, #16
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	2000021c 	.word	0x2000021c
 8003170:	08008174 	.word	0x08008174
 8003174:	08003a8d 	.word	0x08003a8d
 8003178:	20000218 	.word	0x20000218
 800317c:	20000204 	.word	0x20000204
 8003180:	200001fc 	.word	0x200001fc
 8003184:	20000120 	.word	0x20000120
 8003188:	2000000c 	.word	0x2000000c

0800318c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800318c:	b480      	push	{r7}
 800318e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003190:	4b04      	ldr	r3, [pc, #16]	; (80031a4 <vTaskSuspendAll+0x18>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	3301      	adds	r3, #1
 8003196:	4a03      	ldr	r2, [pc, #12]	; (80031a4 <vTaskSuspendAll+0x18>)
 8003198:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800319a:	bf00      	nop
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr
 80031a4:	20000220 	.word	0x20000220

080031a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b088      	sub	sp, #32
 80031ac:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80031ae:	2300      	movs	r3, #0
 80031b0:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80031b2:	2300      	movs	r3, #0
 80031b4:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80031b6:	4b73      	ldr	r3, [pc, #460]	; (8003384 <xTaskResumeAll+0x1dc>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d10a      	bne.n	80031d4 <xTaskResumeAll+0x2c>
        __asm volatile
 80031be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c2:	f383 8811 	msr	BASEPRI, r3
 80031c6:	f3bf 8f6f 	isb	sy
 80031ca:	f3bf 8f4f 	dsb	sy
 80031ce:	607b      	str	r3, [r7, #4]
    }
 80031d0:	bf00      	nop
 80031d2:	e7fe      	b.n	80031d2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80031d4:	f001 fb96 	bl	8004904 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80031d8:	4b6a      	ldr	r3, [pc, #424]	; (8003384 <xTaskResumeAll+0x1dc>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	3b01      	subs	r3, #1
 80031de:	4a69      	ldr	r2, [pc, #420]	; (8003384 <xTaskResumeAll+0x1dc>)
 80031e0:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031e2:	4b68      	ldr	r3, [pc, #416]	; (8003384 <xTaskResumeAll+0x1dc>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f040 80c4 	bne.w	8003374 <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80031ec:	4b66      	ldr	r3, [pc, #408]	; (8003388 <xTaskResumeAll+0x1e0>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	f000 80bf 	beq.w	8003374 <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80031f6:	e08e      	b.n	8003316 <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031f8:	4b64      	ldr	r3, [pc, #400]	; (800338c <xTaskResumeAll+0x1e4>)
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003204:	613b      	str	r3, [r7, #16]
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	69db      	ldr	r3, [r3, #28]
 800320a:	69fa      	ldr	r2, [r7, #28]
 800320c:	6a12      	ldr	r2, [r2, #32]
 800320e:	609a      	str	r2, [r3, #8]
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	6a1b      	ldr	r3, [r3, #32]
 8003214:	69fa      	ldr	r2, [r7, #28]
 8003216:	69d2      	ldr	r2, [r2, #28]
 8003218:	605a      	str	r2, [r3, #4]
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	685a      	ldr	r2, [r3, #4]
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	3318      	adds	r3, #24
 8003222:	429a      	cmp	r2, r3
 8003224:	d103      	bne.n	800322e <xTaskResumeAll+0x86>
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	6a1a      	ldr	r2, [r3, #32]
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	605a      	str	r2, [r3, #4]
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	2200      	movs	r2, #0
 8003232:	629a      	str	r2, [r3, #40]	; 0x28
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	1e5a      	subs	r2, r3, #1
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	695b      	ldr	r3, [r3, #20]
 8003242:	60fb      	str	r3, [r7, #12]
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	69fa      	ldr	r2, [r7, #28]
 800324a:	68d2      	ldr	r2, [r2, #12]
 800324c:	609a      	str	r2, [r3, #8]
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	69fa      	ldr	r2, [r7, #28]
 8003254:	6892      	ldr	r2, [r2, #8]
 8003256:	605a      	str	r2, [r3, #4]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	685a      	ldr	r2, [r3, #4]
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	3304      	adds	r3, #4
 8003260:	429a      	cmp	r2, r3
 8003262:	d103      	bne.n	800326c <xTaskResumeAll+0xc4>
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	68da      	ldr	r2, [r3, #12]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	605a      	str	r2, [r3, #4]
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	2200      	movs	r2, #0
 8003270:	615a      	str	r2, [r3, #20]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	1e5a      	subs	r2, r3, #1
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	4618      	mov	r0, r3
 8003280:	f004 f84c 	bl	800731c <SEGGER_SYSVIEW_OnTaskStartReady>
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003288:	2201      	movs	r2, #1
 800328a:	409a      	lsls	r2, r3
 800328c:	4b40      	ldr	r3, [pc, #256]	; (8003390 <xTaskResumeAll+0x1e8>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4313      	orrs	r3, r2
 8003292:	4a3f      	ldr	r2, [pc, #252]	; (8003390 <xTaskResumeAll+0x1e8>)
 8003294:	6013      	str	r3, [r2, #0]
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800329a:	493e      	ldr	r1, [pc, #248]	; (8003394 <xTaskResumeAll+0x1ec>)
 800329c:	4613      	mov	r3, r2
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	4413      	add	r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	440b      	add	r3, r1
 80032a6:	3304      	adds	r3, #4
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	60bb      	str	r3, [r7, #8]
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	68ba      	ldr	r2, [r7, #8]
 80032b0:	609a      	str	r2, [r3, #8]
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	689a      	ldr	r2, [r3, #8]
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	60da      	str	r2, [r3, #12]
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	69fa      	ldr	r2, [r7, #28]
 80032c0:	3204      	adds	r2, #4
 80032c2:	605a      	str	r2, [r3, #4]
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	1d1a      	adds	r2, r3, #4
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	609a      	str	r2, [r3, #8]
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032d0:	4613      	mov	r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	4413      	add	r3, r2
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	4a2e      	ldr	r2, [pc, #184]	; (8003394 <xTaskResumeAll+0x1ec>)
 80032da:	441a      	add	r2, r3
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	615a      	str	r2, [r3, #20]
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032e4:	492b      	ldr	r1, [pc, #172]	; (8003394 <xTaskResumeAll+0x1ec>)
 80032e6:	4613      	mov	r3, r2
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	4413      	add	r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	440b      	add	r3, r1
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	1c59      	adds	r1, r3, #1
 80032f4:	4827      	ldr	r0, [pc, #156]	; (8003394 <xTaskResumeAll+0x1ec>)
 80032f6:	4613      	mov	r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	4413      	add	r3, r2
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	4403      	add	r3, r0
 8003300:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003306:	4b24      	ldr	r3, [pc, #144]	; (8003398 <xTaskResumeAll+0x1f0>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330c:	429a      	cmp	r2, r3
 800330e:	d302      	bcc.n	8003316 <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8003310:	4b22      	ldr	r3, [pc, #136]	; (800339c <xTaskResumeAll+0x1f4>)
 8003312:	2201      	movs	r2, #1
 8003314:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003316:	4b1d      	ldr	r3, [pc, #116]	; (800338c <xTaskResumeAll+0x1e4>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2b00      	cmp	r3, #0
 800331c:	f47f af6c 	bne.w	80031f8 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003326:	f000 fc47 	bl	8003bb8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800332a:	4b1d      	ldr	r3, [pc, #116]	; (80033a0 <xTaskResumeAll+0x1f8>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d010      	beq.n	8003358 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003336:	f000 f859 	bl	80033ec <xTaskIncrementTick>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d002      	beq.n	8003346 <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8003340:	4b16      	ldr	r3, [pc, #88]	; (800339c <xTaskResumeAll+0x1f4>)
 8003342:	2201      	movs	r2, #1
 8003344:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	3b01      	subs	r3, #1
 800334a:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d1f1      	bne.n	8003336 <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 8003352:	4b13      	ldr	r3, [pc, #76]	; (80033a0 <xTaskResumeAll+0x1f8>)
 8003354:	2200      	movs	r2, #0
 8003356:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003358:	4b10      	ldr	r3, [pc, #64]	; (800339c <xTaskResumeAll+0x1f4>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d009      	beq.n	8003374 <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8003360:	2301      	movs	r3, #1
 8003362:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003364:	4b0f      	ldr	r3, [pc, #60]	; (80033a4 <xTaskResumeAll+0x1fc>)
 8003366:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800336a:	601a      	str	r2, [r3, #0]
 800336c:	f3bf 8f4f 	dsb	sy
 8003370:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003374:	f001 faf6 	bl	8004964 <vPortExitCritical>

    return xAlreadyYielded;
 8003378:	69bb      	ldr	r3, [r7, #24]
}
 800337a:	4618      	mov	r0, r3
 800337c:	3720      	adds	r7, #32
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	20000220 	.word	0x20000220
 8003388:	200001f8 	.word	0x200001f8
 800338c:	200001b8 	.word	0x200001b8
 8003390:	20000200 	.word	0x20000200
 8003394:	20000124 	.word	0x20000124
 8003398:	20000120 	.word	0x20000120
 800339c:	2000020c 	.word	0x2000020c
 80033a0:	20000208 	.word	0x20000208
 80033a4:	e000ed04 	.word	0xe000ed04

080033a8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80033ae:	4b05      	ldr	r3, [pc, #20]	; (80033c4 <xTaskGetTickCount+0x1c>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80033b4:	687b      	ldr	r3, [r7, #4]
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	370c      	adds	r7, #12
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	200001fc 	.word	0x200001fc

080033c8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80033ce:	f001 fb85 	bl	8004adc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80033d2:	2300      	movs	r3, #0
 80033d4:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80033d6:	4b04      	ldr	r3, [pc, #16]	; (80033e8 <xTaskGetTickCountFromISR+0x20>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80033dc:	683b      	ldr	r3, [r7, #0]
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3708      	adds	r7, #8
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	200001fc 	.word	0x200001fc

080033ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b08a      	sub	sp, #40	; 0x28
 80033f0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80033f2:	2300      	movs	r3, #0
 80033f4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80033f6:	4b7f      	ldr	r3, [pc, #508]	; (80035f4 <xTaskIncrementTick+0x208>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	f040 80f0 	bne.w	80035e0 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003400:	4b7d      	ldr	r3, [pc, #500]	; (80035f8 <xTaskIncrementTick+0x20c>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	3301      	adds	r3, #1
 8003406:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003408:	4a7b      	ldr	r2, [pc, #492]	; (80035f8 <xTaskIncrementTick+0x20c>)
 800340a:	6a3b      	ldr	r3, [r7, #32]
 800340c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800340e:	6a3b      	ldr	r3, [r7, #32]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d120      	bne.n	8003456 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003414:	4b79      	ldr	r3, [pc, #484]	; (80035fc <xTaskIncrementTick+0x210>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00a      	beq.n	8003434 <xTaskIncrementTick+0x48>
        __asm volatile
 800341e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003422:	f383 8811 	msr	BASEPRI, r3
 8003426:	f3bf 8f6f 	isb	sy
 800342a:	f3bf 8f4f 	dsb	sy
 800342e:	607b      	str	r3, [r7, #4]
    }
 8003430:	bf00      	nop
 8003432:	e7fe      	b.n	8003432 <xTaskIncrementTick+0x46>
 8003434:	4b71      	ldr	r3, [pc, #452]	; (80035fc <xTaskIncrementTick+0x210>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	61fb      	str	r3, [r7, #28]
 800343a:	4b71      	ldr	r3, [pc, #452]	; (8003600 <xTaskIncrementTick+0x214>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a6f      	ldr	r2, [pc, #444]	; (80035fc <xTaskIncrementTick+0x210>)
 8003440:	6013      	str	r3, [r2, #0]
 8003442:	4a6f      	ldr	r2, [pc, #444]	; (8003600 <xTaskIncrementTick+0x214>)
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	6013      	str	r3, [r2, #0]
 8003448:	4b6e      	ldr	r3, [pc, #440]	; (8003604 <xTaskIncrementTick+0x218>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	3301      	adds	r3, #1
 800344e:	4a6d      	ldr	r2, [pc, #436]	; (8003604 <xTaskIncrementTick+0x218>)
 8003450:	6013      	str	r3, [r2, #0]
 8003452:	f000 fbb1 	bl	8003bb8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003456:	4b6c      	ldr	r3, [pc, #432]	; (8003608 <xTaskIncrementTick+0x21c>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	6a3a      	ldr	r2, [r7, #32]
 800345c:	429a      	cmp	r2, r3
 800345e:	f0c0 80aa 	bcc.w	80035b6 <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003462:	4b66      	ldr	r3, [pc, #408]	; (80035fc <xTaskIncrementTick+0x210>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d104      	bne.n	8003476 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800346c:	4b66      	ldr	r3, [pc, #408]	; (8003608 <xTaskIncrementTick+0x21c>)
 800346e:	f04f 32ff 	mov.w	r2, #4294967295
 8003472:	601a      	str	r2, [r3, #0]
                    break;
 8003474:	e09f      	b.n	80035b6 <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003476:	4b61      	ldr	r3, [pc, #388]	; (80035fc <xTaskIncrementTick+0x210>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8003486:	6a3a      	ldr	r2, [r7, #32]
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	429a      	cmp	r2, r3
 800348c:	d203      	bcs.n	8003496 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800348e:	4a5e      	ldr	r2, [pc, #376]	; (8003608 <xTaskIncrementTick+0x21c>)
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8003494:	e08f      	b.n	80035b6 <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	695b      	ldr	r3, [r3, #20]
 800349a:	613b      	str	r3, [r7, #16]
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	68d2      	ldr	r2, [r2, #12]
 80034a4:	609a      	str	r2, [r3, #8]
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	69ba      	ldr	r2, [r7, #24]
 80034ac:	6892      	ldr	r2, [r2, #8]
 80034ae:	605a      	str	r2, [r3, #4]
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	685a      	ldr	r2, [r3, #4]
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	3304      	adds	r3, #4
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d103      	bne.n	80034c4 <xTaskIncrementTick+0xd8>
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	68da      	ldr	r2, [r3, #12]
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	605a      	str	r2, [r3, #4]
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	2200      	movs	r2, #0
 80034c8:	615a      	str	r2, [r3, #20]
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	1e5a      	subs	r2, r3, #1
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d01e      	beq.n	800351a <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e0:	60fb      	str	r3, [r7, #12]
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	69db      	ldr	r3, [r3, #28]
 80034e6:	69ba      	ldr	r2, [r7, #24]
 80034e8:	6a12      	ldr	r2, [r2, #32]
 80034ea:	609a      	str	r2, [r3, #8]
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	6a1b      	ldr	r3, [r3, #32]
 80034f0:	69ba      	ldr	r2, [r7, #24]
 80034f2:	69d2      	ldr	r2, [r2, #28]
 80034f4:	605a      	str	r2, [r3, #4]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	685a      	ldr	r2, [r3, #4]
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	3318      	adds	r3, #24
 80034fe:	429a      	cmp	r2, r3
 8003500:	d103      	bne.n	800350a <xTaskIncrementTick+0x11e>
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	6a1a      	ldr	r2, [r3, #32]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	605a      	str	r2, [r3, #4]
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	2200      	movs	r2, #0
 800350e:	629a      	str	r2, [r3, #40]	; 0x28
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	1e5a      	subs	r2, r3, #1
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	4618      	mov	r0, r3
 800351e:	f003 fefd 	bl	800731c <SEGGER_SYSVIEW_OnTaskStartReady>
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003526:	2201      	movs	r2, #1
 8003528:	409a      	lsls	r2, r3
 800352a:	4b38      	ldr	r3, [pc, #224]	; (800360c <xTaskIncrementTick+0x220>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4313      	orrs	r3, r2
 8003530:	4a36      	ldr	r2, [pc, #216]	; (800360c <xTaskIncrementTick+0x220>)
 8003532:	6013      	str	r3, [r2, #0]
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003538:	4935      	ldr	r1, [pc, #212]	; (8003610 <xTaskIncrementTick+0x224>)
 800353a:	4613      	mov	r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	4413      	add	r3, r2
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	440b      	add	r3, r1
 8003544:	3304      	adds	r3, #4
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	60bb      	str	r3, [r7, #8]
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	68ba      	ldr	r2, [r7, #8]
 800354e:	609a      	str	r2, [r3, #8]
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	689a      	ldr	r2, [r3, #8]
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	60da      	str	r2, [r3, #12]
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	69ba      	ldr	r2, [r7, #24]
 800355e:	3204      	adds	r2, #4
 8003560:	605a      	str	r2, [r3, #4]
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	1d1a      	adds	r2, r3, #4
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	609a      	str	r2, [r3, #8]
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800356e:	4613      	mov	r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	4413      	add	r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	4a26      	ldr	r2, [pc, #152]	; (8003610 <xTaskIncrementTick+0x224>)
 8003578:	441a      	add	r2, r3
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	615a      	str	r2, [r3, #20]
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003582:	4923      	ldr	r1, [pc, #140]	; (8003610 <xTaskIncrementTick+0x224>)
 8003584:	4613      	mov	r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	4413      	add	r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	440b      	add	r3, r1
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	1c59      	adds	r1, r3, #1
 8003592:	481f      	ldr	r0, [pc, #124]	; (8003610 <xTaskIncrementTick+0x224>)
 8003594:	4613      	mov	r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	4413      	add	r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	4403      	add	r3, r0
 800359e:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035a4:	4b1b      	ldr	r3, [pc, #108]	; (8003614 <xTaskIncrementTick+0x228>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035aa:	429a      	cmp	r2, r3
 80035ac:	f67f af59 	bls.w	8003462 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 80035b0:	2301      	movs	r3, #1
 80035b2:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80035b4:	e755      	b.n	8003462 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80035b6:	4b17      	ldr	r3, [pc, #92]	; (8003614 <xTaskIncrementTick+0x228>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035bc:	4914      	ldr	r1, [pc, #80]	; (8003610 <xTaskIncrementTick+0x224>)
 80035be:	4613      	mov	r3, r2
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	4413      	add	r3, r2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	440b      	add	r3, r1
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d901      	bls.n	80035d2 <xTaskIncrementTick+0x1e6>
            {
                xSwitchRequired = pdTRUE;
 80035ce:	2301      	movs	r3, #1
 80035d0:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 80035d2:	4b11      	ldr	r3, [pc, #68]	; (8003618 <xTaskIncrementTick+0x22c>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d007      	beq.n	80035ea <xTaskIncrementTick+0x1fe>
            {
                xSwitchRequired = pdTRUE;
 80035da:	2301      	movs	r3, #1
 80035dc:	627b      	str	r3, [r7, #36]	; 0x24
 80035de:	e004      	b.n	80035ea <xTaskIncrementTick+0x1fe>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80035e0:	4b0e      	ldr	r3, [pc, #56]	; (800361c <xTaskIncrementTick+0x230>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	3301      	adds	r3, #1
 80035e6:	4a0d      	ldr	r2, [pc, #52]	; (800361c <xTaskIncrementTick+0x230>)
 80035e8:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80035ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3728      	adds	r7, #40	; 0x28
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	20000220 	.word	0x20000220
 80035f8:	200001fc 	.word	0x200001fc
 80035fc:	200001b0 	.word	0x200001b0
 8003600:	200001b4 	.word	0x200001b4
 8003604:	20000210 	.word	0x20000210
 8003608:	20000218 	.word	0x20000218
 800360c:	20000200 	.word	0x20000200
 8003610:	20000124 	.word	0x20000124
 8003614:	20000120 	.word	0x20000120
 8003618:	2000020c 	.word	0x2000020c
 800361c:	20000208 	.word	0x20000208

08003620 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b086      	sub	sp, #24
 8003624:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003626:	4b2d      	ldr	r3, [pc, #180]	; (80036dc <vTaskSwitchContext+0xbc>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d003      	beq.n	8003636 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800362e:	4b2c      	ldr	r3, [pc, #176]	; (80036e0 <vTaskSwitchContext+0xc0>)
 8003630:	2201      	movs	r2, #1
 8003632:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8003634:	e04d      	b.n	80036d2 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8003636:	4b2a      	ldr	r3, [pc, #168]	; (80036e0 <vTaskSwitchContext+0xc0>)
 8003638:	2200      	movs	r2, #0
 800363a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800363c:	4b29      	ldr	r3, [pc, #164]	; (80036e4 <vTaskSwitchContext+0xc4>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	fab3 f383 	clz	r3, r3
 8003648:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800364a:	7afb      	ldrb	r3, [r7, #11]
 800364c:	f1c3 031f 	rsb	r3, r3, #31
 8003650:	617b      	str	r3, [r7, #20]
 8003652:	4925      	ldr	r1, [pc, #148]	; (80036e8 <vTaskSwitchContext+0xc8>)
 8003654:	697a      	ldr	r2, [r7, #20]
 8003656:	4613      	mov	r3, r2
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	4413      	add	r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	440b      	add	r3, r1
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d10a      	bne.n	800367c <vTaskSwitchContext+0x5c>
        __asm volatile
 8003666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800366a:	f383 8811 	msr	BASEPRI, r3
 800366e:	f3bf 8f6f 	isb	sy
 8003672:	f3bf 8f4f 	dsb	sy
 8003676:	607b      	str	r3, [r7, #4]
    }
 8003678:	bf00      	nop
 800367a:	e7fe      	b.n	800367a <vTaskSwitchContext+0x5a>
 800367c:	697a      	ldr	r2, [r7, #20]
 800367e:	4613      	mov	r3, r2
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	4413      	add	r3, r2
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	4a18      	ldr	r2, [pc, #96]	; (80036e8 <vTaskSwitchContext+0xc8>)
 8003688:	4413      	add	r3, r2
 800368a:	613b      	str	r3, [r7, #16]
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	685a      	ldr	r2, [r3, #4]
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	605a      	str	r2, [r3, #4]
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	685a      	ldr	r2, [r3, #4]
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	3308      	adds	r3, #8
 800369e:	429a      	cmp	r2, r3
 80036a0:	d104      	bne.n	80036ac <vTaskSwitchContext+0x8c>
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	685a      	ldr	r2, [r3, #4]
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	605a      	str	r2, [r3, #4]
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	4a0e      	ldr	r2, [pc, #56]	; (80036ec <vTaskSwitchContext+0xcc>)
 80036b4:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80036b6:	4b0d      	ldr	r3, [pc, #52]	; (80036ec <vTaskSwitchContext+0xcc>)
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	4b0d      	ldr	r3, [pc, #52]	; (80036f0 <vTaskSwitchContext+0xd0>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d102      	bne.n	80036c8 <vTaskSwitchContext+0xa8>
 80036c2:	f003 fd8b 	bl	80071dc <SEGGER_SYSVIEW_OnIdle>
}
 80036c6:	e004      	b.n	80036d2 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 80036c8:	4b08      	ldr	r3, [pc, #32]	; (80036ec <vTaskSwitchContext+0xcc>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4618      	mov	r0, r3
 80036ce:	f003 fde3 	bl	8007298 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80036d2:	bf00      	nop
 80036d4:	3718      	adds	r7, #24
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	20000220 	.word	0x20000220
 80036e0:	2000020c 	.word	0x2000020c
 80036e4:	20000200 	.word	0x20000200
 80036e8:	20000124 	.word	0x20000124
 80036ec:	20000120 	.word	0x20000120
 80036f0:	2000021c 	.word	0x2000021c

080036f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d10a      	bne.n	800371a <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003708:	f383 8811 	msr	BASEPRI, r3
 800370c:	f3bf 8f6f 	isb	sy
 8003710:	f3bf 8f4f 	dsb	sy
 8003714:	60fb      	str	r3, [r7, #12]
    }
 8003716:	bf00      	nop
 8003718:	e7fe      	b.n	8003718 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800371a:	4b07      	ldr	r3, [pc, #28]	; (8003738 <vTaskPlaceOnEventList+0x44>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	3318      	adds	r3, #24
 8003720:	4619      	mov	r1, r3
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f7fe ff33 	bl	800258e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003728:	2101      	movs	r1, #1
 800372a:	6838      	ldr	r0, [r7, #0]
 800372c:	f000 fc3a 	bl	8003fa4 <prvAddCurrentTaskToDelayedList>
}
 8003730:	bf00      	nop
 8003732:	3710      	adds	r7, #16
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	20000120 	.word	0x20000120

0800373c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800373c:	b580      	push	{r7, lr}
 800373e:	b086      	sub	sp, #24
 8003740:	af00      	add	r7, sp, #0
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d10a      	bne.n	8003764 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800374e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003752:	f383 8811 	msr	BASEPRI, r3
 8003756:	f3bf 8f6f 	isb	sy
 800375a:	f3bf 8f4f 	dsb	sy
 800375e:	613b      	str	r3, [r7, #16]
    }
 8003760:	bf00      	nop
 8003762:	e7fe      	b.n	8003762 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	617b      	str	r3, [r7, #20]
 800376a:	4b17      	ldr	r3, [pc, #92]	; (80037c8 <vTaskPlaceOnEventListRestricted+0x8c>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	697a      	ldr	r2, [r7, #20]
 8003770:	61da      	str	r2, [r3, #28]
 8003772:	4b15      	ldr	r3, [pc, #84]	; (80037c8 <vTaskPlaceOnEventListRestricted+0x8c>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	697a      	ldr	r2, [r7, #20]
 8003778:	6892      	ldr	r2, [r2, #8]
 800377a:	621a      	str	r2, [r3, #32]
 800377c:	4b12      	ldr	r3, [pc, #72]	; (80037c8 <vTaskPlaceOnEventListRestricted+0x8c>)
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	3218      	adds	r2, #24
 8003786:	605a      	str	r2, [r3, #4]
 8003788:	4b0f      	ldr	r3, [pc, #60]	; (80037c8 <vTaskPlaceOnEventListRestricted+0x8c>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f103 0218 	add.w	r2, r3, #24
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	609a      	str	r2, [r3, #8]
 8003794:	4b0c      	ldr	r3, [pc, #48]	; (80037c8 <vTaskPlaceOnEventListRestricted+0x8c>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	629a      	str	r2, [r3, #40]	; 0x28
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	1c5a      	adds	r2, r3, #1
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d002      	beq.n	80037b2 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 80037ac:	f04f 33ff 	mov.w	r3, #4294967295
 80037b0:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80037b2:	2024      	movs	r0, #36	; 0x24
 80037b4:	f003 f812 	bl	80067dc <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80037b8:	6879      	ldr	r1, [r7, #4]
 80037ba:	68b8      	ldr	r0, [r7, #8]
 80037bc:	f000 fbf2 	bl	8003fa4 <prvAddCurrentTaskToDelayedList>
    }
 80037c0:	bf00      	nop
 80037c2:	3718      	adds	r7, #24
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	20000120 	.word	0x20000120

080037cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b08a      	sub	sp, #40	; 0x28
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80037dc:	6a3b      	ldr	r3, [r7, #32]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d10a      	bne.n	80037f8 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80037e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e6:	f383 8811 	msr	BASEPRI, r3
 80037ea:	f3bf 8f6f 	isb	sy
 80037ee:	f3bf 8f4f 	dsb	sy
 80037f2:	60fb      	str	r3, [r7, #12]
    }
 80037f4:	bf00      	nop
 80037f6:	e7fe      	b.n	80037f6 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80037f8:	6a3b      	ldr	r3, [r7, #32]
 80037fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037fc:	61fb      	str	r3, [r7, #28]
 80037fe:	6a3b      	ldr	r3, [r7, #32]
 8003800:	69db      	ldr	r3, [r3, #28]
 8003802:	6a3a      	ldr	r2, [r7, #32]
 8003804:	6a12      	ldr	r2, [r2, #32]
 8003806:	609a      	str	r2, [r3, #8]
 8003808:	6a3b      	ldr	r3, [r7, #32]
 800380a:	6a1b      	ldr	r3, [r3, #32]
 800380c:	6a3a      	ldr	r2, [r7, #32]
 800380e:	69d2      	ldr	r2, [r2, #28]
 8003810:	605a      	str	r2, [r3, #4]
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	685a      	ldr	r2, [r3, #4]
 8003816:	6a3b      	ldr	r3, [r7, #32]
 8003818:	3318      	adds	r3, #24
 800381a:	429a      	cmp	r2, r3
 800381c:	d103      	bne.n	8003826 <xTaskRemoveFromEventList+0x5a>
 800381e:	6a3b      	ldr	r3, [r7, #32]
 8003820:	6a1a      	ldr	r2, [r3, #32]
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	605a      	str	r2, [r3, #4]
 8003826:	6a3b      	ldr	r3, [r7, #32]
 8003828:	2200      	movs	r2, #0
 800382a:	629a      	str	r2, [r3, #40]	; 0x28
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	1e5a      	subs	r2, r3, #1
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003836:	4b4b      	ldr	r3, [pc, #300]	; (8003964 <xTaskRemoveFromEventList+0x198>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d162      	bne.n	8003904 <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800383e:	6a3b      	ldr	r3, [r7, #32]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	617b      	str	r3, [r7, #20]
 8003844:	6a3b      	ldr	r3, [r7, #32]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	6a3a      	ldr	r2, [r7, #32]
 800384a:	68d2      	ldr	r2, [r2, #12]
 800384c:	609a      	str	r2, [r3, #8]
 800384e:	6a3b      	ldr	r3, [r7, #32]
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	6a3a      	ldr	r2, [r7, #32]
 8003854:	6892      	ldr	r2, [r2, #8]
 8003856:	605a      	str	r2, [r3, #4]
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	685a      	ldr	r2, [r3, #4]
 800385c:	6a3b      	ldr	r3, [r7, #32]
 800385e:	3304      	adds	r3, #4
 8003860:	429a      	cmp	r2, r3
 8003862:	d103      	bne.n	800386c <xTaskRemoveFromEventList+0xa0>
 8003864:	6a3b      	ldr	r3, [r7, #32]
 8003866:	68da      	ldr	r2, [r3, #12]
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	605a      	str	r2, [r3, #4]
 800386c:	6a3b      	ldr	r3, [r7, #32]
 800386e:	2200      	movs	r2, #0
 8003870:	615a      	str	r2, [r3, #20]
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	1e5a      	subs	r2, r3, #1
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800387c:	6a3b      	ldr	r3, [r7, #32]
 800387e:	4618      	mov	r0, r3
 8003880:	f003 fd4c 	bl	800731c <SEGGER_SYSVIEW_OnTaskStartReady>
 8003884:	6a3b      	ldr	r3, [r7, #32]
 8003886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003888:	2201      	movs	r2, #1
 800388a:	409a      	lsls	r2, r3
 800388c:	4b36      	ldr	r3, [pc, #216]	; (8003968 <xTaskRemoveFromEventList+0x19c>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4313      	orrs	r3, r2
 8003892:	4a35      	ldr	r2, [pc, #212]	; (8003968 <xTaskRemoveFromEventList+0x19c>)
 8003894:	6013      	str	r3, [r2, #0]
 8003896:	6a3b      	ldr	r3, [r7, #32]
 8003898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800389a:	4934      	ldr	r1, [pc, #208]	; (800396c <xTaskRemoveFromEventList+0x1a0>)
 800389c:	4613      	mov	r3, r2
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	4413      	add	r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	440b      	add	r3, r1
 80038a6:	3304      	adds	r3, #4
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	613b      	str	r3, [r7, #16]
 80038ac:	6a3b      	ldr	r3, [r7, #32]
 80038ae:	693a      	ldr	r2, [r7, #16]
 80038b0:	609a      	str	r2, [r3, #8]
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	689a      	ldr	r2, [r3, #8]
 80038b6:	6a3b      	ldr	r3, [r7, #32]
 80038b8:	60da      	str	r2, [r3, #12]
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	6a3a      	ldr	r2, [r7, #32]
 80038c0:	3204      	adds	r2, #4
 80038c2:	605a      	str	r2, [r3, #4]
 80038c4:	6a3b      	ldr	r3, [r7, #32]
 80038c6:	1d1a      	adds	r2, r3, #4
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	609a      	str	r2, [r3, #8]
 80038cc:	6a3b      	ldr	r3, [r7, #32]
 80038ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038d0:	4613      	mov	r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	4413      	add	r3, r2
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	4a24      	ldr	r2, [pc, #144]	; (800396c <xTaskRemoveFromEventList+0x1a0>)
 80038da:	441a      	add	r2, r3
 80038dc:	6a3b      	ldr	r3, [r7, #32]
 80038de:	615a      	str	r2, [r3, #20]
 80038e0:	6a3b      	ldr	r3, [r7, #32]
 80038e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038e4:	4921      	ldr	r1, [pc, #132]	; (800396c <xTaskRemoveFromEventList+0x1a0>)
 80038e6:	4613      	mov	r3, r2
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	4413      	add	r3, r2
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	440b      	add	r3, r1
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	1c59      	adds	r1, r3, #1
 80038f4:	481d      	ldr	r0, [pc, #116]	; (800396c <xTaskRemoveFromEventList+0x1a0>)
 80038f6:	4613      	mov	r3, r2
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	4413      	add	r3, r2
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	4403      	add	r3, r0
 8003900:	6019      	str	r1, [r3, #0]
 8003902:	e01b      	b.n	800393c <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003904:	4b1a      	ldr	r3, [pc, #104]	; (8003970 <xTaskRemoveFromEventList+0x1a4>)
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	61bb      	str	r3, [r7, #24]
 800390a:	6a3b      	ldr	r3, [r7, #32]
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	61da      	str	r2, [r3, #28]
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	689a      	ldr	r2, [r3, #8]
 8003914:	6a3b      	ldr	r3, [r7, #32]
 8003916:	621a      	str	r2, [r3, #32]
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	6a3a      	ldr	r2, [r7, #32]
 800391e:	3218      	adds	r2, #24
 8003920:	605a      	str	r2, [r3, #4]
 8003922:	6a3b      	ldr	r3, [r7, #32]
 8003924:	f103 0218 	add.w	r2, r3, #24
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	609a      	str	r2, [r3, #8]
 800392c:	6a3b      	ldr	r3, [r7, #32]
 800392e:	4a10      	ldr	r2, [pc, #64]	; (8003970 <xTaskRemoveFromEventList+0x1a4>)
 8003930:	629a      	str	r2, [r3, #40]	; 0x28
 8003932:	4b0f      	ldr	r3, [pc, #60]	; (8003970 <xTaskRemoveFromEventList+0x1a4>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	3301      	adds	r3, #1
 8003938:	4a0d      	ldr	r2, [pc, #52]	; (8003970 <xTaskRemoveFromEventList+0x1a4>)
 800393a:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800393c:	6a3b      	ldr	r3, [r7, #32]
 800393e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003940:	4b0c      	ldr	r3, [pc, #48]	; (8003974 <xTaskRemoveFromEventList+0x1a8>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003946:	429a      	cmp	r2, r3
 8003948:	d905      	bls.n	8003956 <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800394a:	2301      	movs	r3, #1
 800394c:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800394e:	4b0a      	ldr	r3, [pc, #40]	; (8003978 <xTaskRemoveFromEventList+0x1ac>)
 8003950:	2201      	movs	r2, #1
 8003952:	601a      	str	r2, [r3, #0]
 8003954:	e001      	b.n	800395a <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 8003956:	2300      	movs	r3, #0
 8003958:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 800395a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800395c:	4618      	mov	r0, r3
 800395e:	3728      	adds	r7, #40	; 0x28
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}
 8003964:	20000220 	.word	0x20000220
 8003968:	20000200 	.word	0x20000200
 800396c:	20000124 	.word	0x20000124
 8003970:	200001b8 	.word	0x200001b8
 8003974:	20000120 	.word	0x20000120
 8003978:	2000020c 	.word	0x2000020c

0800397c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003984:	4b06      	ldr	r3, [pc, #24]	; (80039a0 <vTaskInternalSetTimeOutState+0x24>)
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800398c:	4b05      	ldr	r3, [pc, #20]	; (80039a4 <vTaskInternalSetTimeOutState+0x28>)
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	605a      	str	r2, [r3, #4]
}
 8003994:	bf00      	nop
 8003996:	370c      	adds	r7, #12
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr
 80039a0:	20000210 	.word	0x20000210
 80039a4:	200001fc 	.word	0x200001fc

080039a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b088      	sub	sp, #32
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d10a      	bne.n	80039ce <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80039b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039bc:	f383 8811 	msr	BASEPRI, r3
 80039c0:	f3bf 8f6f 	isb	sy
 80039c4:	f3bf 8f4f 	dsb	sy
 80039c8:	613b      	str	r3, [r7, #16]
    }
 80039ca:	bf00      	nop
 80039cc:	e7fe      	b.n	80039cc <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d10a      	bne.n	80039ea <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80039d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d8:	f383 8811 	msr	BASEPRI, r3
 80039dc:	f3bf 8f6f 	isb	sy
 80039e0:	f3bf 8f4f 	dsb	sy
 80039e4:	60fb      	str	r3, [r7, #12]
    }
 80039e6:	bf00      	nop
 80039e8:	e7fe      	b.n	80039e8 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80039ea:	f000 ff8b 	bl	8004904 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80039ee:	4b1f      	ldr	r3, [pc, #124]	; (8003a6c <xTaskCheckForTimeOut+0xc4>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a06:	d102      	bne.n	8003a0e <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	61fb      	str	r3, [r7, #28]
 8003a0c:	e026      	b.n	8003a5c <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	4b17      	ldr	r3, [pc, #92]	; (8003a70 <xTaskCheckForTimeOut+0xc8>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d00a      	beq.n	8003a30 <xTaskCheckForTimeOut+0x88>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	69ba      	ldr	r2, [r7, #24]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d305      	bcc.n	8003a30 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003a24:	2301      	movs	r3, #1
 8003a26:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	601a      	str	r2, [r3, #0]
 8003a2e:	e015      	b.n	8003a5c <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	697a      	ldr	r2, [r7, #20]
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d20b      	bcs.n	8003a52 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	1ad2      	subs	r2, r2, r3
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f7ff ff98 	bl	800397c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	61fb      	str	r3, [r7, #28]
 8003a50:	e004      	b.n	8003a5c <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	2200      	movs	r2, #0
 8003a56:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003a5c:	f000 ff82 	bl	8004964 <vPortExitCritical>

    return xReturn;
 8003a60:	69fb      	ldr	r3, [r7, #28]
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3720      	adds	r7, #32
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	200001fc 	.word	0x200001fc
 8003a70:	20000210 	.word	0x20000210

08003a74 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003a74:	b480      	push	{r7}
 8003a76:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003a78:	4b03      	ldr	r3, [pc, #12]	; (8003a88 <vTaskMissedYield+0x14>)
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	601a      	str	r2, [r3, #0]
}
 8003a7e:	bf00      	nop
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr
 8003a88:	2000020c 	.word	0x2000020c

08003a8c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003a94:	f000 f852 	bl	8003b3c <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003a98:	4b06      	ldr	r3, [pc, #24]	; (8003ab4 <prvIdleTask+0x28>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d9f9      	bls.n	8003a94 <prvIdleTask+0x8>
            {
                taskYIELD();
 8003aa0:	4b05      	ldr	r3, [pc, #20]	; (8003ab8 <prvIdleTask+0x2c>)
 8003aa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aa6:	601a      	str	r2, [r3, #0]
 8003aa8:	f3bf 8f4f 	dsb	sy
 8003aac:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003ab0:	e7f0      	b.n	8003a94 <prvIdleTask+0x8>
 8003ab2:	bf00      	nop
 8003ab4:	20000124 	.word	0x20000124
 8003ab8:	e000ed04 	.word	0xe000ed04

08003abc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	607b      	str	r3, [r7, #4]
 8003ac6:	e00c      	b.n	8003ae2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	4613      	mov	r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	4413      	add	r3, r2
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	4a12      	ldr	r2, [pc, #72]	; (8003b1c <prvInitialiseTaskLists+0x60>)
 8003ad4:	4413      	add	r3, r2
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7fe fd2c 	bl	8002534 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	3301      	adds	r3, #1
 8003ae0:	607b      	str	r3, [r7, #4]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2b04      	cmp	r3, #4
 8003ae6:	d9ef      	bls.n	8003ac8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003ae8:	480d      	ldr	r0, [pc, #52]	; (8003b20 <prvInitialiseTaskLists+0x64>)
 8003aea:	f7fe fd23 	bl	8002534 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003aee:	480d      	ldr	r0, [pc, #52]	; (8003b24 <prvInitialiseTaskLists+0x68>)
 8003af0:	f7fe fd20 	bl	8002534 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003af4:	480c      	ldr	r0, [pc, #48]	; (8003b28 <prvInitialiseTaskLists+0x6c>)
 8003af6:	f7fe fd1d 	bl	8002534 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003afa:	480c      	ldr	r0, [pc, #48]	; (8003b2c <prvInitialiseTaskLists+0x70>)
 8003afc:	f7fe fd1a 	bl	8002534 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003b00:	480b      	ldr	r0, [pc, #44]	; (8003b30 <prvInitialiseTaskLists+0x74>)
 8003b02:	f7fe fd17 	bl	8002534 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003b06:	4b0b      	ldr	r3, [pc, #44]	; (8003b34 <prvInitialiseTaskLists+0x78>)
 8003b08:	4a05      	ldr	r2, [pc, #20]	; (8003b20 <prvInitialiseTaskLists+0x64>)
 8003b0a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003b0c:	4b0a      	ldr	r3, [pc, #40]	; (8003b38 <prvInitialiseTaskLists+0x7c>)
 8003b0e:	4a05      	ldr	r2, [pc, #20]	; (8003b24 <prvInitialiseTaskLists+0x68>)
 8003b10:	601a      	str	r2, [r3, #0]
}
 8003b12:	bf00      	nop
 8003b14:	3708      	adds	r7, #8
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	20000124 	.word	0x20000124
 8003b20:	20000188 	.word	0x20000188
 8003b24:	2000019c 	.word	0x2000019c
 8003b28:	200001b8 	.word	0x200001b8
 8003b2c:	200001cc 	.word	0x200001cc
 8003b30:	200001e4 	.word	0x200001e4
 8003b34:	200001b0 	.word	0x200001b0
 8003b38:	200001b4 	.word	0x200001b4

08003b3c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b42:	e019      	b.n	8003b78 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8003b44:	f000 fede 	bl	8004904 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b48:	4b10      	ldr	r3, [pc, #64]	; (8003b8c <prvCheckTasksWaitingTermination+0x50>)
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	3304      	adds	r3, #4
 8003b54:	4618      	mov	r0, r3
 8003b56:	f7fe fd53 	bl	8002600 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8003b5a:	4b0d      	ldr	r3, [pc, #52]	; (8003b90 <prvCheckTasksWaitingTermination+0x54>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	4a0b      	ldr	r2, [pc, #44]	; (8003b90 <prvCheckTasksWaitingTermination+0x54>)
 8003b62:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8003b64:	4b0b      	ldr	r3, [pc, #44]	; (8003b94 <prvCheckTasksWaitingTermination+0x58>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	4a0a      	ldr	r2, [pc, #40]	; (8003b94 <prvCheckTasksWaitingTermination+0x58>)
 8003b6c:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8003b6e:	f000 fef9 	bl	8004964 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 f810 	bl	8003b98 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b78:	4b06      	ldr	r3, [pc, #24]	; (8003b94 <prvCheckTasksWaitingTermination+0x58>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d1e1      	bne.n	8003b44 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003b80:	bf00      	nop
 8003b82:	bf00      	nop
 8003b84:	3708      	adds	r7, #8
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	200001cc 	.word	0x200001cc
 8003b90:	200001f8 	.word	0x200001f8
 8003b94:	200001e0 	.word	0x200001e0

08003b98 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f001 f893 	bl	8004cd0 <vPortFree>
            vPortFree( pxTCB );
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f001 f890 	bl	8004cd0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003bb0:	bf00      	nop
 8003bb2:	3708      	adds	r7, #8
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003bb8:	b480      	push	{r7}
 8003bba:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003bbc:	4b0a      	ldr	r3, [pc, #40]	; (8003be8 <prvResetNextTaskUnblockTime+0x30>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d104      	bne.n	8003bd0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003bc6:	4b09      	ldr	r3, [pc, #36]	; (8003bec <prvResetNextTaskUnblockTime+0x34>)
 8003bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8003bcc:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003bce:	e005      	b.n	8003bdc <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003bd0:	4b05      	ldr	r3, [pc, #20]	; (8003be8 <prvResetNextTaskUnblockTime+0x30>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a04      	ldr	r2, [pc, #16]	; (8003bec <prvResetNextTaskUnblockTime+0x34>)
 8003bda:	6013      	str	r3, [r2, #0]
}
 8003bdc:	bf00      	nop
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop
 8003be8:	200001b0 	.word	0x200001b0
 8003bec:	20000218 	.word	0x20000218

08003bf0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003bf6:	4b0b      	ldr	r3, [pc, #44]	; (8003c24 <xTaskGetSchedulerState+0x34>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d102      	bne.n	8003c04 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	607b      	str	r3, [r7, #4]
 8003c02:	e008      	b.n	8003c16 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c04:	4b08      	ldr	r3, [pc, #32]	; (8003c28 <xTaskGetSchedulerState+0x38>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d102      	bne.n	8003c12 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	607b      	str	r3, [r7, #4]
 8003c10:	e001      	b.n	8003c16 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003c12:	2300      	movs	r3, #0
 8003c14:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003c16:	687b      	ldr	r3, [r7, #4]
    }
 8003c18:	4618      	mov	r0, r3
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr
 8003c24:	20000204 	.word	0x20000204
 8003c28:	20000220 	.word	0x20000220

08003c2c <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b088      	sub	sp, #32
 8003c30:	af02      	add	r7, sp, #8
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	607a      	str	r2, [r7, #4]
 8003c38:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d90a      	bls.n	8003c56 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8003c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c44:	f383 8811 	msr	BASEPRI, r3
 8003c48:	f3bf 8f6f 	isb	sy
 8003c4c:	f3bf 8f4f 	dsb	sy
 8003c50:	613b      	str	r3, [r7, #16]
    }
 8003c52:	bf00      	nop
 8003c54:	e7fe      	b.n	8003c54 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8003c56:	f000 fe55 	bl	8004904 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8003c5a:	4b36      	ldr	r3, [pc, #216]	; (8003d34 <xTaskGenericNotifyWait+0x108>)
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	4413      	add	r3, r2
 8003c62:	335c      	adds	r3, #92	; 0x5c
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d022      	beq.n	8003cb2 <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8003c6c:	4b31      	ldr	r3, [pc, #196]	; (8003d34 <xTaskGenericNotifyWait+0x108>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68fa      	ldr	r2, [r7, #12]
 8003c72:	3214      	adds	r2, #20
 8003c74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003c78:	68ba      	ldr	r2, [r7, #8]
 8003c7a:	43d2      	mvns	r2, r2
 8003c7c:	4011      	ands	r1, r2
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	3214      	adds	r2, #20
 8003c82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8003c86:	4b2b      	ldr	r3, [pc, #172]	; (8003d34 <xTaskGenericNotifyWait+0x108>)
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	4413      	add	r3, r2
 8003c8e:	335c      	adds	r3, #92	; 0x5c
 8003c90:	2201      	movs	r2, #1
 8003c92:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8003c94:	6a3b      	ldr	r3, [r7, #32]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00b      	beq.n	8003cb2 <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003c9a:	2101      	movs	r1, #1
 8003c9c:	6a38      	ldr	r0, [r7, #32]
 8003c9e:	f000 f981 	bl	8003fa4 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8003ca2:	4b25      	ldr	r3, [pc, #148]	; (8003d38 <xTaskGenericNotifyWait+0x10c>)
 8003ca4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ca8:	601a      	str	r2, [r3, #0]
 8003caa:	f3bf 8f4f 	dsb	sy
 8003cae:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003cb2:	f000 fe57 	bl	8004964 <vPortExitCritical>

        taskENTER_CRITICAL();
 8003cb6:	f000 fe25 	bl	8004904 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 8003cba:	683a      	ldr	r2, [r7, #0]
 8003cbc:	6a3b      	ldr	r3, [r7, #32]
 8003cbe:	9300      	str	r3, [sp, #0]
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	68b9      	ldr	r1, [r7, #8]
 8003cc6:	2040      	movs	r0, #64	; 0x40
 8003cc8:	f002 feb2 	bl	8006a30 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d007      	beq.n	8003ce2 <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8003cd2:	4b18      	ldr	r3, [pc, #96]	; (8003d34 <xTaskGenericNotifyWait+0x108>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68fa      	ldr	r2, [r7, #12]
 8003cd8:	3214      	adds	r2, #20
 8003cda:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8003ce2:	4b14      	ldr	r3, [pc, #80]	; (8003d34 <xTaskGenericNotifyWait+0x108>)
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	4413      	add	r3, r2
 8003cea:	335c      	adds	r3, #92	; 0x5c
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d002      	beq.n	8003cfa <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	617b      	str	r3, [r7, #20]
 8003cf8:	e00e      	b.n	8003d18 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8003cfa:	4b0e      	ldr	r3, [pc, #56]	; (8003d34 <xTaskGenericNotifyWait+0x108>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68fa      	ldr	r2, [r7, #12]
 8003d00:	3214      	adds	r2, #20
 8003d02:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	43d2      	mvns	r2, r2
 8003d0a:	4011      	ands	r1, r2
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	3214      	adds	r2, #20
 8003d10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8003d14:	2301      	movs	r3, #1
 8003d16:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8003d18:	4b06      	ldr	r3, [pc, #24]	; (8003d34 <xTaskGenericNotifyWait+0x108>)
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	4413      	add	r3, r2
 8003d20:	335c      	adds	r3, #92	; 0x5c
 8003d22:	2200      	movs	r2, #0
 8003d24:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8003d26:	f000 fe1d 	bl	8004964 <vPortExitCritical>

        return xReturn;
 8003d2a:	697b      	ldr	r3, [r7, #20]
    }
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3718      	adds	r7, #24
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	20000120 	.word	0x20000120
 8003d38:	e000ed04 	.word	0xe000ed04

08003d3c <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b090      	sub	sp, #64	; 0x40
 8003d40:	af02      	add	r7, sp, #8
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]
 8003d48:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	637b      	str	r3, [r7, #52]	; 0x34
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d90a      	bls.n	8003d6a <xTaskGenericNotify+0x2e>
        __asm volatile
 8003d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d58:	f383 8811 	msr	BASEPRI, r3
 8003d5c:	f3bf 8f6f 	isb	sy
 8003d60:	f3bf 8f4f 	dsb	sy
 8003d64:	623b      	str	r3, [r7, #32]
    }
 8003d66:	bf00      	nop
 8003d68:	e7fe      	b.n	8003d68 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d10a      	bne.n	8003d86 <xTaskGenericNotify+0x4a>
        __asm volatile
 8003d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d74:	f383 8811 	msr	BASEPRI, r3
 8003d78:	f3bf 8f6f 	isb	sy
 8003d7c:	f3bf 8f4f 	dsb	sy
 8003d80:	61fb      	str	r3, [r7, #28]
    }
 8003d82:	bf00      	nop
 8003d84:	e7fe      	b.n	8003d84 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	633b      	str	r3, [r7, #48]	; 0x30

        taskENTER_CRITICAL();
 8003d8a:	f000 fdbb 	bl	8004904 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8003d8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d006      	beq.n	8003da2 <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8003d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d96:	68ba      	ldr	r2, [r7, #8]
 8003d98:	3214      	adds	r2, #20
 8003d9a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003d9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003da0:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8003da2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	4413      	add	r3, r2
 8003da8:	335c      	adds	r3, #92	; 0x5c
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8003db0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	4413      	add	r3, r2
 8003db6:	335c      	adds	r3, #92	; 0x5c
 8003db8:	2202      	movs	r2, #2
 8003dba:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8003dbc:	78fb      	ldrb	r3, [r7, #3]
 8003dbe:	2b04      	cmp	r3, #4
 8003dc0:	d83b      	bhi.n	8003e3a <xTaskGenericNotify+0xfe>
 8003dc2:	a201      	add	r2, pc, #4	; (adr r2, 8003dc8 <xTaskGenericNotify+0x8c>)
 8003dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dc8:	08003e59 	.word	0x08003e59
 8003dcc:	08003ddd 	.word	0x08003ddd
 8003dd0:	08003df9 	.word	0x08003df9
 8003dd4:	08003e11 	.word	0x08003e11
 8003dd8:	08003e1f 	.word	0x08003e1f
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8003ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dde:	68ba      	ldr	r2, [r7, #8]
 8003de0:	3214      	adds	r2, #20
 8003de2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	ea42 0103 	orr.w	r1, r2, r3
 8003dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dee:	68ba      	ldr	r2, [r7, #8]
 8003df0:	3214      	adds	r2, #20
 8003df2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003df6:	e032      	b.n	8003e5e <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8003df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dfa:	68ba      	ldr	r2, [r7, #8]
 8003dfc:	3214      	adds	r2, #20
 8003dfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e02:	1c59      	adds	r1, r3, #1
 8003e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e06:	68ba      	ldr	r2, [r7, #8]
 8003e08:	3214      	adds	r2, #20
 8003e0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003e0e:	e026      	b.n	8003e5e <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e12:	68ba      	ldr	r2, [r7, #8]
 8003e14:	3214      	adds	r2, #20
 8003e16:	6879      	ldr	r1, [r7, #4]
 8003e18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003e1c:	e01f      	b.n	8003e5e <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8003e1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d006      	beq.n	8003e34 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e28:	68ba      	ldr	r2, [r7, #8]
 8003e2a:	3214      	adds	r2, #20
 8003e2c:	6879      	ldr	r1, [r7, #4]
 8003e2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8003e32:	e014      	b.n	8003e5e <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 8003e34:	2300      	movs	r3, #0
 8003e36:	637b      	str	r3, [r7, #52]	; 0x34
                    break;
 8003e38:	e011      	b.n	8003e5e <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8003e3a:	4b55      	ldr	r3, [pc, #340]	; (8003f90 <xTaskGenericNotify+0x254>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00c      	beq.n	8003e5c <xTaskGenericNotify+0x120>
        __asm volatile
 8003e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e46:	f383 8811 	msr	BASEPRI, r3
 8003e4a:	f3bf 8f6f 	isb	sy
 8003e4e:	f3bf 8f4f 	dsb	sy
 8003e52:	61bb      	str	r3, [r7, #24]
    }
 8003e54:	bf00      	nop
 8003e56:	e7fe      	b.n	8003e56 <xTaskGenericNotify+0x11a>
                    break;
 8003e58:	bf00      	nop
 8003e5a:	e000      	b.n	8003e5e <xTaskGenericNotify+0x122>

                    break;
 8003e5c:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 8003e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e60:	4618      	mov	r0, r3
 8003e62:	f003 fa9d 	bl	80073a0 <SEGGER_SYSVIEW_ShrinkId>
 8003e66:	4601      	mov	r1, r0
 8003e68:	78fa      	ldrb	r2, [r7, #3]
 8003e6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e6c:	9300      	str	r3, [sp, #0]
 8003e6e:	4613      	mov	r3, r2
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	203e      	movs	r0, #62	; 0x3e
 8003e74:	f002 fddc 	bl	8006a30 <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003e78:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d17f      	bne.n	8003f80 <xTaskGenericNotify+0x244>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e82:	695b      	ldr	r3, [r3, #20]
 8003e84:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e8c:	68d2      	ldr	r2, [r2, #12]
 8003e8e:	609a      	str	r2, [r3, #8]
 8003e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e96:	6892      	ldr	r2, [r2, #8]
 8003e98:	605a      	str	r2, [r3, #4]
 8003e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e9c:	685a      	ldr	r2, [r3, #4]
 8003e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea0:	3304      	adds	r3, #4
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d103      	bne.n	8003eae <xTaskGenericNotify+0x172>
 8003ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea8:	68da      	ldr	r2, [r3, #12]
 8003eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eac:	605a      	str	r2, [r3, #4]
 8003eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	615a      	str	r2, [r3, #20]
 8003eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	1e5a      	subs	r2, r3, #1
 8003eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ebc:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 8003ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f003 fa2b 	bl	800731c <SEGGER_SYSVIEW_OnTaskStartReady>
 8003ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eca:	2201      	movs	r2, #1
 8003ecc:	409a      	lsls	r2, r3
 8003ece:	4b31      	ldr	r3, [pc, #196]	; (8003f94 <xTaskGenericNotify+0x258>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	4a2f      	ldr	r2, [pc, #188]	; (8003f94 <xTaskGenericNotify+0x258>)
 8003ed6:	6013      	str	r3, [r2, #0]
 8003ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003edc:	492e      	ldr	r1, [pc, #184]	; (8003f98 <xTaskGenericNotify+0x25c>)
 8003ede:	4613      	mov	r3, r2
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	4413      	add	r3, r2
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	440b      	add	r3, r1
 8003ee8:	3304      	adds	r3, #4
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	627b      	str	r3, [r7, #36]	; 0x24
 8003eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ef2:	609a      	str	r2, [r3, #8]
 8003ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef6:	689a      	ldr	r2, [r3, #8]
 8003ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003efa:	60da      	str	r2, [r3, #12]
 8003efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f02:	3204      	adds	r2, #4
 8003f04:	605a      	str	r2, [r3, #4]
 8003f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f08:	1d1a      	adds	r2, r3, #4
 8003f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0c:	609a      	str	r2, [r3, #8]
 8003f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f12:	4613      	mov	r3, r2
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	4413      	add	r3, r2
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	4a1f      	ldr	r2, [pc, #124]	; (8003f98 <xTaskGenericNotify+0x25c>)
 8003f1c:	441a      	add	r2, r3
 8003f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f20:	615a      	str	r2, [r3, #20]
 8003f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f26:	491c      	ldr	r1, [pc, #112]	; (8003f98 <xTaskGenericNotify+0x25c>)
 8003f28:	4613      	mov	r3, r2
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	4413      	add	r3, r2
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	440b      	add	r3, r1
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	1c59      	adds	r1, r3, #1
 8003f36:	4818      	ldr	r0, [pc, #96]	; (8003f98 <xTaskGenericNotify+0x25c>)
 8003f38:	4613      	mov	r3, r2
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	4413      	add	r3, r2
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	4403      	add	r3, r0
 8003f42:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8003f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d00a      	beq.n	8003f62 <xTaskGenericNotify+0x226>
        __asm volatile
 8003f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f50:	f383 8811 	msr	BASEPRI, r3
 8003f54:	f3bf 8f6f 	isb	sy
 8003f58:	f3bf 8f4f 	dsb	sy
 8003f5c:	617b      	str	r3, [r7, #20]
    }
 8003f5e:	bf00      	nop
 8003f60:	e7fe      	b.n	8003f60 <xTaskGenericNotify+0x224>
                     * earliest possible time. */
                    prvResetNextTaskUnblockTime();
                }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f66:	4b0d      	ldr	r3, [pc, #52]	; (8003f9c <xTaskGenericNotify+0x260>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d907      	bls.n	8003f80 <xTaskGenericNotify+0x244>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8003f70:	4b0b      	ldr	r3, [pc, #44]	; (8003fa0 <xTaskGenericNotify+0x264>)
 8003f72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f76:	601a      	str	r2, [r3, #0]
 8003f78:	f3bf 8f4f 	dsb	sy
 8003f7c:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003f80:	f000 fcf0 	bl	8004964 <vPortExitCritical>

        return xReturn;
 8003f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8003f86:	4618      	mov	r0, r3
 8003f88:	3738      	adds	r7, #56	; 0x38
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	200001fc 	.word	0x200001fc
 8003f94:	20000200 	.word	0x20000200
 8003f98:	20000124 	.word	0x20000124
 8003f9c:	20000120 	.word	0x20000120
 8003fa0:	e000ed04 	.word	0xe000ed04

08003fa4 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b086      	sub	sp, #24
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003fae:	4b36      	ldr	r3, [pc, #216]	; (8004088 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003fb4:	4b35      	ldr	r3, [pc, #212]	; (800408c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	3304      	adds	r3, #4
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f7fe fb20 	bl	8002600 <uxListRemove>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d10b      	bne.n	8003fde <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003fc6:	4b31      	ldr	r3, [pc, #196]	; (800408c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fcc:	2201      	movs	r2, #1
 8003fce:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd2:	43da      	mvns	r2, r3
 8003fd4:	4b2e      	ldr	r3, [pc, #184]	; (8004090 <prvAddCurrentTaskToDelayedList+0xec>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4013      	ands	r3, r2
 8003fda:	4a2d      	ldr	r2, [pc, #180]	; (8004090 <prvAddCurrentTaskToDelayedList+0xec>)
 8003fdc:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fe4:	d124      	bne.n	8004030 <prvAddCurrentTaskToDelayedList+0x8c>
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d021      	beq.n	8004030 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003fec:	4b29      	ldr	r3, [pc, #164]	; (8004094 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	613b      	str	r3, [r7, #16]
 8003ff2:	4b26      	ldr	r3, [pc, #152]	; (800408c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	693a      	ldr	r2, [r7, #16]
 8003ff8:	609a      	str	r2, [r3, #8]
 8003ffa:	4b24      	ldr	r3, [pc, #144]	; (800408c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	6892      	ldr	r2, [r2, #8]
 8004002:	60da      	str	r2, [r3, #12]
 8004004:	4b21      	ldr	r3, [pc, #132]	; (800408c <prvAddCurrentTaskToDelayedList+0xe8>)
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	3204      	adds	r2, #4
 800400e:	605a      	str	r2, [r3, #4]
 8004010:	4b1e      	ldr	r3, [pc, #120]	; (800408c <prvAddCurrentTaskToDelayedList+0xe8>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	1d1a      	adds	r2, r3, #4
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	609a      	str	r2, [r3, #8]
 800401a:	4b1c      	ldr	r3, [pc, #112]	; (800408c <prvAddCurrentTaskToDelayedList+0xe8>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a1d      	ldr	r2, [pc, #116]	; (8004094 <prvAddCurrentTaskToDelayedList+0xf0>)
 8004020:	615a      	str	r2, [r3, #20]
 8004022:	4b1c      	ldr	r3, [pc, #112]	; (8004094 <prvAddCurrentTaskToDelayedList+0xf0>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	3301      	adds	r3, #1
 8004028:	4a1a      	ldr	r2, [pc, #104]	; (8004094 <prvAddCurrentTaskToDelayedList+0xf0>)
 800402a:	6013      	str	r3, [r2, #0]
 800402c:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800402e:	e026      	b.n	800407e <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8004030:	697a      	ldr	r2, [r7, #20]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4413      	add	r3, r2
 8004036:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004038:	4b14      	ldr	r3, [pc, #80]	; (800408c <prvAddCurrentTaskToDelayedList+0xe8>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8004040:	68fa      	ldr	r2, [r7, #12]
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	429a      	cmp	r2, r3
 8004046:	d209      	bcs.n	800405c <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004048:	4b13      	ldr	r3, [pc, #76]	; (8004098 <prvAddCurrentTaskToDelayedList+0xf4>)
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	4b0f      	ldr	r3, [pc, #60]	; (800408c <prvAddCurrentTaskToDelayedList+0xe8>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	3304      	adds	r3, #4
 8004052:	4619      	mov	r1, r3
 8004054:	4610      	mov	r0, r2
 8004056:	f7fe fa9a 	bl	800258e <vListInsert>
}
 800405a:	e010      	b.n	800407e <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800405c:	4b0f      	ldr	r3, [pc, #60]	; (800409c <prvAddCurrentTaskToDelayedList+0xf8>)
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	4b0a      	ldr	r3, [pc, #40]	; (800408c <prvAddCurrentTaskToDelayedList+0xe8>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	3304      	adds	r3, #4
 8004066:	4619      	mov	r1, r3
 8004068:	4610      	mov	r0, r2
 800406a:	f7fe fa90 	bl	800258e <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800406e:	4b0c      	ldr	r3, [pc, #48]	; (80040a0 <prvAddCurrentTaskToDelayedList+0xfc>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	68fa      	ldr	r2, [r7, #12]
 8004074:	429a      	cmp	r2, r3
 8004076:	d202      	bcs.n	800407e <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8004078:	4a09      	ldr	r2, [pc, #36]	; (80040a0 <prvAddCurrentTaskToDelayedList+0xfc>)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6013      	str	r3, [r2, #0]
}
 800407e:	bf00      	nop
 8004080:	3718      	adds	r7, #24
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	200001fc 	.word	0x200001fc
 800408c:	20000120 	.word	0x20000120
 8004090:	20000200 	.word	0x20000200
 8004094:	200001e4 	.word	0x200001e4
 8004098:	200001b4 	.word	0x200001b4
 800409c:	200001b0 	.word	0x200001b0
 80040a0:	20000218 	.word	0x20000218

080040a4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80040aa:	2300      	movs	r3, #0
 80040ac:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80040ae:	f000 fa47 	bl	8004540 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80040b2:	4b11      	ldr	r3, [pc, #68]	; (80040f8 <xTimerCreateTimerTask+0x54>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00b      	beq.n	80040d2 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 80040ba:	4b10      	ldr	r3, [pc, #64]	; (80040fc <xTimerCreateTimerTask+0x58>)
 80040bc:	9301      	str	r3, [sp, #4]
 80040be:	2302      	movs	r3, #2
 80040c0:	9300      	str	r3, [sp, #0]
 80040c2:	2300      	movs	r3, #0
 80040c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80040c8:	490d      	ldr	r1, [pc, #52]	; (8004100 <xTimerCreateTimerTask+0x5c>)
 80040ca:	480e      	ldr	r0, [pc, #56]	; (8004104 <xTimerCreateTimerTask+0x60>)
 80040cc:	f7fe fdf2 	bl	8002cb4 <xTaskCreate>
 80040d0:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d10a      	bne.n	80040ee <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80040d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040dc:	f383 8811 	msr	BASEPRI, r3
 80040e0:	f3bf 8f6f 	isb	sy
 80040e4:	f3bf 8f4f 	dsb	sy
 80040e8:	603b      	str	r3, [r7, #0]
    }
 80040ea:	bf00      	nop
 80040ec:	e7fe      	b.n	80040ec <xTimerCreateTimerTask+0x48>
        return xReturn;
 80040ee:	687b      	ldr	r3, [r7, #4]
    }
 80040f0:	4618      	mov	r0, r3
 80040f2:	3708      	adds	r7, #8
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	20000254 	.word	0x20000254
 80040fc:	20000258 	.word	0x20000258
 8004100:	0800817c 	.word	0x0800817c
 8004104:	080041ad 	.word	0x080041ad

08004108 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004114:	e008      	b.n	8004128 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	699b      	ldr	r3, [r3, #24]
 800411a:	68ba      	ldr	r2, [r7, #8]
 800411c:	4413      	add	r3, r2
 800411e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6a1b      	ldr	r3, [r3, #32]
 8004124:	68f8      	ldr	r0, [r7, #12]
 8004126:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	699a      	ldr	r2, [r3, #24]
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	18d1      	adds	r1, r2, r3
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	68f8      	ldr	r0, [r7, #12]
 8004136:	f000 f8dd 	bl	80042f4 <prvInsertTimerInActiveList>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d1ea      	bne.n	8004116 <prvReloadTimer+0xe>
        }
    }
 8004140:	bf00      	nop
 8004142:	bf00      	nop
 8004144:	3710      	adds	r7, #16
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
	...

0800414c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004156:	4b14      	ldr	r3, [pc, #80]	; (80041a8 <prvProcessExpiredTimer+0x5c>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	3304      	adds	r3, #4
 8004164:	4618      	mov	r0, r3
 8004166:	f7fe fa4b 	bl	8002600 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004170:	f003 0304 	and.w	r3, r3, #4
 8004174:	2b00      	cmp	r3, #0
 8004176:	d005      	beq.n	8004184 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8004178:	683a      	ldr	r2, [r7, #0]
 800417a:	6879      	ldr	r1, [r7, #4]
 800417c:	68f8      	ldr	r0, [r7, #12]
 800417e:	f7ff ffc3 	bl	8004108 <prvReloadTimer>
 8004182:	e008      	b.n	8004196 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800418a:	f023 0301 	bic.w	r3, r3, #1
 800418e:	b2da      	uxtb	r2, r3
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6a1b      	ldr	r3, [r3, #32]
 800419a:	68f8      	ldr	r0, [r7, #12]
 800419c:	4798      	blx	r3
    }
 800419e:	bf00      	nop
 80041a0:	3710      	adds	r7, #16
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	2000024c 	.word	0x2000024c

080041ac <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80041b4:	f107 0308 	add.w	r3, r7, #8
 80041b8:	4618      	mov	r0, r3
 80041ba:	f000 f857 	bl	800426c <prvGetNextExpireTime>
 80041be:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	4619      	mov	r1, r3
 80041c4:	68f8      	ldr	r0, [r7, #12]
 80041c6:	f000 f803 	bl	80041d0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80041ca:	f000 f8d5 	bl	8004378 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80041ce:	e7f1      	b.n	80041b4 <prvTimerTask+0x8>

080041d0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80041da:	f7fe ffd7 	bl	800318c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80041de:	f107 0308 	add.w	r3, r7, #8
 80041e2:	4618      	mov	r0, r3
 80041e4:	f000 f866 	bl	80042b4 <prvSampleTimeNow>
 80041e8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d130      	bne.n	8004252 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d10a      	bne.n	800420c <prvProcessTimerOrBlockTask+0x3c>
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d806      	bhi.n	800420c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80041fe:	f7fe ffd3 	bl	80031a8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004202:	68f9      	ldr	r1, [r7, #12]
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f7ff ffa1 	bl	800414c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800420a:	e024      	b.n	8004256 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d008      	beq.n	8004224 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004212:	4b13      	ldr	r3, [pc, #76]	; (8004260 <prvProcessTimerOrBlockTask+0x90>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d101      	bne.n	8004220 <prvProcessTimerOrBlockTask+0x50>
 800421c:	2301      	movs	r3, #1
 800421e:	e000      	b.n	8004222 <prvProcessTimerOrBlockTask+0x52>
 8004220:	2300      	movs	r3, #0
 8004222:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004224:	4b0f      	ldr	r3, [pc, #60]	; (8004264 <prvProcessTimerOrBlockTask+0x94>)
 8004226:	6818      	ldr	r0, [r3, #0]
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	683a      	ldr	r2, [r7, #0]
 8004230:	4619      	mov	r1, r3
 8004232:	f7fe fd0b 	bl	8002c4c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004236:	f7fe ffb7 	bl	80031a8 <xTaskResumeAll>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d10a      	bne.n	8004256 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004240:	4b09      	ldr	r3, [pc, #36]	; (8004268 <prvProcessTimerOrBlockTask+0x98>)
 8004242:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004246:	601a      	str	r2, [r3, #0]
 8004248:	f3bf 8f4f 	dsb	sy
 800424c:	f3bf 8f6f 	isb	sy
    }
 8004250:	e001      	b.n	8004256 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004252:	f7fe ffa9 	bl	80031a8 <xTaskResumeAll>
    }
 8004256:	bf00      	nop
 8004258:	3710      	adds	r7, #16
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	20000250 	.word	0x20000250
 8004264:	20000254 	.word	0x20000254
 8004268:	e000ed04 	.word	0xe000ed04

0800426c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800426c:	b480      	push	{r7}
 800426e:	b085      	sub	sp, #20
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004274:	4b0e      	ldr	r3, [pc, #56]	; (80042b0 <prvGetNextExpireTime+0x44>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d101      	bne.n	8004282 <prvGetNextExpireTime+0x16>
 800427e:	2201      	movs	r2, #1
 8004280:	e000      	b.n	8004284 <prvGetNextExpireTime+0x18>
 8004282:	2200      	movs	r2, #0
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d105      	bne.n	800429c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004290:	4b07      	ldr	r3, [pc, #28]	; (80042b0 <prvGetNextExpireTime+0x44>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	60fb      	str	r3, [r7, #12]
 800429a:	e001      	b.n	80042a0 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800429c:	2300      	movs	r3, #0
 800429e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80042a0:	68fb      	ldr	r3, [r7, #12]
    }
 80042a2:	4618      	mov	r0, r3
 80042a4:	3714      	adds	r7, #20
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	2000024c 	.word	0x2000024c

080042b4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80042bc:	f7ff f874 	bl	80033a8 <xTaskGetTickCount>
 80042c0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80042c2:	4b0b      	ldr	r3, [pc, #44]	; (80042f0 <prvSampleTimeNow+0x3c>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68fa      	ldr	r2, [r7, #12]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d205      	bcs.n	80042d8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80042cc:	f000 f912 	bl	80044f4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	601a      	str	r2, [r3, #0]
 80042d6:	e002      	b.n	80042de <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80042de:	4a04      	ldr	r2, [pc, #16]	; (80042f0 <prvSampleTimeNow+0x3c>)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80042e4:	68fb      	ldr	r3, [r7, #12]
    }
 80042e6:	4618      	mov	r0, r3
 80042e8:	3710      	adds	r7, #16
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	2000025c 	.word	0x2000025c

080042f4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b086      	sub	sp, #24
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	607a      	str	r2, [r7, #4]
 8004300:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004302:	2300      	movs	r3, #0
 8004304:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	68ba      	ldr	r2, [r7, #8]
 800430a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	68fa      	ldr	r2, [r7, #12]
 8004310:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004312:	68ba      	ldr	r2, [r7, #8]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	429a      	cmp	r2, r3
 8004318:	d812      	bhi.n	8004340 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	1ad2      	subs	r2, r2, r3
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	699b      	ldr	r3, [r3, #24]
 8004324:	429a      	cmp	r2, r3
 8004326:	d302      	bcc.n	800432e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004328:	2301      	movs	r3, #1
 800432a:	617b      	str	r3, [r7, #20]
 800432c:	e01b      	b.n	8004366 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800432e:	4b10      	ldr	r3, [pc, #64]	; (8004370 <prvInsertTimerInActiveList+0x7c>)
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	3304      	adds	r3, #4
 8004336:	4619      	mov	r1, r3
 8004338:	4610      	mov	r0, r2
 800433a:	f7fe f928 	bl	800258e <vListInsert>
 800433e:	e012      	b.n	8004366 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	429a      	cmp	r2, r3
 8004346:	d206      	bcs.n	8004356 <prvInsertTimerInActiveList+0x62>
 8004348:	68ba      	ldr	r2, [r7, #8]
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	429a      	cmp	r2, r3
 800434e:	d302      	bcc.n	8004356 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004350:	2301      	movs	r3, #1
 8004352:	617b      	str	r3, [r7, #20]
 8004354:	e007      	b.n	8004366 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004356:	4b07      	ldr	r3, [pc, #28]	; (8004374 <prvInsertTimerInActiveList+0x80>)
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	3304      	adds	r3, #4
 800435e:	4619      	mov	r1, r3
 8004360:	4610      	mov	r0, r2
 8004362:	f7fe f914 	bl	800258e <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004366:	697b      	ldr	r3, [r7, #20]
    }
 8004368:	4618      	mov	r0, r3
 800436a:	3718      	adds	r7, #24
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}
 8004370:	20000250 	.word	0x20000250
 8004374:	2000024c 	.word	0x2000024c

08004378 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004378:	b580      	push	{r7, lr}
 800437a:	b088      	sub	sp, #32
 800437c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800437e:	e0a6      	b.n	80044ce <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	2b00      	cmp	r3, #0
 8004384:	f2c0 80a3 	blt.w	80044ce <prvProcessReceivedCommands+0x156>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	695b      	ldr	r3, [r3, #20]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d004      	beq.n	800439e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	3304      	adds	r3, #4
 8004398:	4618      	mov	r0, r3
 800439a:	f7fe f931 	bl	8002600 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800439e:	1d3b      	adds	r3, r7, #4
 80043a0:	4618      	mov	r0, r3
 80043a2:	f7ff ff87 	bl	80042b4 <prvSampleTimeNow>
 80043a6:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	3b01      	subs	r3, #1
 80043ac:	2b08      	cmp	r3, #8
 80043ae:	f200 808d 	bhi.w	80044cc <prvProcessReceivedCommands+0x154>
 80043b2:	a201      	add	r2, pc, #4	; (adr r2, 80043b8 <prvProcessReceivedCommands+0x40>)
 80043b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043b8:	080043dd 	.word	0x080043dd
 80043bc:	080043dd 	.word	0x080043dd
 80043c0:	08004445 	.word	0x08004445
 80043c4:	08004459 	.word	0x08004459
 80043c8:	080044a3 	.word	0x080044a3
 80043cc:	080043dd 	.word	0x080043dd
 80043d0:	080043dd 	.word	0x080043dd
 80043d4:	08004445 	.word	0x08004445
 80043d8:	08004459 	.word	0x08004459
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043e2:	f043 0301 	orr.w	r3, r3, #1
 80043e6:	b2da      	uxtb	r2, r3
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80043ee:	68fa      	ldr	r2, [r7, #12]
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	699b      	ldr	r3, [r3, #24]
 80043f4:	18d1      	adds	r1, r2, r3
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	69ba      	ldr	r2, [r7, #24]
 80043fa:	69f8      	ldr	r0, [r7, #28]
 80043fc:	f7ff ff7a 	bl	80042f4 <prvInsertTimerInActiveList>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d063      	beq.n	80044ce <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800440c:	f003 0304 	and.w	r3, r3, #4
 8004410:	2b00      	cmp	r3, #0
 8004412:	d009      	beq.n	8004428 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8004414:	68fa      	ldr	r2, [r7, #12]
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	4413      	add	r3, r2
 800441c:	69ba      	ldr	r2, [r7, #24]
 800441e:	4619      	mov	r1, r3
 8004420:	69f8      	ldr	r0, [r7, #28]
 8004422:	f7ff fe71 	bl	8004108 <prvReloadTimer>
 8004426:	e008      	b.n	800443a <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800442e:	f023 0301 	bic.w	r3, r3, #1
 8004432:	b2da      	uxtb	r2, r3
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	6a1b      	ldr	r3, [r3, #32]
 800443e:	69f8      	ldr	r0, [r7, #28]
 8004440:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8004442:	e044      	b.n	80044ce <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800444a:	f023 0301 	bic.w	r3, r3, #1
 800444e:	b2da      	uxtb	r2, r3
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8004456:	e03a      	b.n	80044ce <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800445e:	f043 0301 	orr.w	r3, r3, #1
 8004462:	b2da      	uxtb	r2, r3
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800446a:	68fa      	ldr	r2, [r7, #12]
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	699b      	ldr	r3, [r3, #24]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d10a      	bne.n	800448e <prvProcessReceivedCommands+0x116>
        __asm volatile
 8004478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800447c:	f383 8811 	msr	BASEPRI, r3
 8004480:	f3bf 8f6f 	isb	sy
 8004484:	f3bf 8f4f 	dsb	sy
 8004488:	617b      	str	r3, [r7, #20]
    }
 800448a:	bf00      	nop
 800448c:	e7fe      	b.n	800448c <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	699a      	ldr	r2, [r3, #24]
 8004492:	69bb      	ldr	r3, [r7, #24]
 8004494:	18d1      	adds	r1, r2, r3
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	69ba      	ldr	r2, [r7, #24]
 800449a:	69f8      	ldr	r0, [r7, #28]
 800449c:	f7ff ff2a 	bl	80042f4 <prvInsertTimerInActiveList>
                        break;
 80044a0:	e015      	b.n	80044ce <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044a8:	f003 0302 	and.w	r3, r3, #2
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d103      	bne.n	80044b8 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 80044b0:	69f8      	ldr	r0, [r7, #28]
 80044b2:	f000 fc0d 	bl	8004cd0 <vPortFree>
 80044b6:	e00a      	b.n	80044ce <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044be:	f023 0301 	bic.w	r3, r3, #1
 80044c2:	b2da      	uxtb	r2, r3
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80044ca:	e000      	b.n	80044ce <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
 80044cc:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80044ce:	4b08      	ldr	r3, [pc, #32]	; (80044f0 <prvProcessReceivedCommands+0x178>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f107 0108 	add.w	r1, r7, #8
 80044d6:	2200      	movs	r2, #0
 80044d8:	4618      	mov	r0, r3
 80044da:	f7fe f9c3 	bl	8002864 <xQueueReceive>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	f47f af4d 	bne.w	8004380 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 80044e6:	bf00      	nop
 80044e8:	bf00      	nop
 80044ea:	3720      	adds	r7, #32
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	20000254 	.word	0x20000254

080044f4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80044fa:	e009      	b.n	8004510 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80044fc:	4b0e      	ldr	r3, [pc, #56]	; (8004538 <prvSwitchTimerLists+0x44>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8004506:	f04f 31ff 	mov.w	r1, #4294967295
 800450a:	6838      	ldr	r0, [r7, #0]
 800450c:	f7ff fe1e 	bl	800414c <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004510:	4b09      	ldr	r3, [pc, #36]	; (8004538 <prvSwitchTimerLists+0x44>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d1f0      	bne.n	80044fc <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800451a:	4b07      	ldr	r3, [pc, #28]	; (8004538 <prvSwitchTimerLists+0x44>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8004520:	4b06      	ldr	r3, [pc, #24]	; (800453c <prvSwitchTimerLists+0x48>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a04      	ldr	r2, [pc, #16]	; (8004538 <prvSwitchTimerLists+0x44>)
 8004526:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004528:	4a04      	ldr	r2, [pc, #16]	; (800453c <prvSwitchTimerLists+0x48>)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6013      	str	r3, [r2, #0]
    }
 800452e:	bf00      	nop
 8004530:	3708      	adds	r7, #8
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop
 8004538:	2000024c 	.word	0x2000024c
 800453c:	20000250 	.word	0x20000250

08004540 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004540:	b580      	push	{r7, lr}
 8004542:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004544:	f000 f9de 	bl	8004904 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004548:	4b12      	ldr	r3, [pc, #72]	; (8004594 <prvCheckForValidListAndQueue+0x54>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d11d      	bne.n	800458c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004550:	4811      	ldr	r0, [pc, #68]	; (8004598 <prvCheckForValidListAndQueue+0x58>)
 8004552:	f7fd ffef 	bl	8002534 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004556:	4811      	ldr	r0, [pc, #68]	; (800459c <prvCheckForValidListAndQueue+0x5c>)
 8004558:	f7fd ffec 	bl	8002534 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800455c:	4b10      	ldr	r3, [pc, #64]	; (80045a0 <prvCheckForValidListAndQueue+0x60>)
 800455e:	4a0e      	ldr	r2, [pc, #56]	; (8004598 <prvCheckForValidListAndQueue+0x58>)
 8004560:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004562:	4b10      	ldr	r3, [pc, #64]	; (80045a4 <prvCheckForValidListAndQueue+0x64>)
 8004564:	4a0d      	ldr	r2, [pc, #52]	; (800459c <prvCheckForValidListAndQueue+0x5c>)
 8004566:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004568:	2200      	movs	r2, #0
 800456a:	210c      	movs	r1, #12
 800456c:	200a      	movs	r0, #10
 800456e:	f7fe f901 	bl	8002774 <xQueueGenericCreate>
 8004572:	4603      	mov	r3, r0
 8004574:	4a07      	ldr	r2, [pc, #28]	; (8004594 <prvCheckForValidListAndQueue+0x54>)
 8004576:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8004578:	4b06      	ldr	r3, [pc, #24]	; (8004594 <prvCheckForValidListAndQueue+0x54>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d005      	beq.n	800458c <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004580:	4b04      	ldr	r3, [pc, #16]	; (8004594 <prvCheckForValidListAndQueue+0x54>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4908      	ldr	r1, [pc, #32]	; (80045a8 <prvCheckForValidListAndQueue+0x68>)
 8004586:	4618      	mov	r0, r3
 8004588:	f7fe fb0a 	bl	8002ba0 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800458c:	f000 f9ea 	bl	8004964 <vPortExitCritical>
    }
 8004590:	bf00      	nop
 8004592:	bd80      	pop	{r7, pc}
 8004594:	20000254 	.word	0x20000254
 8004598:	20000224 	.word	0x20000224
 800459c:	20000238 	.word	0x20000238
 80045a0:	2000024c 	.word	0x2000024c
 80045a4:	20000250 	.word	0x20000250
 80045a8:	08008184 	.word	0x08008184

080045ac <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80045ac:	b480      	push	{r7}
 80045ae:	b085      	sub	sp, #20
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	3b04      	subs	r3, #4
 80045bc:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80045c4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	3b04      	subs	r3, #4
 80045ca:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	f023 0201 	bic.w	r2, r3, #1
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	3b04      	subs	r3, #4
 80045da:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80045dc:	4a0c      	ldr	r2, [pc, #48]	; (8004610 <pxPortInitialiseStack+0x64>)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	3b14      	subs	r3, #20
 80045e6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	3b04      	subs	r3, #4
 80045f2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f06f 0202 	mvn.w	r2, #2
 80045fa:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	3b20      	subs	r3, #32
 8004600:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004602:	68fb      	ldr	r3, [r7, #12]
}
 8004604:	4618      	mov	r0, r3
 8004606:	3714      	adds	r7, #20
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr
 8004610:	08004615 	.word	0x08004615

08004614 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004614:	b480      	push	{r7}
 8004616:	b085      	sub	sp, #20
 8004618:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800461a:	2300      	movs	r3, #0
 800461c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800461e:	4b12      	ldr	r3, [pc, #72]	; (8004668 <prvTaskExitError+0x54>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004626:	d00a      	beq.n	800463e <prvTaskExitError+0x2a>
        __asm volatile
 8004628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462c:	f383 8811 	msr	BASEPRI, r3
 8004630:	f3bf 8f6f 	isb	sy
 8004634:	f3bf 8f4f 	dsb	sy
 8004638:	60fb      	str	r3, [r7, #12]
    }
 800463a:	bf00      	nop
 800463c:	e7fe      	b.n	800463c <prvTaskExitError+0x28>
        __asm volatile
 800463e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004642:	f383 8811 	msr	BASEPRI, r3
 8004646:	f3bf 8f6f 	isb	sy
 800464a:	f3bf 8f4f 	dsb	sy
 800464e:	60bb      	str	r3, [r7, #8]
    }
 8004650:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004652:	bf00      	nop
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d0fc      	beq.n	8004654 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800465a:	bf00      	nop
 800465c:	bf00      	nop
 800465e:	3714      	adds	r7, #20
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr
 8004668:	20000010 	.word	0x20000010
 800466c:	00000000 	.word	0x00000000

08004670 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004670:	4b07      	ldr	r3, [pc, #28]	; (8004690 <pxCurrentTCBConst2>)
 8004672:	6819      	ldr	r1, [r3, #0]
 8004674:	6808      	ldr	r0, [r1, #0]
 8004676:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800467a:	f380 8809 	msr	PSP, r0
 800467e:	f3bf 8f6f 	isb	sy
 8004682:	f04f 0000 	mov.w	r0, #0
 8004686:	f380 8811 	msr	BASEPRI, r0
 800468a:	4770      	bx	lr
 800468c:	f3af 8000 	nop.w

08004690 <pxCurrentTCBConst2>:
 8004690:	20000120 	.word	0x20000120
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004694:	bf00      	nop
 8004696:	bf00      	nop

08004698 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004698:	4808      	ldr	r0, [pc, #32]	; (80046bc <prvPortStartFirstTask+0x24>)
 800469a:	6800      	ldr	r0, [r0, #0]
 800469c:	6800      	ldr	r0, [r0, #0]
 800469e:	f380 8808 	msr	MSP, r0
 80046a2:	f04f 0000 	mov.w	r0, #0
 80046a6:	f380 8814 	msr	CONTROL, r0
 80046aa:	b662      	cpsie	i
 80046ac:	b661      	cpsie	f
 80046ae:	f3bf 8f4f 	dsb	sy
 80046b2:	f3bf 8f6f 	isb	sy
 80046b6:	df00      	svc	0
 80046b8:	bf00      	nop
 80046ba:	0000      	.short	0x0000
 80046bc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80046c0:	bf00      	nop
 80046c2:	bf00      	nop

080046c4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b086      	sub	sp, #24
 80046c8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80046ca:	4b46      	ldr	r3, [pc, #280]	; (80047e4 <xPortStartScheduler+0x120>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a46      	ldr	r2, [pc, #280]	; (80047e8 <xPortStartScheduler+0x124>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d10a      	bne.n	80046ea <xPortStartScheduler+0x26>
        __asm volatile
 80046d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d8:	f383 8811 	msr	BASEPRI, r3
 80046dc:	f3bf 8f6f 	isb	sy
 80046e0:	f3bf 8f4f 	dsb	sy
 80046e4:	613b      	str	r3, [r7, #16]
    }
 80046e6:	bf00      	nop
 80046e8:	e7fe      	b.n	80046e8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80046ea:	4b3e      	ldr	r3, [pc, #248]	; (80047e4 <xPortStartScheduler+0x120>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a3f      	ldr	r2, [pc, #252]	; (80047ec <xPortStartScheduler+0x128>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d10a      	bne.n	800470a <xPortStartScheduler+0x46>
        __asm volatile
 80046f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f8:	f383 8811 	msr	BASEPRI, r3
 80046fc:	f3bf 8f6f 	isb	sy
 8004700:	f3bf 8f4f 	dsb	sy
 8004704:	60fb      	str	r3, [r7, #12]
    }
 8004706:	bf00      	nop
 8004708:	e7fe      	b.n	8004708 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800470a:	4b39      	ldr	r3, [pc, #228]	; (80047f0 <xPortStartScheduler+0x12c>)
 800470c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	b2db      	uxtb	r3, r3
 8004714:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	22ff      	movs	r2, #255	; 0xff
 800471a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	b2db      	uxtb	r3, r3
 8004722:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004724:	78fb      	ldrb	r3, [r7, #3]
 8004726:	b2db      	uxtb	r3, r3
 8004728:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800472c:	b2da      	uxtb	r2, r3
 800472e:	4b31      	ldr	r3, [pc, #196]	; (80047f4 <xPortStartScheduler+0x130>)
 8004730:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004732:	4b31      	ldr	r3, [pc, #196]	; (80047f8 <xPortStartScheduler+0x134>)
 8004734:	2207      	movs	r2, #7
 8004736:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004738:	e009      	b.n	800474e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 800473a:	4b2f      	ldr	r3, [pc, #188]	; (80047f8 <xPortStartScheduler+0x134>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	3b01      	subs	r3, #1
 8004740:	4a2d      	ldr	r2, [pc, #180]	; (80047f8 <xPortStartScheduler+0x134>)
 8004742:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004744:	78fb      	ldrb	r3, [r7, #3]
 8004746:	b2db      	uxtb	r3, r3
 8004748:	005b      	lsls	r3, r3, #1
 800474a:	b2db      	uxtb	r3, r3
 800474c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800474e:	78fb      	ldrb	r3, [r7, #3]
 8004750:	b2db      	uxtb	r3, r3
 8004752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004756:	2b80      	cmp	r3, #128	; 0x80
 8004758:	d0ef      	beq.n	800473a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800475a:	4b27      	ldr	r3, [pc, #156]	; (80047f8 <xPortStartScheduler+0x134>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f1c3 0307 	rsb	r3, r3, #7
 8004762:	2b04      	cmp	r3, #4
 8004764:	d00a      	beq.n	800477c <xPortStartScheduler+0xb8>
        __asm volatile
 8004766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800476a:	f383 8811 	msr	BASEPRI, r3
 800476e:	f3bf 8f6f 	isb	sy
 8004772:	f3bf 8f4f 	dsb	sy
 8004776:	60bb      	str	r3, [r7, #8]
    }
 8004778:	bf00      	nop
 800477a:	e7fe      	b.n	800477a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800477c:	4b1e      	ldr	r3, [pc, #120]	; (80047f8 <xPortStartScheduler+0x134>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	021b      	lsls	r3, r3, #8
 8004782:	4a1d      	ldr	r2, [pc, #116]	; (80047f8 <xPortStartScheduler+0x134>)
 8004784:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004786:	4b1c      	ldr	r3, [pc, #112]	; (80047f8 <xPortStartScheduler+0x134>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800478e:	4a1a      	ldr	r2, [pc, #104]	; (80047f8 <xPortStartScheduler+0x134>)
 8004790:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	b2da      	uxtb	r2, r3
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800479a:	4b18      	ldr	r3, [pc, #96]	; (80047fc <xPortStartScheduler+0x138>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a17      	ldr	r2, [pc, #92]	; (80047fc <xPortStartScheduler+0x138>)
 80047a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80047a4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80047a6:	4b15      	ldr	r3, [pc, #84]	; (80047fc <xPortStartScheduler+0x138>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a14      	ldr	r2, [pc, #80]	; (80047fc <xPortStartScheduler+0x138>)
 80047ac:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80047b0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80047b2:	f000 f963 	bl	8004a7c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80047b6:	4b12      	ldr	r3, [pc, #72]	; (8004800 <xPortStartScheduler+0x13c>)
 80047b8:	2200      	movs	r2, #0
 80047ba:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80047bc:	f000 f982 	bl	8004ac4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80047c0:	4b10      	ldr	r3, [pc, #64]	; (8004804 <xPortStartScheduler+0x140>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a0f      	ldr	r2, [pc, #60]	; (8004804 <xPortStartScheduler+0x140>)
 80047c6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80047ca:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80047cc:	f7ff ff64 	bl	8004698 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80047d0:	f7fe ff26 	bl	8003620 <vTaskSwitchContext>
    prvTaskExitError();
 80047d4:	f7ff ff1e 	bl	8004614 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3718      	adds	r7, #24
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	e000ed00 	.word	0xe000ed00
 80047e8:	410fc271 	.word	0x410fc271
 80047ec:	410fc270 	.word	0x410fc270
 80047f0:	e000e400 	.word	0xe000e400
 80047f4:	20000260 	.word	0x20000260
 80047f8:	20000264 	.word	0x20000264
 80047fc:	e000ed20 	.word	0xe000ed20
 8004800:	20000010 	.word	0x20000010
 8004804:	e000ef34 	.word	0xe000ef34

08004808 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8004808:	b480      	push	{r7}
 800480a:	b087      	sub	sp, #28
 800480c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800480e:	4b37      	ldr	r3, [pc, #220]	; (80048ec <vInitPrioGroupValue+0xe4>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a37      	ldr	r2, [pc, #220]	; (80048f0 <vInitPrioGroupValue+0xe8>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d10a      	bne.n	800482e <vInitPrioGroupValue+0x26>
        __asm volatile
 8004818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800481c:	f383 8811 	msr	BASEPRI, r3
 8004820:	f3bf 8f6f 	isb	sy
 8004824:	f3bf 8f4f 	dsb	sy
 8004828:	613b      	str	r3, [r7, #16]
    }
 800482a:	bf00      	nop
 800482c:	e7fe      	b.n	800482c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800482e:	4b2f      	ldr	r3, [pc, #188]	; (80048ec <vInitPrioGroupValue+0xe4>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a30      	ldr	r2, [pc, #192]	; (80048f4 <vInitPrioGroupValue+0xec>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d10a      	bne.n	800484e <vInitPrioGroupValue+0x46>
        __asm volatile
 8004838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800483c:	f383 8811 	msr	BASEPRI, r3
 8004840:	f3bf 8f6f 	isb	sy
 8004844:	f3bf 8f4f 	dsb	sy
 8004848:	60fb      	str	r3, [r7, #12]
    }
 800484a:	bf00      	nop
 800484c:	e7fe      	b.n	800484c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800484e:	4b2a      	ldr	r3, [pc, #168]	; (80048f8 <vInitPrioGroupValue+0xf0>)
 8004850:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	b2db      	uxtb	r3, r3
 8004858:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	22ff      	movs	r2, #255	; 0xff
 800485e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	b2db      	uxtb	r3, r3
 8004866:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004868:	78fb      	ldrb	r3, [r7, #3]
 800486a:	b2db      	uxtb	r3, r3
 800486c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004870:	b2da      	uxtb	r2, r3
 8004872:	4b22      	ldr	r3, [pc, #136]	; (80048fc <vInitPrioGroupValue+0xf4>)
 8004874:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004876:	4b22      	ldr	r3, [pc, #136]	; (8004900 <vInitPrioGroupValue+0xf8>)
 8004878:	2207      	movs	r2, #7
 800487a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800487c:	e009      	b.n	8004892 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800487e:	4b20      	ldr	r3, [pc, #128]	; (8004900 <vInitPrioGroupValue+0xf8>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	3b01      	subs	r3, #1
 8004884:	4a1e      	ldr	r2, [pc, #120]	; (8004900 <vInitPrioGroupValue+0xf8>)
 8004886:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004888:	78fb      	ldrb	r3, [r7, #3]
 800488a:	b2db      	uxtb	r3, r3
 800488c:	005b      	lsls	r3, r3, #1
 800488e:	b2db      	uxtb	r3, r3
 8004890:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004892:	78fb      	ldrb	r3, [r7, #3]
 8004894:	b2db      	uxtb	r3, r3
 8004896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800489a:	2b80      	cmp	r3, #128	; 0x80
 800489c:	d0ef      	beq.n	800487e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800489e:	4b18      	ldr	r3, [pc, #96]	; (8004900 <vInitPrioGroupValue+0xf8>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f1c3 0307 	rsb	r3, r3, #7
 80048a6:	2b04      	cmp	r3, #4
 80048a8:	d00a      	beq.n	80048c0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 80048aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ae:	f383 8811 	msr	BASEPRI, r3
 80048b2:	f3bf 8f6f 	isb	sy
 80048b6:	f3bf 8f4f 	dsb	sy
 80048ba:	60bb      	str	r3, [r7, #8]
    }
 80048bc:	bf00      	nop
 80048be:	e7fe      	b.n	80048be <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80048c0:	4b0f      	ldr	r3, [pc, #60]	; (8004900 <vInitPrioGroupValue+0xf8>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	021b      	lsls	r3, r3, #8
 80048c6:	4a0e      	ldr	r2, [pc, #56]	; (8004900 <vInitPrioGroupValue+0xf8>)
 80048c8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80048ca:	4b0d      	ldr	r3, [pc, #52]	; (8004900 <vInitPrioGroupValue+0xf8>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80048d2:	4a0b      	ldr	r2, [pc, #44]	; (8004900 <vInitPrioGroupValue+0xf8>)
 80048d4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	b2da      	uxtb	r2, r3
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80048de:	bf00      	nop
 80048e0:	371c      	adds	r7, #28
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop
 80048ec:	e000ed00 	.word	0xe000ed00
 80048f0:	410fc271 	.word	0x410fc271
 80048f4:	410fc270 	.word	0x410fc270
 80048f8:	e000e400 	.word	0xe000e400
 80048fc:	20000260 	.word	0x20000260
 8004900:	20000264 	.word	0x20000264

08004904 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
        __asm volatile
 800490a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800490e:	f383 8811 	msr	BASEPRI, r3
 8004912:	f3bf 8f6f 	isb	sy
 8004916:	f3bf 8f4f 	dsb	sy
 800491a:	607b      	str	r3, [r7, #4]
    }
 800491c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800491e:	4b0f      	ldr	r3, [pc, #60]	; (800495c <vPortEnterCritical+0x58>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	3301      	adds	r3, #1
 8004924:	4a0d      	ldr	r2, [pc, #52]	; (800495c <vPortEnterCritical+0x58>)
 8004926:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004928:	4b0c      	ldr	r3, [pc, #48]	; (800495c <vPortEnterCritical+0x58>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2b01      	cmp	r3, #1
 800492e:	d10f      	bne.n	8004950 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004930:	4b0b      	ldr	r3, [pc, #44]	; (8004960 <vPortEnterCritical+0x5c>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	b2db      	uxtb	r3, r3
 8004936:	2b00      	cmp	r3, #0
 8004938:	d00a      	beq.n	8004950 <vPortEnterCritical+0x4c>
        __asm volatile
 800493a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800493e:	f383 8811 	msr	BASEPRI, r3
 8004942:	f3bf 8f6f 	isb	sy
 8004946:	f3bf 8f4f 	dsb	sy
 800494a:	603b      	str	r3, [r7, #0]
    }
 800494c:	bf00      	nop
 800494e:	e7fe      	b.n	800494e <vPortEnterCritical+0x4a>
    }
}
 8004950:	bf00      	nop
 8004952:	370c      	adds	r7, #12
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr
 800495c:	20000010 	.word	0x20000010
 8004960:	e000ed04 	.word	0xe000ed04

08004964 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800496a:	4b12      	ldr	r3, [pc, #72]	; (80049b4 <vPortExitCritical+0x50>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d10a      	bne.n	8004988 <vPortExitCritical+0x24>
        __asm volatile
 8004972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004976:	f383 8811 	msr	BASEPRI, r3
 800497a:	f3bf 8f6f 	isb	sy
 800497e:	f3bf 8f4f 	dsb	sy
 8004982:	607b      	str	r3, [r7, #4]
    }
 8004984:	bf00      	nop
 8004986:	e7fe      	b.n	8004986 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004988:	4b0a      	ldr	r3, [pc, #40]	; (80049b4 <vPortExitCritical+0x50>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	3b01      	subs	r3, #1
 800498e:	4a09      	ldr	r2, [pc, #36]	; (80049b4 <vPortExitCritical+0x50>)
 8004990:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004992:	4b08      	ldr	r3, [pc, #32]	; (80049b4 <vPortExitCritical+0x50>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d105      	bne.n	80049a6 <vPortExitCritical+0x42>
 800499a:	2300      	movs	r3, #0
 800499c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80049a4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80049a6:	bf00      	nop
 80049a8:	370c      	adds	r7, #12
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop
 80049b4:	20000010 	.word	0x20000010
	...

080049c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80049c0:	f3ef 8009 	mrs	r0, PSP
 80049c4:	f3bf 8f6f 	isb	sy
 80049c8:	4b15      	ldr	r3, [pc, #84]	; (8004a20 <pxCurrentTCBConst>)
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	f01e 0f10 	tst.w	lr, #16
 80049d0:	bf08      	it	eq
 80049d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80049d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049da:	6010      	str	r0, [r2, #0]
 80049dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80049e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80049e4:	f380 8811 	msr	BASEPRI, r0
 80049e8:	f3bf 8f4f 	dsb	sy
 80049ec:	f3bf 8f6f 	isb	sy
 80049f0:	f7fe fe16 	bl	8003620 <vTaskSwitchContext>
 80049f4:	f04f 0000 	mov.w	r0, #0
 80049f8:	f380 8811 	msr	BASEPRI, r0
 80049fc:	bc09      	pop	{r0, r3}
 80049fe:	6819      	ldr	r1, [r3, #0]
 8004a00:	6808      	ldr	r0, [r1, #0]
 8004a02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a06:	f01e 0f10 	tst.w	lr, #16
 8004a0a:	bf08      	it	eq
 8004a0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004a10:	f380 8809 	msr	PSP, r0
 8004a14:	f3bf 8f6f 	isb	sy
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	f3af 8000 	nop.w

08004a20 <pxCurrentTCBConst>:
 8004a20:	20000120 	.word	0x20000120
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004a24:	bf00      	nop
 8004a26:	bf00      	nop

08004a28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
        __asm volatile
 8004a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a32:	f383 8811 	msr	BASEPRI, r3
 8004a36:	f3bf 8f6f 	isb	sy
 8004a3a:	f3bf 8f4f 	dsb	sy
 8004a3e:	607b      	str	r3, [r7, #4]
    }
 8004a40:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004a42:	f002 fb51 	bl	80070e8 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004a46:	f7fe fcd1 	bl	80033ec <xTaskIncrementTick>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d006      	beq.n	8004a5e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004a50:	f002 fba8 	bl	80071a4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004a54:	4b08      	ldr	r3, [pc, #32]	; (8004a78 <SysTick_Handler+0x50>)
 8004a56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a5a:	601a      	str	r2, [r3, #0]
 8004a5c:	e001      	b.n	8004a62 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8004a5e:	f002 fb85 	bl	800716c <SEGGER_SYSVIEW_RecordExitISR>
 8004a62:	2300      	movs	r3, #0
 8004a64:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	f383 8811 	msr	BASEPRI, r3
    }
 8004a6c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8004a6e:	bf00      	nop
 8004a70:	3708      	adds	r7, #8
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	e000ed04 	.word	0xe000ed04

08004a7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004a80:	4b0b      	ldr	r3, [pc, #44]	; (8004ab0 <vPortSetupTimerInterrupt+0x34>)
 8004a82:	2200      	movs	r2, #0
 8004a84:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004a86:	4b0b      	ldr	r3, [pc, #44]	; (8004ab4 <vPortSetupTimerInterrupt+0x38>)
 8004a88:	2200      	movs	r2, #0
 8004a8a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004a8c:	4b0a      	ldr	r3, [pc, #40]	; (8004ab8 <vPortSetupTimerInterrupt+0x3c>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a0a      	ldr	r2, [pc, #40]	; (8004abc <vPortSetupTimerInterrupt+0x40>)
 8004a92:	fba2 2303 	umull	r2, r3, r2, r3
 8004a96:	099b      	lsrs	r3, r3, #6
 8004a98:	4a09      	ldr	r2, [pc, #36]	; (8004ac0 <vPortSetupTimerInterrupt+0x44>)
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004a9e:	4b04      	ldr	r3, [pc, #16]	; (8004ab0 <vPortSetupTimerInterrupt+0x34>)
 8004aa0:	2207      	movs	r2, #7
 8004aa2:	601a      	str	r2, [r3, #0]
}
 8004aa4:	bf00      	nop
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr
 8004aae:	bf00      	nop
 8004ab0:	e000e010 	.word	0xe000e010
 8004ab4:	e000e018 	.word	0xe000e018
 8004ab8:	20000000 	.word	0x20000000
 8004abc:	10624dd3 	.word	0x10624dd3
 8004ac0:	e000e014 	.word	0xe000e014

08004ac4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004ac4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004ad4 <vPortEnableVFP+0x10>
 8004ac8:	6801      	ldr	r1, [r0, #0]
 8004aca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004ace:	6001      	str	r1, [r0, #0]
 8004ad0:	4770      	bx	lr
 8004ad2:	0000      	.short	0x0000
 8004ad4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004ad8:	bf00      	nop
 8004ada:	bf00      	nop

08004adc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8004adc:	b480      	push	{r7}
 8004ade:	b085      	sub	sp, #20
 8004ae0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004ae2:	f3ef 8305 	mrs	r3, IPSR
 8004ae6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2b0f      	cmp	r3, #15
 8004aec:	d914      	bls.n	8004b18 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004aee:	4a17      	ldr	r2, [pc, #92]	; (8004b4c <vPortValidateInterruptPriority+0x70>)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	4413      	add	r3, r2
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004af8:	4b15      	ldr	r3, [pc, #84]	; (8004b50 <vPortValidateInterruptPriority+0x74>)
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	7afa      	ldrb	r2, [r7, #11]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d20a      	bcs.n	8004b18 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b06:	f383 8811 	msr	BASEPRI, r3
 8004b0a:	f3bf 8f6f 	isb	sy
 8004b0e:	f3bf 8f4f 	dsb	sy
 8004b12:	607b      	str	r3, [r7, #4]
    }
 8004b14:	bf00      	nop
 8004b16:	e7fe      	b.n	8004b16 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004b18:	4b0e      	ldr	r3, [pc, #56]	; (8004b54 <vPortValidateInterruptPriority+0x78>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004b20:	4b0d      	ldr	r3, [pc, #52]	; (8004b58 <vPortValidateInterruptPriority+0x7c>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d90a      	bls.n	8004b3e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b2c:	f383 8811 	msr	BASEPRI, r3
 8004b30:	f3bf 8f6f 	isb	sy
 8004b34:	f3bf 8f4f 	dsb	sy
 8004b38:	603b      	str	r3, [r7, #0]
    }
 8004b3a:	bf00      	nop
 8004b3c:	e7fe      	b.n	8004b3c <vPortValidateInterruptPriority+0x60>
    }
 8004b3e:	bf00      	nop
 8004b40:	3714      	adds	r7, #20
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr
 8004b4a:	bf00      	nop
 8004b4c:	e000e3f0 	.word	0xe000e3f0
 8004b50:	20000260 	.word	0x20000260
 8004b54:	e000ed0c 	.word	0xe000ed0c
 8004b58:	20000264 	.word	0x20000264

08004b5c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b08a      	sub	sp, #40	; 0x28
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004b64:	2300      	movs	r3, #0
 8004b66:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8004b68:	f7fe fb10 	bl	800318c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004b6c:	4b53      	ldr	r3, [pc, #332]	; (8004cbc <pvPortMalloc+0x160>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d101      	bne.n	8004b78 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004b74:	f000 f908 	bl	8004d88 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d012      	beq.n	8004ba4 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8004b7e:	2208      	movs	r2, #8
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f003 0307 	and.w	r3, r3, #7
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	3308      	adds	r3, #8
 8004b8a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	43db      	mvns	r3, r3
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d804      	bhi.n	8004ba0 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	4413      	add	r3, r2
 8004b9c:	607b      	str	r3, [r7, #4]
 8004b9e:	e001      	b.n	8004ba4 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	db70      	blt.n	8004c8c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d06d      	beq.n	8004c8c <pvPortMalloc+0x130>
 8004bb0:	4b43      	ldr	r3, [pc, #268]	; (8004cc0 <pvPortMalloc+0x164>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d868      	bhi.n	8004c8c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004bba:	4b42      	ldr	r3, [pc, #264]	; (8004cc4 <pvPortMalloc+0x168>)
 8004bbc:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004bbe:	4b41      	ldr	r3, [pc, #260]	; (8004cc4 <pvPortMalloc+0x168>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004bc4:	e004      	b.n	8004bd0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8004bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d903      	bls.n	8004be2 <pvPortMalloc+0x86>
 8004bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d1f1      	bne.n	8004bc6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004be2:	4b36      	ldr	r3, [pc, #216]	; (8004cbc <pvPortMalloc+0x160>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d04f      	beq.n	8004c8c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004bec:	6a3b      	ldr	r3, [r7, #32]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	2208      	movs	r2, #8
 8004bf2:	4413      	add	r3, r2
 8004bf4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	6a3b      	ldr	r3, [r7, #32]
 8004bfc:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c00:	685a      	ldr	r2, [r3, #4]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	1ad2      	subs	r2, r2, r3
 8004c06:	2308      	movs	r3, #8
 8004c08:	005b      	lsls	r3, r3, #1
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d91f      	bls.n	8004c4e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004c0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	4413      	add	r3, r2
 8004c14:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	f003 0307 	and.w	r3, r3, #7
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d00a      	beq.n	8004c36 <pvPortMalloc+0xda>
        __asm volatile
 8004c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c24:	f383 8811 	msr	BASEPRI, r3
 8004c28:	f3bf 8f6f 	isb	sy
 8004c2c:	f3bf 8f4f 	dsb	sy
 8004c30:	613b      	str	r3, [r7, #16]
    }
 8004c32:	bf00      	nop
 8004c34:	e7fe      	b.n	8004c34 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c38:	685a      	ldr	r2, [r3, #4]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	1ad2      	subs	r2, r2, r3
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004c48:	6978      	ldr	r0, [r7, #20]
 8004c4a:	f000 f8f9 	bl	8004e40 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004c4e:	4b1c      	ldr	r3, [pc, #112]	; (8004cc0 <pvPortMalloc+0x164>)
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	4a19      	ldr	r2, [pc, #100]	; (8004cc0 <pvPortMalloc+0x164>)
 8004c5a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004c5c:	4b18      	ldr	r3, [pc, #96]	; (8004cc0 <pvPortMalloc+0x164>)
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	4b19      	ldr	r3, [pc, #100]	; (8004cc8 <pvPortMalloc+0x16c>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d203      	bcs.n	8004c70 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004c68:	4b15      	ldr	r3, [pc, #84]	; (8004cc0 <pvPortMalloc+0x164>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a16      	ldr	r2, [pc, #88]	; (8004cc8 <pvPortMalloc+0x16c>)
 8004c6e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8004c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7e:	2200      	movs	r2, #0
 8004c80:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004c82:	4b12      	ldr	r3, [pc, #72]	; (8004ccc <pvPortMalloc+0x170>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	3301      	adds	r3, #1
 8004c88:	4a10      	ldr	r2, [pc, #64]	; (8004ccc <pvPortMalloc+0x170>)
 8004c8a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004c8c:	f7fe fa8c 	bl	80031a8 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c90:	69fb      	ldr	r3, [r7, #28]
 8004c92:	f003 0307 	and.w	r3, r3, #7
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d00a      	beq.n	8004cb0 <pvPortMalloc+0x154>
        __asm volatile
 8004c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c9e:	f383 8811 	msr	BASEPRI, r3
 8004ca2:	f3bf 8f6f 	isb	sy
 8004ca6:	f3bf 8f4f 	dsb	sy
 8004caa:	60fb      	str	r3, [r7, #12]
    }
 8004cac:	bf00      	nop
 8004cae:	e7fe      	b.n	8004cae <pvPortMalloc+0x152>
    return pvReturn;
 8004cb0:	69fb      	ldr	r3, [r7, #28]
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3728      	adds	r7, #40	; 0x28
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	20012e70 	.word	0x20012e70
 8004cc0:	20012e74 	.word	0x20012e74
 8004cc4:	20012e68 	.word	0x20012e68
 8004cc8:	20012e78 	.word	0x20012e78
 8004ccc:	20012e7c 	.word	0x20012e7c

08004cd0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b086      	sub	sp, #24
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d049      	beq.n	8004d76 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004ce2:	2308      	movs	r3, #8
 8004ce4:	425b      	negs	r3, r3
 8004ce6:	697a      	ldr	r2, [r7, #20]
 8004ce8:	4413      	add	r3, r2
 8004cea:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	db0a      	blt.n	8004d0e <vPortFree+0x3e>
        __asm volatile
 8004cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cfc:	f383 8811 	msr	BASEPRI, r3
 8004d00:	f3bf 8f6f 	isb	sy
 8004d04:	f3bf 8f4f 	dsb	sy
 8004d08:	60fb      	str	r3, [r7, #12]
    }
 8004d0a:	bf00      	nop
 8004d0c:	e7fe      	b.n	8004d0c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d00a      	beq.n	8004d2c <vPortFree+0x5c>
        __asm volatile
 8004d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d1a:	f383 8811 	msr	BASEPRI, r3
 8004d1e:	f3bf 8f6f 	isb	sy
 8004d22:	f3bf 8f4f 	dsb	sy
 8004d26:	60bb      	str	r3, [r7, #8]
    }
 8004d28:	bf00      	nop
 8004d2a:	e7fe      	b.n	8004d2a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	0fdb      	lsrs	r3, r3, #31
 8004d32:	f003 0301 	and.w	r3, r3, #1
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d01c      	beq.n	8004d76 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d118      	bne.n	8004d76 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8004d50:	f7fe fa1c 	bl	800318c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	685a      	ldr	r2, [r3, #4]
 8004d58:	4b09      	ldr	r3, [pc, #36]	; (8004d80 <vPortFree+0xb0>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4413      	add	r3, r2
 8004d5e:	4a08      	ldr	r2, [pc, #32]	; (8004d80 <vPortFree+0xb0>)
 8004d60:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004d62:	6938      	ldr	r0, [r7, #16]
 8004d64:	f000 f86c 	bl	8004e40 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004d68:	4b06      	ldr	r3, [pc, #24]	; (8004d84 <vPortFree+0xb4>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	3301      	adds	r3, #1
 8004d6e:	4a05      	ldr	r2, [pc, #20]	; (8004d84 <vPortFree+0xb4>)
 8004d70:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004d72:	f7fe fa19 	bl	80031a8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004d76:	bf00      	nop
 8004d78:	3718      	adds	r7, #24
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	bf00      	nop
 8004d80:	20012e74 	.word	0x20012e74
 8004d84:	20012e80 	.word	0x20012e80

08004d88 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b085      	sub	sp, #20
 8004d8c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004d8e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004d92:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004d94:	4b25      	ldr	r3, [pc, #148]	; (8004e2c <prvHeapInit+0xa4>)
 8004d96:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f003 0307 	and.w	r3, r3, #7
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d00c      	beq.n	8004dbc <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	3307      	adds	r3, #7
 8004da6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f023 0307 	bic.w	r3, r3, #7
 8004dae:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004db0:	68ba      	ldr	r2, [r7, #8]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	4a1d      	ldr	r2, [pc, #116]	; (8004e2c <prvHeapInit+0xa4>)
 8004db8:	4413      	add	r3, r2
 8004dba:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004dc0:	4a1b      	ldr	r2, [pc, #108]	; (8004e30 <prvHeapInit+0xa8>)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004dc6:	4b1a      	ldr	r3, [pc, #104]	; (8004e30 <prvHeapInit+0xa8>)
 8004dc8:	2200      	movs	r2, #0
 8004dca:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	68ba      	ldr	r2, [r7, #8]
 8004dd0:	4413      	add	r3, r2
 8004dd2:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004dd4:	2208      	movs	r2, #8
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	1a9b      	subs	r3, r3, r2
 8004dda:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f023 0307 	bic.w	r3, r3, #7
 8004de2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	4a13      	ldr	r2, [pc, #76]	; (8004e34 <prvHeapInit+0xac>)
 8004de8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004dea:	4b12      	ldr	r3, [pc, #72]	; (8004e34 <prvHeapInit+0xac>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	2200      	movs	r2, #0
 8004df0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004df2:	4b10      	ldr	r3, [pc, #64]	; (8004e34 <prvHeapInit+0xac>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	2200      	movs	r2, #0
 8004df8:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	68fa      	ldr	r2, [r7, #12]
 8004e02:	1ad2      	subs	r2, r2, r3
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004e08:	4b0a      	ldr	r3, [pc, #40]	; (8004e34 <prvHeapInit+0xac>)
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	4a08      	ldr	r2, [pc, #32]	; (8004e38 <prvHeapInit+0xb0>)
 8004e16:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	4a07      	ldr	r2, [pc, #28]	; (8004e3c <prvHeapInit+0xb4>)
 8004e1e:	6013      	str	r3, [r2, #0]
}
 8004e20:	bf00      	nop
 8004e22:	3714      	adds	r7, #20
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr
 8004e2c:	20000268 	.word	0x20000268
 8004e30:	20012e68 	.word	0x20012e68
 8004e34:	20012e70 	.word	0x20012e70
 8004e38:	20012e78 	.word	0x20012e78
 8004e3c:	20012e74 	.word	0x20012e74

08004e40 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004e40:	b480      	push	{r7}
 8004e42:	b085      	sub	sp, #20
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004e48:	4b28      	ldr	r3, [pc, #160]	; (8004eec <prvInsertBlockIntoFreeList+0xac>)
 8004e4a:	60fb      	str	r3, [r7, #12]
 8004e4c:	e002      	b.n	8004e54 <prvInsertBlockIntoFreeList+0x14>
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	60fb      	str	r3, [r7, #12]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d8f7      	bhi.n	8004e4e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	68ba      	ldr	r2, [r7, #8]
 8004e68:	4413      	add	r3, r2
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d108      	bne.n	8004e82 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	685a      	ldr	r2, [r3, #4]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	441a      	add	r2, r3
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	68ba      	ldr	r2, [r7, #8]
 8004e8c:	441a      	add	r2, r3
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d118      	bne.n	8004ec8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	4b15      	ldr	r3, [pc, #84]	; (8004ef0 <prvInsertBlockIntoFreeList+0xb0>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d00d      	beq.n	8004ebe <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	685a      	ldr	r2, [r3, #4]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	441a      	add	r2, r3
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	601a      	str	r2, [r3, #0]
 8004ebc:	e008      	b.n	8004ed0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004ebe:	4b0c      	ldr	r3, [pc, #48]	; (8004ef0 <prvInsertBlockIntoFreeList+0xb0>)
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	601a      	str	r2, [r3, #0]
 8004ec6:	e003      	b.n	8004ed0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004ed0:	68fa      	ldr	r2, [r7, #12]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d002      	beq.n	8004ede <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004ede:	bf00      	nop
 8004ee0:	3714      	adds	r7, #20
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	20012e68 	.word	0x20012e68
 8004ef0:	20012e70 	.word	0x20012e70

08004ef4 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004ef8:	4803      	ldr	r0, [pc, #12]	; (8004f08 <_cbSendSystemDesc+0x14>)
 8004efa:	f002 f89f 	bl	800703c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004efe:	4803      	ldr	r0, [pc, #12]	; (8004f0c <_cbSendSystemDesc+0x18>)
 8004f00:	f002 f89c 	bl	800703c <SEGGER_SYSVIEW_SendSysDesc>
}
 8004f04:	bf00      	nop
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	0800818c 	.word	0x0800818c
 8004f0c:	080081c8 	.word	0x080081c8

08004f10 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004f10:	b580      	push	{r7, lr}
 8004f12:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004f14:	4b06      	ldr	r3, [pc, #24]	; (8004f30 <SEGGER_SYSVIEW_Conf+0x20>)
 8004f16:	6818      	ldr	r0, [r3, #0]
 8004f18:	4b05      	ldr	r3, [pc, #20]	; (8004f30 <SEGGER_SYSVIEW_Conf+0x20>)
 8004f1a:	6819      	ldr	r1, [r3, #0]
 8004f1c:	4b05      	ldr	r3, [pc, #20]	; (8004f34 <SEGGER_SYSVIEW_Conf+0x24>)
 8004f1e:	4a06      	ldr	r2, [pc, #24]	; (8004f38 <SEGGER_SYSVIEW_Conf+0x28>)
 8004f20:	f001 fc08 	bl	8006734 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004f24:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004f28:	f001 fc48 	bl	80067bc <SEGGER_SYSVIEW_SetRAMBase>
}
 8004f2c:	bf00      	nop
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	20000000 	.word	0x20000000
 8004f34:	08004ef5 	.word	0x08004ef5
 8004f38:	08008268 	.word	0x08008268

08004f3c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f3e:	b085      	sub	sp, #20
 8004f40:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004f42:	2300      	movs	r3, #0
 8004f44:	607b      	str	r3, [r7, #4]
 8004f46:	e033      	b.n	8004fb0 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004f48:	491e      	ldr	r1, [pc, #120]	; (8004fc4 <_cbSendTaskList+0x88>)
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	4413      	add	r3, r2
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	440b      	add	r3, r1
 8004f56:	6818      	ldr	r0, [r3, #0]
 8004f58:	491a      	ldr	r1, [pc, #104]	; (8004fc4 <_cbSendTaskList+0x88>)
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	4613      	mov	r3, r2
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	4413      	add	r3, r2
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	440b      	add	r3, r1
 8004f66:	3304      	adds	r3, #4
 8004f68:	6819      	ldr	r1, [r3, #0]
 8004f6a:	4c16      	ldr	r4, [pc, #88]	; (8004fc4 <_cbSendTaskList+0x88>)
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	4613      	mov	r3, r2
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	4413      	add	r3, r2
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	4423      	add	r3, r4
 8004f78:	3308      	adds	r3, #8
 8004f7a:	681c      	ldr	r4, [r3, #0]
 8004f7c:	4d11      	ldr	r5, [pc, #68]	; (8004fc4 <_cbSendTaskList+0x88>)
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	4613      	mov	r3, r2
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	4413      	add	r3, r2
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	442b      	add	r3, r5
 8004f8a:	330c      	adds	r3, #12
 8004f8c:	681d      	ldr	r5, [r3, #0]
 8004f8e:	4e0d      	ldr	r6, [pc, #52]	; (8004fc4 <_cbSendTaskList+0x88>)
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	4613      	mov	r3, r2
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	4413      	add	r3, r2
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	4433      	add	r3, r6
 8004f9c:	3310      	adds	r3, #16
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	9300      	str	r3, [sp, #0]
 8004fa2:	462b      	mov	r3, r5
 8004fa4:	4622      	mov	r2, r4
 8004fa6:	f000 f8bd 	bl	8005124 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	3301      	adds	r3, #1
 8004fae:	607b      	str	r3, [r7, #4]
 8004fb0:	4b05      	ldr	r3, [pc, #20]	; (8004fc8 <_cbSendTaskList+0x8c>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d3c6      	bcc.n	8004f48 <_cbSendTaskList+0xc>
  }
}
 8004fba:	bf00      	nop
 8004fbc:	bf00      	nop
 8004fbe:	370c      	adds	r7, #12
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fc4:	20012e84 	.word	0x20012e84
 8004fc8:	20012f24 	.word	0x20012f24

08004fcc <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004fcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fd0:	b082      	sub	sp, #8
 8004fd2:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004fd4:	f7fe f9f8 	bl	80033c8 <xTaskGetTickCountFromISR>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2200      	movs	r2, #0
 8004fdc:	469a      	mov	sl, r3
 8004fde:	4693      	mov	fp, r2
 8004fe0:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004fe4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004fe8:	4602      	mov	r2, r0
 8004fea:	460b      	mov	r3, r1
 8004fec:	f04f 0a00 	mov.w	sl, #0
 8004ff0:	f04f 0b00 	mov.w	fp, #0
 8004ff4:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004ff8:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004ffc:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8005000:	4652      	mov	r2, sl
 8005002:	465b      	mov	r3, fp
 8005004:	1a14      	subs	r4, r2, r0
 8005006:	eb63 0501 	sbc.w	r5, r3, r1
 800500a:	f04f 0200 	mov.w	r2, #0
 800500e:	f04f 0300 	mov.w	r3, #0
 8005012:	00ab      	lsls	r3, r5, #2
 8005014:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8005018:	00a2      	lsls	r2, r4, #2
 800501a:	4614      	mov	r4, r2
 800501c:	461d      	mov	r5, r3
 800501e:	eb14 0800 	adds.w	r8, r4, r0
 8005022:	eb45 0901 	adc.w	r9, r5, r1
 8005026:	f04f 0200 	mov.w	r2, #0
 800502a:	f04f 0300 	mov.w	r3, #0
 800502e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005032:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005036:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800503a:	4690      	mov	r8, r2
 800503c:	4699      	mov	r9, r3
 800503e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8005042:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8005046:	4610      	mov	r0, r2
 8005048:	4619      	mov	r1, r3
 800504a:	3708      	adds	r7, #8
 800504c:	46bd      	mov	sp, r7
 800504e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08005054 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8005054:	b580      	push	{r7, lr}
 8005056:	b086      	sub	sp, #24
 8005058:	af02      	add	r7, sp, #8
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	607a      	str	r2, [r7, #4]
 8005060:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8005062:	2205      	movs	r2, #5
 8005064:	492b      	ldr	r1, [pc, #172]	; (8005114 <SYSVIEW_AddTask+0xc0>)
 8005066:	68b8      	ldr	r0, [r7, #8]
 8005068:	f002 fb58 	bl	800771c <memcmp>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d04b      	beq.n	800510a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8005072:	4b29      	ldr	r3, [pc, #164]	; (8005118 <SYSVIEW_AddTask+0xc4>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	2b07      	cmp	r3, #7
 8005078:	d903      	bls.n	8005082 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800507a:	4828      	ldr	r0, [pc, #160]	; (800511c <SYSVIEW_AddTask+0xc8>)
 800507c:	f002 fa90 	bl	80075a0 <SEGGER_SYSVIEW_Warn>
    return;
 8005080:	e044      	b.n	800510c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8005082:	4b25      	ldr	r3, [pc, #148]	; (8005118 <SYSVIEW_AddTask+0xc4>)
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	4926      	ldr	r1, [pc, #152]	; (8005120 <SYSVIEW_AddTask+0xcc>)
 8005088:	4613      	mov	r3, r2
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	4413      	add	r3, r2
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	440b      	add	r3, r1
 8005092:	68fa      	ldr	r2, [r7, #12]
 8005094:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8005096:	4b20      	ldr	r3, [pc, #128]	; (8005118 <SYSVIEW_AddTask+0xc4>)
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	4921      	ldr	r1, [pc, #132]	; (8005120 <SYSVIEW_AddTask+0xcc>)
 800509c:	4613      	mov	r3, r2
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	4413      	add	r3, r2
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	440b      	add	r3, r1
 80050a6:	3304      	adds	r3, #4
 80050a8:	68ba      	ldr	r2, [r7, #8]
 80050aa:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80050ac:	4b1a      	ldr	r3, [pc, #104]	; (8005118 <SYSVIEW_AddTask+0xc4>)
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	491b      	ldr	r1, [pc, #108]	; (8005120 <SYSVIEW_AddTask+0xcc>)
 80050b2:	4613      	mov	r3, r2
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	4413      	add	r3, r2
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	440b      	add	r3, r1
 80050bc:	3308      	adds	r3, #8
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80050c2:	4b15      	ldr	r3, [pc, #84]	; (8005118 <SYSVIEW_AddTask+0xc4>)
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	4916      	ldr	r1, [pc, #88]	; (8005120 <SYSVIEW_AddTask+0xcc>)
 80050c8:	4613      	mov	r3, r2
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	4413      	add	r3, r2
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	440b      	add	r3, r1
 80050d2:	330c      	adds	r3, #12
 80050d4:	683a      	ldr	r2, [r7, #0]
 80050d6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80050d8:	4b0f      	ldr	r3, [pc, #60]	; (8005118 <SYSVIEW_AddTask+0xc4>)
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	4910      	ldr	r1, [pc, #64]	; (8005120 <SYSVIEW_AddTask+0xcc>)
 80050de:	4613      	mov	r3, r2
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	4413      	add	r3, r2
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	440b      	add	r3, r1
 80050e8:	3310      	adds	r3, #16
 80050ea:	69ba      	ldr	r2, [r7, #24]
 80050ec:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80050ee:	4b0a      	ldr	r3, [pc, #40]	; (8005118 <SYSVIEW_AddTask+0xc4>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	3301      	adds	r3, #1
 80050f4:	4a08      	ldr	r2, [pc, #32]	; (8005118 <SYSVIEW_AddTask+0xc4>)
 80050f6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	9300      	str	r3, [sp, #0]
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	68b9      	ldr	r1, [r7, #8]
 8005102:	68f8      	ldr	r0, [r7, #12]
 8005104:	f000 f80e 	bl	8005124 <SYSVIEW_SendTaskInfo>
 8005108:	e000      	b.n	800510c <SYSVIEW_AddTask+0xb8>
    return;
 800510a:	bf00      	nop

}
 800510c:	3710      	adds	r7, #16
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop
 8005114:	080081d8 	.word	0x080081d8
 8005118:	20012f24 	.word	0x20012f24
 800511c:	080081e0 	.word	0x080081e0
 8005120:	20012e84 	.word	0x20012e84

08005124 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8005124:	b580      	push	{r7, lr}
 8005126:	b08a      	sub	sp, #40	; 0x28
 8005128:	af00      	add	r7, sp, #0
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	60b9      	str	r1, [r7, #8]
 800512e:	607a      	str	r2, [r7, #4]
 8005130:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8005132:	f107 0314 	add.w	r3, r7, #20
 8005136:	2214      	movs	r2, #20
 8005138:	2100      	movs	r1, #0
 800513a:	4618      	mov	r0, r3
 800513c:	f002 fafe 	bl	800773c <memset>
  TaskInfo.TaskID     = TaskID;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8005150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005152:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8005154:	f107 0314 	add.w	r3, r7, #20
 8005158:	4618      	mov	r0, r3
 800515a:	f001 fe77 	bl	8006e4c <SEGGER_SYSVIEW_SendTaskInfo>
}
 800515e:	bf00      	nop
 8005160:	3728      	adds	r7, #40	; 0x28
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
	...

08005168 <__NVIC_EnableIRQ>:
{
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	4603      	mov	r3, r0
 8005170:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005176:	2b00      	cmp	r3, #0
 8005178:	db0b      	blt.n	8005192 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800517a:	79fb      	ldrb	r3, [r7, #7]
 800517c:	f003 021f 	and.w	r2, r3, #31
 8005180:	4907      	ldr	r1, [pc, #28]	; (80051a0 <__NVIC_EnableIRQ+0x38>)
 8005182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005186:	095b      	lsrs	r3, r3, #5
 8005188:	2001      	movs	r0, #1
 800518a:	fa00 f202 	lsl.w	r2, r0, r2
 800518e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005192:	bf00      	nop
 8005194:	370c      	adds	r7, #12
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr
 800519e:	bf00      	nop
 80051a0:	e000e100 	.word	0xe000e100

080051a4 <__NVIC_SetPriority>:
{
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	4603      	mov	r3, r0
 80051ac:	6039      	str	r1, [r7, #0]
 80051ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	db0a      	blt.n	80051ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	b2da      	uxtb	r2, r3
 80051bc:	490c      	ldr	r1, [pc, #48]	; (80051f0 <__NVIC_SetPriority+0x4c>)
 80051be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051c2:	0112      	lsls	r2, r2, #4
 80051c4:	b2d2      	uxtb	r2, r2
 80051c6:	440b      	add	r3, r1
 80051c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80051cc:	e00a      	b.n	80051e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	b2da      	uxtb	r2, r3
 80051d2:	4908      	ldr	r1, [pc, #32]	; (80051f4 <__NVIC_SetPriority+0x50>)
 80051d4:	79fb      	ldrb	r3, [r7, #7]
 80051d6:	f003 030f 	and.w	r3, r3, #15
 80051da:	3b04      	subs	r3, #4
 80051dc:	0112      	lsls	r2, r2, #4
 80051de:	b2d2      	uxtb	r2, r2
 80051e0:	440b      	add	r3, r1
 80051e2:	761a      	strb	r2, [r3, #24]
}
 80051e4:	bf00      	nop
 80051e6:	370c      	adds	r7, #12
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr
 80051f0:	e000e100 	.word	0xe000e100
 80051f4:	e000ed00 	.word	0xe000ed00

080051f8 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b082      	sub	sp, #8
 80051fc:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 80051fe:	f002 fa2b 	bl	8007658 <SEGGER_SYSVIEW_IsStarted>
 8005202:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d101      	bne.n	800520e <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 800520a:	f001 fca3 	bl	8006b54 <SEGGER_SYSVIEW_Start>
  }
}
 800520e:	bf00      	nop
 8005210:	3708      	adds	r7, #8
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
	...

08005218 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8005218:	b580      	push	{r7, lr}
 800521a:	b082      	sub	sp, #8
 800521c:	af00      	add	r7, sp, #0
 800521e:	4603      	mov	r3, r0
 8005220:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8005222:	4b0c      	ldr	r3, [pc, #48]	; (8005254 <_cbOnUARTRx+0x3c>)
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	2b03      	cmp	r3, #3
 8005228:	d806      	bhi.n	8005238 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 800522a:	4b0a      	ldr	r3, [pc, #40]	; (8005254 <_cbOnUARTRx+0x3c>)
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	3301      	adds	r3, #1
 8005230:	b2da      	uxtb	r2, r3
 8005232:	4b08      	ldr	r3, [pc, #32]	; (8005254 <_cbOnUARTRx+0x3c>)
 8005234:	701a      	strb	r2, [r3, #0]
    goto Done;
 8005236:	e009      	b.n	800524c <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8005238:	f7ff ffde 	bl	80051f8 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 800523c:	4b05      	ldr	r3, [pc, #20]	; (8005254 <_cbOnUARTRx+0x3c>)
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	4618      	mov	r0, r3
 8005242:	1dfb      	adds	r3, r7, #7
 8005244:	2201      	movs	r2, #1
 8005246:	4619      	mov	r1, r3
 8005248:	f000 fb9a 	bl	8005980 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 800524c:	bf00      	nop
}
 800524e:	3708      	adds	r7, #8
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}
 8005254:	20000014 	.word	0x20000014

08005258 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8005258:	b580      	push	{r7, lr}
 800525a:	b084      	sub	sp, #16
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8005260:	4b14      	ldr	r3, [pc, #80]	; (80052b4 <_cbOnUARTTx+0x5c>)
 8005262:	785b      	ldrb	r3, [r3, #1]
 8005264:	2b03      	cmp	r3, #3
 8005266:	d80f      	bhi.n	8005288 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8005268:	4b12      	ldr	r3, [pc, #72]	; (80052b4 <_cbOnUARTTx+0x5c>)
 800526a:	785b      	ldrb	r3, [r3, #1]
 800526c:	461a      	mov	r2, r3
 800526e:	4b12      	ldr	r3, [pc, #72]	; (80052b8 <_cbOnUARTTx+0x60>)
 8005270:	5c9a      	ldrb	r2, [r3, r2]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8005276:	4b0f      	ldr	r3, [pc, #60]	; (80052b4 <_cbOnUARTTx+0x5c>)
 8005278:	785b      	ldrb	r3, [r3, #1]
 800527a:	3301      	adds	r3, #1
 800527c:	b2da      	uxtb	r2, r3
 800527e:	4b0d      	ldr	r3, [pc, #52]	; (80052b4 <_cbOnUARTTx+0x5c>)
 8005280:	705a      	strb	r2, [r3, #1]
    r = 1;
 8005282:	2301      	movs	r3, #1
 8005284:	60fb      	str	r3, [r7, #12]
    goto Done;
 8005286:	e00f      	b.n	80052a8 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8005288:	4b0a      	ldr	r3, [pc, #40]	; (80052b4 <_cbOnUARTTx+0x5c>)
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	2201      	movs	r2, #1
 800528e:	6879      	ldr	r1, [r7, #4]
 8005290:	4618      	mov	r0, r3
 8005292:	f000 fa19 	bl	80056c8 <SEGGER_RTT_ReadUpBufferNoLock>
 8005296:	4603      	mov	r3, r0
 8005298:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2b00      	cmp	r3, #0
 800529e:	da02      	bge.n	80052a6 <_cbOnUARTTx+0x4e>
    r = 0;
 80052a0:	2300      	movs	r3, #0
 80052a2:	60fb      	str	r3, [r7, #12]
 80052a4:	e000      	b.n	80052a8 <_cbOnUARTTx+0x50>
  }
Done:
 80052a6:	bf00      	nop
  return r;
 80052a8:	68fb      	ldr	r3, [r7, #12]
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3710      	adds	r7, #16
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
 80052b2:	bf00      	nop
 80052b4:	20000014 	.word	0x20000014
 80052b8:	08008270 	.word	0x08008270

080052bc <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b082      	sub	sp, #8
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 80052c4:	4a04      	ldr	r2, [pc, #16]	; (80052d8 <SEGGER_UART_init+0x1c>)
 80052c6:	4905      	ldr	r1, [pc, #20]	; (80052dc <SEGGER_UART_init+0x20>)
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f000 f863 	bl	8005394 <HIF_UART_Init>
}
 80052ce:	bf00      	nop
 80052d0:	3708      	adds	r7, #8
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	08005219 	.word	0x08005219
 80052dc:	08005259 	.word	0x08005259

080052e0 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 80052e6:	4b1e      	ldr	r3, [pc, #120]	; (8005360 <USART2_IRQHandler+0x80>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f003 0320 	and.w	r3, r3, #32
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d011      	beq.n	800531a <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 80052f6:	4b1b      	ldr	r3, [pc, #108]	; (8005364 <USART2_IRQHandler+0x84>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f003 030b 	and.w	r3, r3, #11
 8005304:	2b00      	cmp	r3, #0
 8005306:	d108      	bne.n	800531a <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8005308:	4b17      	ldr	r3, [pc, #92]	; (8005368 <USART2_IRQHandler+0x88>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d004      	beq.n	800531a <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8005310:	4b15      	ldr	r3, [pc, #84]	; (8005368 <USART2_IRQHandler+0x88>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	79fa      	ldrb	r2, [r7, #7]
 8005316:	4610      	mov	r0, r2
 8005318:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005320:	2b00      	cmp	r3, #0
 8005322:	d01a      	beq.n	800535a <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8005324:	4b11      	ldr	r3, [pc, #68]	; (800536c <USART2_IRQHandler+0x8c>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d015      	beq.n	8005358 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 800532c:	4b0f      	ldr	r3, [pc, #60]	; (800536c <USART2_IRQHandler+0x8c>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	1dfa      	adds	r2, r7, #7
 8005332:	4610      	mov	r0, r2
 8005334:	4798      	blx	r3
 8005336:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d106      	bne.n	800534c <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 800533e:	4b0c      	ldr	r3, [pc, #48]	; (8005370 <USART2_IRQHandler+0x90>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a0b      	ldr	r2, [pc, #44]	; (8005370 <USART2_IRQHandler+0x90>)
 8005344:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005348:	6013      	str	r3, [r2, #0]
 800534a:	e006      	b.n	800535a <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 800534c:	4b04      	ldr	r3, [pc, #16]	; (8005360 <USART2_IRQHandler+0x80>)
 800534e:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8005350:	79fa      	ldrb	r2, [r7, #7]
 8005352:	4b04      	ldr	r3, [pc, #16]	; (8005364 <USART2_IRQHandler+0x84>)
 8005354:	601a      	str	r2, [r3, #0]
 8005356:	e000      	b.n	800535a <USART2_IRQHandler+0x7a>
      return;
 8005358:	bf00      	nop
    }
  }
}
 800535a:	3710      	adds	r7, #16
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}
 8005360:	40004400 	.word	0x40004400
 8005364:	40004404 	.word	0x40004404
 8005368:	20012f28 	.word	0x20012f28
 800536c:	20012f2c 	.word	0x20012f2c
 8005370:	4000440c 	.word	0x4000440c

08005374 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8005374:	b480      	push	{r7}
 8005376:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8005378:	4b05      	ldr	r3, [pc, #20]	; (8005390 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a04      	ldr	r2, [pc, #16]	; (8005390 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800537e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005382:	6013      	str	r3, [r2, #0]
}
 8005384:	bf00      	nop
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr
 800538e:	bf00      	nop
 8005390:	4000440c 	.word	0x4000440c

08005394 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8005394:	b580      	push	{r7, lr}
 8005396:	b086      	sub	sp, #24
 8005398:	af00      	add	r7, sp, #0
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 80053a0:	4b2e      	ldr	r3, [pc, #184]	; (800545c <HIF_UART_Init+0xc8>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a2d      	ldr	r2, [pc, #180]	; (800545c <HIF_UART_Init+0xc8>)
 80053a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053aa:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 80053ac:	4b2c      	ldr	r3, [pc, #176]	; (8005460 <HIF_UART_Init+0xcc>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a2b      	ldr	r2, [pc, #172]	; (8005460 <HIF_UART_Init+0xcc>)
 80053b2:	f043 0301 	orr.w	r3, r3, #1
 80053b6:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 80053b8:	4b2a      	ldr	r3, [pc, #168]	; (8005464 <HIF_UART_Init+0xd0>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053c4:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 80053cc:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 80053ce:	4a25      	ldr	r2, [pc, #148]	; (8005464 <HIF_UART_Init+0xd0>)
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 80053d4:	4b24      	ldr	r3, [pc, #144]	; (8005468 <HIF_UART_Init+0xd4>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053e0:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80053e8:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 80053ea:	4a1f      	ldr	r2, [pc, #124]	; (8005468 <HIF_UART_Init+0xd4>)
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 80053f0:	4b1e      	ldr	r3, [pc, #120]	; (800546c <HIF_UART_Init+0xd8>)
 80053f2:	f24a 022c 	movw	r2, #41004	; 0xa02c
 80053f6:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 80053f8:	4b1d      	ldr	r3, [pc, #116]	; (8005470 <HIF_UART_Init+0xdc>)
 80053fa:	2200      	movs	r2, #0
 80053fc:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 80053fe:	4b1d      	ldr	r3, [pc, #116]	; (8005474 <HIF_UART_Init+0xe0>)
 8005400:	2280      	movs	r2, #128	; 0x80
 8005402:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	00db      	lsls	r3, r3, #3
 8005408:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 800540a:	4a1b      	ldr	r2, [pc, #108]	; (8005478 <HIF_UART_Init+0xe4>)
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005412:	3301      	adds	r3, #1
 8005414:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	085b      	lsrs	r3, r3, #1
 800541a:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005422:	d302      	bcc.n	800542a <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8005424:	f640 73ff 	movw	r3, #4095	; 0xfff
 8005428:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d004      	beq.n	800543a <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	011b      	lsls	r3, r3, #4
 8005434:	4a11      	ldr	r2, [pc, #68]	; (800547c <HIF_UART_Init+0xe8>)
 8005436:	b29b      	uxth	r3, r3
 8005438:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 800543a:	4a11      	ldr	r2, [pc, #68]	; (8005480 <HIF_UART_Init+0xec>)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8005440:	4a10      	ldr	r2, [pc, #64]	; (8005484 <HIF_UART_Init+0xf0>)
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8005446:	2106      	movs	r1, #6
 8005448:	2026      	movs	r0, #38	; 0x26
 800544a:	f7ff feab 	bl	80051a4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 800544e:	2026      	movs	r0, #38	; 0x26
 8005450:	f7ff fe8a 	bl	8005168 <__NVIC_EnableIRQ>
}
 8005454:	bf00      	nop
 8005456:	3718      	adds	r7, #24
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}
 800545c:	40023840 	.word	0x40023840
 8005460:	40023830 	.word	0x40023830
 8005464:	40020020 	.word	0x40020020
 8005468:	40020000 	.word	0x40020000
 800546c:	4000440c 	.word	0x4000440c
 8005470:	40004410 	.word	0x40004410
 8005474:	40004414 	.word	0x40004414
 8005478:	0501bd00 	.word	0x0501bd00
 800547c:	40004408 	.word	0x40004408
 8005480:	20012f28 	.word	0x20012f28
 8005484:	20012f2c 	.word	0x20012f2c

08005488 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800548e:	4b24      	ldr	r3, [pc, #144]	; (8005520 <_DoInit+0x98>)
 8005490:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2203      	movs	r2, #3
 8005496:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2203      	movs	r2, #3
 800549c:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a20      	ldr	r2, [pc, #128]	; (8005524 <_DoInit+0x9c>)
 80054a2:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a20      	ldr	r2, [pc, #128]	; (8005528 <_DoInit+0xa0>)
 80054a8:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80054b0:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2200      	movs	r2, #0
 80054c2:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a17      	ldr	r2, [pc, #92]	; (8005524 <_DoInit+0x9c>)
 80054c8:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a17      	ldr	r2, [pc, #92]	; (800552c <_DoInit+0xa4>)
 80054ce:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2210      	movs	r2, #16
 80054d4:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	3307      	adds	r3, #7
 80054ec:	4a10      	ldr	r2, [pc, #64]	; (8005530 <_DoInit+0xa8>)
 80054ee:	6810      	ldr	r0, [r2, #0]
 80054f0:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80054f2:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	4a0e      	ldr	r2, [pc, #56]	; (8005534 <_DoInit+0xac>)
 80054fa:	6810      	ldr	r0, [r2, #0]
 80054fc:	6018      	str	r0, [r3, #0]
 80054fe:	8891      	ldrh	r1, [r2, #4]
 8005500:	7992      	ldrb	r2, [r2, #6]
 8005502:	8099      	strh	r1, [r3, #4]
 8005504:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005506:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2220      	movs	r2, #32
 800550e:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005510:	f3bf 8f5f 	dmb	sy
}
 8005514:	bf00      	nop
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr
 8005520:	20012f30 	.word	0x20012f30
 8005524:	08008230 	.word	0x08008230
 8005528:	20012fd8 	.word	0x20012fd8
 800552c:	200133d8 	.word	0x200133d8
 8005530:	0800823c 	.word	0x0800823c
 8005534:	08008240 	.word	0x08008240

08005538 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8005538:	b580      	push	{r7, lr}
 800553a:	b08a      	sub	sp, #40	; 0x28
 800553c:	af00      	add	r7, sp, #0
 800553e:	60f8      	str	r0, [r7, #12]
 8005540:	60b9      	str	r1, [r7, #8]
 8005542:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8005544:	2300      	movs	r3, #0
 8005546:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8005554:	69ba      	ldr	r2, [r7, #24]
 8005556:	69fb      	ldr	r3, [r7, #28]
 8005558:	429a      	cmp	r2, r3
 800555a:	d905      	bls.n	8005568 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 800555c:	69ba      	ldr	r2, [r7, #24]
 800555e:	69fb      	ldr	r3, [r7, #28]
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	3b01      	subs	r3, #1
 8005564:	627b      	str	r3, [r7, #36]	; 0x24
 8005566:	e007      	b.n	8005578 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	689a      	ldr	r2, [r3, #8]
 800556c:	69b9      	ldr	r1, [r7, #24]
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	1acb      	subs	r3, r1, r3
 8005572:	4413      	add	r3, r2
 8005574:	3b01      	subs	r3, #1
 8005576:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	689a      	ldr	r2, [r3, #8]
 800557c:	69fb      	ldr	r3, [r7, #28]
 800557e:	1ad3      	subs	r3, r2, r3
 8005580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005582:	4293      	cmp	r3, r2
 8005584:	bf28      	it	cs
 8005586:	4613      	movcs	r3, r2
 8005588:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800558a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4293      	cmp	r3, r2
 8005590:	bf28      	it	cs
 8005592:	4613      	movcs	r3, r2
 8005594:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	685a      	ldr	r2, [r3, #4]
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	4413      	add	r3, r2
 800559e:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80055a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055a2:	68b9      	ldr	r1, [r7, #8]
 80055a4:	6978      	ldr	r0, [r7, #20]
 80055a6:	f002 f907 	bl	80077b8 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80055aa:	6a3a      	ldr	r2, [r7, #32]
 80055ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ae:	4413      	add	r3, r2
 80055b0:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 80055b2:	68ba      	ldr	r2, [r7, #8]
 80055b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b6:	4413      	add	r3, r2
 80055b8:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055be:	1ad3      	subs	r3, r2, r3
 80055c0:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 80055c2:	69fa      	ldr	r2, [r7, #28]
 80055c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c6:	4413      	add	r3, r2
 80055c8:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	69fa      	ldr	r2, [r7, #28]
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d101      	bne.n	80055d8 <_WriteBlocking+0xa0>
      WrOff = 0u;
 80055d4:	2300      	movs	r3, #0
 80055d6:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80055d8:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	69fa      	ldr	r2, [r7, #28]
 80055e0:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d1b2      	bne.n	800554e <_WriteBlocking+0x16>
  return NumBytesWritten;
 80055e8:	6a3b      	ldr	r3, [r7, #32]
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3728      	adds	r7, #40	; 0x28
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}

080055f2 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80055f2:	b580      	push	{r7, lr}
 80055f4:	b088      	sub	sp, #32
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	60f8      	str	r0, [r7, #12]
 80055fa:	60b9      	str	r1, [r7, #8]
 80055fc:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	689a      	ldr	r2, [r3, #8]
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800560e:	69ba      	ldr	r2, [r7, #24]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	429a      	cmp	r2, r3
 8005614:	d911      	bls.n	800563a <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	685a      	ldr	r2, [r3, #4]
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	4413      	add	r3, r2
 800561e:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	68b9      	ldr	r1, [r7, #8]
 8005624:	6938      	ldr	r0, [r7, #16]
 8005626:	f002 f8c7 	bl	80077b8 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800562a:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 800562e:	69fa      	ldr	r2, [r7, #28]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	441a      	add	r2, r3
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8005638:	e01f      	b.n	800567a <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800563a:	69bb      	ldr	r3, [r7, #24]
 800563c:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	685a      	ldr	r2, [r3, #4]
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	4413      	add	r3, r2
 8005646:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8005648:	697a      	ldr	r2, [r7, #20]
 800564a:	68b9      	ldr	r1, [r7, #8]
 800564c:	6938      	ldr	r0, [r7, #16]
 800564e:	f002 f8b3 	bl	80077b8 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	69bb      	ldr	r3, [r7, #24]
 8005656:	1ad3      	subs	r3, r2, r3
 8005658:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8005660:	68ba      	ldr	r2, [r7, #8]
 8005662:	69bb      	ldr	r3, [r7, #24]
 8005664:	4413      	add	r3, r2
 8005666:	697a      	ldr	r2, [r7, #20]
 8005668:	4619      	mov	r1, r3
 800566a:	6938      	ldr	r0, [r7, #16]
 800566c:	f002 f8a4 	bl	80077b8 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005670:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	697a      	ldr	r2, [r7, #20]
 8005678:	60da      	str	r2, [r3, #12]
}
 800567a:	bf00      	nop
 800567c:	3720      	adds	r7, #32
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}

08005682 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8005682:	b480      	push	{r7}
 8005684:	b087      	sub	sp, #28
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8005696:	693a      	ldr	r2, [r7, #16]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	429a      	cmp	r2, r3
 800569c:	d808      	bhi.n	80056b0 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	689a      	ldr	r2, [r3, #8]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	1ad2      	subs	r2, r2, r3
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	4413      	add	r3, r2
 80056aa:	3b01      	subs	r3, #1
 80056ac:	617b      	str	r3, [r7, #20]
 80056ae:	e004      	b.n	80056ba <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80056b0:	693a      	ldr	r2, [r7, #16]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	3b01      	subs	r3, #1
 80056b8:	617b      	str	r3, [r7, #20]
  }
  return r;
 80056ba:	697b      	ldr	r3, [r7, #20]
}
 80056bc:	4618      	mov	r0, r3
 80056be:	371c      	adds	r7, #28
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b08c      	sub	sp, #48	; 0x30
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	60b9      	str	r1, [r7, #8]
 80056d2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 80056d4:	4b3e      	ldr	r3, [pc, #248]	; (80057d0 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80056d6:	623b      	str	r3, [r7, #32]
 80056d8:	6a3b      	ldr	r3, [r7, #32]
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d101      	bne.n	80056e6 <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 80056e2:	f7ff fed1 	bl	8005488 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	1c5a      	adds	r2, r3, #1
 80056ea:	4613      	mov	r3, r2
 80056ec:	005b      	lsls	r3, r3, #1
 80056ee:	4413      	add	r3, r2
 80056f0:	00db      	lsls	r3, r3, #3
 80056f2:	4a37      	ldr	r2, [pc, #220]	; (80057d0 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80056f4:	4413      	add	r3, r2
 80056f6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	691b      	ldr	r3, [r3, #16]
 8005700:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005708:	2300      	movs	r3, #0
 800570a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800570c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800570e:	69bb      	ldr	r3, [r7, #24]
 8005710:	429a      	cmp	r2, r3
 8005712:	d92b      	bls.n	800576c <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	689a      	ldr	r2, [r3, #8]
 8005718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800571a:	1ad3      	subs	r3, r2, r3
 800571c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800571e:	697a      	ldr	r2, [r7, #20]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	4293      	cmp	r3, r2
 8005724:	bf28      	it	cs
 8005726:	4613      	movcs	r3, r2
 8005728:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800572a:	69fb      	ldr	r3, [r7, #28]
 800572c:	685a      	ldr	r2, [r3, #4]
 800572e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005730:	4413      	add	r3, r2
 8005732:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005734:	697a      	ldr	r2, [r7, #20]
 8005736:	6939      	ldr	r1, [r7, #16]
 8005738:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800573a:	f002 f83d 	bl	80077b8 <memcpy>
    NumBytesRead += NumBytesRem;
 800573e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	4413      	add	r3, r2
 8005744:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005746:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	4413      	add	r3, r2
 800574c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	1ad3      	subs	r3, r2, r3
 8005754:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005756:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	4413      	add	r3, r2
 800575c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800575e:	69fb      	ldr	r3, [r7, #28]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005764:	429a      	cmp	r2, r3
 8005766:	d101      	bne.n	800576c <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8005768:	2300      	movs	r3, #0
 800576a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800576c:	69ba      	ldr	r2, [r7, #24]
 800576e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005774:	697a      	ldr	r2, [r7, #20]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4293      	cmp	r3, r2
 800577a:	bf28      	it	cs
 800577c:	4613      	movcs	r3, r2
 800577e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d019      	beq.n	80057ba <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	685a      	ldr	r2, [r3, #4]
 800578a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800578c:	4413      	add	r3, r2
 800578e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005790:	697a      	ldr	r2, [r7, #20]
 8005792:	6939      	ldr	r1, [r7, #16]
 8005794:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005796:	f002 f80f 	bl	80077b8 <memcpy>
    NumBytesRead += NumBytesRem;
 800579a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	4413      	add	r3, r2
 80057a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80057a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	4413      	add	r3, r2
 80057a8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	1ad3      	subs	r3, r2, r3
 80057b0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80057b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	4413      	add	r3, r2
 80057b8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 80057ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d002      	beq.n	80057c6 <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 80057c0:	69fb      	ldr	r3, [r7, #28]
 80057c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057c4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80057c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3730      	adds	r7, #48	; 0x30
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}
 80057d0:	20012f30 	.word	0x20012f30

080057d4 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b08c      	sub	sp, #48	; 0x30
 80057d8:	af00      	add	r7, sp, #0
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	60b9      	str	r1, [r7, #8]
 80057de:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80057e0:	4b3e      	ldr	r3, [pc, #248]	; (80058dc <SEGGER_RTT_ReadNoLock+0x108>)
 80057e2:	623b      	str	r3, [r7, #32]
 80057e4:	6a3b      	ldr	r3, [r7, #32]
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d101      	bne.n	80057f2 <SEGGER_RTT_ReadNoLock+0x1e>
 80057ee:	f7ff fe4b 	bl	8005488 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80057f2:	68fa      	ldr	r2, [r7, #12]
 80057f4:	4613      	mov	r3, r2
 80057f6:	005b      	lsls	r3, r3, #1
 80057f8:	4413      	add	r3, r2
 80057fa:	00db      	lsls	r3, r3, #3
 80057fc:	3360      	adds	r3, #96	; 0x60
 80057fe:	4a37      	ldr	r2, [pc, #220]	; (80058dc <SEGGER_RTT_ReadNoLock+0x108>)
 8005800:	4413      	add	r3, r2
 8005802:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	691b      	ldr	r3, [r3, #16]
 800580c:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005814:	2300      	movs	r3, #0
 8005816:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005818:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800581a:	69bb      	ldr	r3, [r7, #24]
 800581c:	429a      	cmp	r2, r3
 800581e:	d92b      	bls.n	8005878 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	689a      	ldr	r2, [r3, #8]
 8005824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005826:	1ad3      	subs	r3, r2, r3
 8005828:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800582a:	697a      	ldr	r2, [r7, #20]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	4293      	cmp	r3, r2
 8005830:	bf28      	it	cs
 8005832:	4613      	movcs	r3, r2
 8005834:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	685a      	ldr	r2, [r3, #4]
 800583a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800583c:	4413      	add	r3, r2
 800583e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005840:	697a      	ldr	r2, [r7, #20]
 8005842:	6939      	ldr	r1, [r7, #16]
 8005844:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005846:	f001 ffb7 	bl	80077b8 <memcpy>
    NumBytesRead += NumBytesRem;
 800584a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	4413      	add	r3, r2
 8005850:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005852:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	4413      	add	r3, r2
 8005858:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	1ad3      	subs	r3, r2, r3
 8005860:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005862:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	4413      	add	r3, r2
 8005868:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005870:	429a      	cmp	r2, r3
 8005872:	d101      	bne.n	8005878 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005874:	2300      	movs	r3, #0
 8005876:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005878:	69ba      	ldr	r2, [r7, #24]
 800587a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005880:	697a      	ldr	r2, [r7, #20]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4293      	cmp	r3, r2
 8005886:	bf28      	it	cs
 8005888:	4613      	movcs	r3, r2
 800588a:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d019      	beq.n	80058c6 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005892:	69fb      	ldr	r3, [r7, #28]
 8005894:	685a      	ldr	r2, [r3, #4]
 8005896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005898:	4413      	add	r3, r2
 800589a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800589c:	697a      	ldr	r2, [r7, #20]
 800589e:	6939      	ldr	r1, [r7, #16]
 80058a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80058a2:	f001 ff89 	bl	80077b8 <memcpy>
    NumBytesRead += NumBytesRem;
 80058a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	4413      	add	r3, r2
 80058ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80058ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	4413      	add	r3, r2
 80058b4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	1ad3      	subs	r3, r2, r3
 80058bc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80058be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	4413      	add	r3, r2
 80058c4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80058c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d002      	beq.n	80058d2 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80058cc:	69fb      	ldr	r3, [r7, #28]
 80058ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058d0:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80058d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3730      	adds	r7, #48	; 0x30
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	20012f30 	.word	0x20012f30

080058e0 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b088      	sub	sp, #32
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	60b9      	str	r1, [r7, #8]
 80058ea:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	4613      	mov	r3, r2
 80058f4:	005b      	lsls	r3, r3, #1
 80058f6:	4413      	add	r3, r2
 80058f8:	00db      	lsls	r3, r3, #3
 80058fa:	3360      	adds	r3, #96	; 0x60
 80058fc:	4a1f      	ldr	r2, [pc, #124]	; (800597c <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 80058fe:	4413      	add	r3, r2
 8005900:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	695b      	ldr	r3, [r3, #20]
 8005906:	2b02      	cmp	r3, #2
 8005908:	d029      	beq.n	800595e <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 800590a:	2b02      	cmp	r3, #2
 800590c:	d82e      	bhi.n	800596c <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 800590e:	2b00      	cmp	r3, #0
 8005910:	d002      	beq.n	8005918 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8005912:	2b01      	cmp	r3, #1
 8005914:	d013      	beq.n	800593e <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8005916:	e029      	b.n	800596c <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005918:	6978      	ldr	r0, [r7, #20]
 800591a:	f7ff feb2 	bl	8005682 <_GetAvailWriteSpace>
 800591e:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8005920:	693a      	ldr	r2, [r7, #16]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	429a      	cmp	r2, r3
 8005926:	d202      	bcs.n	800592e <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8005928:	2300      	movs	r3, #0
 800592a:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 800592c:	e021      	b.n	8005972 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	69b9      	ldr	r1, [r7, #24]
 8005936:	6978      	ldr	r0, [r7, #20]
 8005938:	f7ff fe5b 	bl	80055f2 <_WriteNoCheck>
    break;
 800593c:	e019      	b.n	8005972 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800593e:	6978      	ldr	r0, [r7, #20]
 8005940:	f7ff fe9f 	bl	8005682 <_GetAvailWriteSpace>
 8005944:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	4293      	cmp	r3, r2
 800594c:	bf28      	it	cs
 800594e:	4613      	movcs	r3, r2
 8005950:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8005952:	69fa      	ldr	r2, [r7, #28]
 8005954:	69b9      	ldr	r1, [r7, #24]
 8005956:	6978      	ldr	r0, [r7, #20]
 8005958:	f7ff fe4b 	bl	80055f2 <_WriteNoCheck>
    break;
 800595c:	e009      	b.n	8005972 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	69b9      	ldr	r1, [r7, #24]
 8005962:	6978      	ldr	r0, [r7, #20]
 8005964:	f7ff fde8 	bl	8005538 <_WriteBlocking>
 8005968:	61f8      	str	r0, [r7, #28]
    break;
 800596a:	e002      	b.n	8005972 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 800596c:	2300      	movs	r3, #0
 800596e:	61fb      	str	r3, [r7, #28]
    break;
 8005970:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8005972:	69fb      	ldr	r3, [r7, #28]
}
 8005974:	4618      	mov	r0, r3
 8005976:	3720      	adds	r7, #32
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}
 800597c:	20012f30 	.word	0x20012f30

08005980 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005980:	b580      	push	{r7, lr}
 8005982:	b088      	sub	sp, #32
 8005984:	af00      	add	r7, sp, #0
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	60b9      	str	r1, [r7, #8]
 800598a:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 800598c:	4b0e      	ldr	r3, [pc, #56]	; (80059c8 <SEGGER_RTT_WriteDownBuffer+0x48>)
 800598e:	61fb      	str	r3, [r7, #28]
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	b2db      	uxtb	r3, r3
 8005996:	2b00      	cmp	r3, #0
 8005998:	d101      	bne.n	800599e <SEGGER_RTT_WriteDownBuffer+0x1e>
 800599a:	f7ff fd75 	bl	8005488 <_DoInit>
  SEGGER_RTT_LOCK();
 800599e:	f3ef 8311 	mrs	r3, BASEPRI
 80059a2:	f04f 0120 	mov.w	r1, #32
 80059a6:	f381 8811 	msr	BASEPRI, r1
 80059aa:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	68b9      	ldr	r1, [r7, #8]
 80059b0:	68f8      	ldr	r0, [r7, #12]
 80059b2:	f7ff ff95 	bl	80058e0 <SEGGER_RTT_WriteDownBufferNoLock>
 80059b6:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80059b8:	69bb      	ldr	r3, [r7, #24]
 80059ba:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80059be:	697b      	ldr	r3, [r7, #20]
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3720      	adds	r7, #32
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}
 80059c8:	20012f30 	.word	0x20012f30

080059cc <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b088      	sub	sp, #32
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	60f8      	str	r0, [r7, #12]
 80059d4:	60b9      	str	r1, [r7, #8]
 80059d6:	607a      	str	r2, [r7, #4]
 80059d8:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80059da:	4b3d      	ldr	r3, [pc, #244]	; (8005ad0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80059dc:	61bb      	str	r3, [r7, #24]
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d101      	bne.n	80059ec <SEGGER_RTT_AllocUpBuffer+0x20>
 80059e8:	f7ff fd4e 	bl	8005488 <_DoInit>
  SEGGER_RTT_LOCK();
 80059ec:	f3ef 8311 	mrs	r3, BASEPRI
 80059f0:	f04f 0120 	mov.w	r1, #32
 80059f4:	f381 8811 	msr	BASEPRI, r1
 80059f8:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80059fa:	4b35      	ldr	r3, [pc, #212]	; (8005ad0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80059fc:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80059fe:	2300      	movs	r3, #0
 8005a00:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8005a02:	6939      	ldr	r1, [r7, #16]
 8005a04:	69fb      	ldr	r3, [r7, #28]
 8005a06:	1c5a      	adds	r2, r3, #1
 8005a08:	4613      	mov	r3, r2
 8005a0a:	005b      	lsls	r3, r3, #1
 8005a0c:	4413      	add	r3, r2
 8005a0e:	00db      	lsls	r3, r3, #3
 8005a10:	440b      	add	r3, r1
 8005a12:	3304      	adds	r3, #4
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d008      	beq.n	8005a2c <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	3301      	adds	r3, #1
 8005a1e:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	69fa      	ldr	r2, [r7, #28]
 8005a26:	429a      	cmp	r2, r3
 8005a28:	dbeb      	blt.n	8005a02 <SEGGER_RTT_AllocUpBuffer+0x36>
 8005a2a:	e000      	b.n	8005a2e <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005a2c:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	69fa      	ldr	r2, [r7, #28]
 8005a34:	429a      	cmp	r2, r3
 8005a36:	da3f      	bge.n	8005ab8 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005a38:	6939      	ldr	r1, [r7, #16]
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	1c5a      	adds	r2, r3, #1
 8005a3e:	4613      	mov	r3, r2
 8005a40:	005b      	lsls	r3, r3, #1
 8005a42:	4413      	add	r3, r2
 8005a44:	00db      	lsls	r3, r3, #3
 8005a46:	440b      	add	r3, r1
 8005a48:	68fa      	ldr	r2, [r7, #12]
 8005a4a:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005a4c:	6939      	ldr	r1, [r7, #16]
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	1c5a      	adds	r2, r3, #1
 8005a52:	4613      	mov	r3, r2
 8005a54:	005b      	lsls	r3, r3, #1
 8005a56:	4413      	add	r3, r2
 8005a58:	00db      	lsls	r3, r3, #3
 8005a5a:	440b      	add	r3, r1
 8005a5c:	3304      	adds	r3, #4
 8005a5e:	68ba      	ldr	r2, [r7, #8]
 8005a60:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005a62:	6939      	ldr	r1, [r7, #16]
 8005a64:	69fa      	ldr	r2, [r7, #28]
 8005a66:	4613      	mov	r3, r2
 8005a68:	005b      	lsls	r3, r3, #1
 8005a6a:	4413      	add	r3, r2
 8005a6c:	00db      	lsls	r3, r3, #3
 8005a6e:	440b      	add	r3, r1
 8005a70:	3320      	adds	r3, #32
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005a76:	6939      	ldr	r1, [r7, #16]
 8005a78:	69fa      	ldr	r2, [r7, #28]
 8005a7a:	4613      	mov	r3, r2
 8005a7c:	005b      	lsls	r3, r3, #1
 8005a7e:	4413      	add	r3, r2
 8005a80:	00db      	lsls	r3, r3, #3
 8005a82:	440b      	add	r3, r1
 8005a84:	3328      	adds	r3, #40	; 0x28
 8005a86:	2200      	movs	r2, #0
 8005a88:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005a8a:	6939      	ldr	r1, [r7, #16]
 8005a8c:	69fa      	ldr	r2, [r7, #28]
 8005a8e:	4613      	mov	r3, r2
 8005a90:	005b      	lsls	r3, r3, #1
 8005a92:	4413      	add	r3, r2
 8005a94:	00db      	lsls	r3, r3, #3
 8005a96:	440b      	add	r3, r1
 8005a98:	3324      	adds	r3, #36	; 0x24
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005a9e:	6939      	ldr	r1, [r7, #16]
 8005aa0:	69fa      	ldr	r2, [r7, #28]
 8005aa2:	4613      	mov	r3, r2
 8005aa4:	005b      	lsls	r3, r3, #1
 8005aa6:	4413      	add	r3, r2
 8005aa8:	00db      	lsls	r3, r3, #3
 8005aaa:	440b      	add	r3, r1
 8005aac:	332c      	adds	r3, #44	; 0x2c
 8005aae:	683a      	ldr	r2, [r7, #0]
 8005ab0:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005ab2:	f3bf 8f5f 	dmb	sy
 8005ab6:	e002      	b.n	8005abe <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8005abc:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005ac4:	69fb      	ldr	r3, [r7, #28]
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3720      	adds	r7, #32
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
 8005ace:	bf00      	nop
 8005ad0:	20012f30 	.word	0x20012f30

08005ad4 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b088      	sub	sp, #32
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	60b9      	str	r1, [r7, #8]
 8005ade:	607a      	str	r2, [r7, #4]
 8005ae0:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005ae2:	4b33      	ldr	r3, [pc, #204]	; (8005bb0 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005ae4:	61bb      	str	r3, [r7, #24]
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d101      	bne.n	8005af4 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005af0:	f7ff fcca 	bl	8005488 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005af4:	4b2e      	ldr	r3, [pc, #184]	; (8005bb0 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005af6:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	695b      	ldr	r3, [r3, #20]
 8005afc:	461a      	mov	r2, r3
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d24d      	bcs.n	8005ba0 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8005b04:	f3ef 8311 	mrs	r3, BASEPRI
 8005b08:	f04f 0120 	mov.w	r1, #32
 8005b0c:	f381 8811 	msr	BASEPRI, r1
 8005b10:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d031      	beq.n	8005b7c <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8005b18:	6979      	ldr	r1, [r7, #20]
 8005b1a:	68fa      	ldr	r2, [r7, #12]
 8005b1c:	4613      	mov	r3, r2
 8005b1e:	005b      	lsls	r3, r3, #1
 8005b20:	4413      	add	r3, r2
 8005b22:	00db      	lsls	r3, r3, #3
 8005b24:	440b      	add	r3, r1
 8005b26:	3360      	adds	r3, #96	; 0x60
 8005b28:	68ba      	ldr	r2, [r7, #8]
 8005b2a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8005b2c:	6979      	ldr	r1, [r7, #20]
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	4613      	mov	r3, r2
 8005b32:	005b      	lsls	r3, r3, #1
 8005b34:	4413      	add	r3, r2
 8005b36:	00db      	lsls	r3, r3, #3
 8005b38:	440b      	add	r3, r1
 8005b3a:	3364      	adds	r3, #100	; 0x64
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8005b40:	6979      	ldr	r1, [r7, #20]
 8005b42:	68fa      	ldr	r2, [r7, #12]
 8005b44:	4613      	mov	r3, r2
 8005b46:	005b      	lsls	r3, r3, #1
 8005b48:	4413      	add	r3, r2
 8005b4a:	00db      	lsls	r3, r3, #3
 8005b4c:	440b      	add	r3, r1
 8005b4e:	3368      	adds	r3, #104	; 0x68
 8005b50:	683a      	ldr	r2, [r7, #0]
 8005b52:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8005b54:	6979      	ldr	r1, [r7, #20]
 8005b56:	68fa      	ldr	r2, [r7, #12]
 8005b58:	4613      	mov	r3, r2
 8005b5a:	005b      	lsls	r3, r3, #1
 8005b5c:	4413      	add	r3, r2
 8005b5e:	00db      	lsls	r3, r3, #3
 8005b60:	440b      	add	r3, r1
 8005b62:	3370      	adds	r3, #112	; 0x70
 8005b64:	2200      	movs	r2, #0
 8005b66:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8005b68:	6979      	ldr	r1, [r7, #20]
 8005b6a:	68fa      	ldr	r2, [r7, #12]
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	005b      	lsls	r3, r3, #1
 8005b70:	4413      	add	r3, r2
 8005b72:	00db      	lsls	r3, r3, #3
 8005b74:	440b      	add	r3, r1
 8005b76:	336c      	adds	r3, #108	; 0x6c
 8005b78:	2200      	movs	r2, #0
 8005b7a:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8005b7c:	6979      	ldr	r1, [r7, #20]
 8005b7e:	68fa      	ldr	r2, [r7, #12]
 8005b80:	4613      	mov	r3, r2
 8005b82:	005b      	lsls	r3, r3, #1
 8005b84:	4413      	add	r3, r2
 8005b86:	00db      	lsls	r3, r3, #3
 8005b88:	440b      	add	r3, r1
 8005b8a:	3374      	adds	r3, #116	; 0x74
 8005b8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b8e:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005b90:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	61fb      	str	r3, [r7, #28]
 8005b9e:	e002      	b.n	8005ba6 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8005ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8005ba4:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8005ba6:	69fb      	ldr	r3, [r7, #28]
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3720      	adds	r7, #32
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}
 8005bb0:	20012f30 	.word	0x20012f30

08005bb4 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005bb4:	b480      	push	{r7}
 8005bb6:	b087      	sub	sp, #28
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	60b9      	str	r1, [r7, #8]
 8005bbe:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005bc4:	e002      	b.n	8005bcc <_EncodeStr+0x18>
    Len++;
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	3301      	adds	r3, #1
 8005bca:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005bcc:	68ba      	ldr	r2, [r7, #8]
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	4413      	add	r3, r2
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d1f6      	bne.n	8005bc6 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8005bd8:	693a      	ldr	r2, [r7, #16]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d901      	bls.n	8005be4 <_EncodeStr+0x30>
    Len = Limit;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	2bfe      	cmp	r3, #254	; 0xfe
 8005be8:	d806      	bhi.n	8005bf8 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	1c5a      	adds	r2, r3, #1
 8005bee:	60fa      	str	r2, [r7, #12]
 8005bf0:	693a      	ldr	r2, [r7, #16]
 8005bf2:	b2d2      	uxtb	r2, r2
 8005bf4:	701a      	strb	r2, [r3, #0]
 8005bf6:	e011      	b.n	8005c1c <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	1c5a      	adds	r2, r3, #1
 8005bfc:	60fa      	str	r2, [r7, #12]
 8005bfe:	22ff      	movs	r2, #255	; 0xff
 8005c00:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	1c5a      	adds	r2, r3, #1
 8005c06:	60fa      	str	r2, [r7, #12]
 8005c08:	693a      	ldr	r2, [r7, #16]
 8005c0a:	b2d2      	uxtb	r2, r2
 8005c0c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	0a19      	lsrs	r1, r3, #8
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	1c5a      	adds	r2, r3, #1
 8005c16:	60fa      	str	r2, [r7, #12]
 8005c18:	b2ca      	uxtb	r2, r1
 8005c1a:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005c20:	e00a      	b.n	8005c38 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8005c22:	68ba      	ldr	r2, [r7, #8]
 8005c24:	1c53      	adds	r3, r2, #1
 8005c26:	60bb      	str	r3, [r7, #8]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	1c59      	adds	r1, r3, #1
 8005c2c:	60f9      	str	r1, [r7, #12]
 8005c2e:	7812      	ldrb	r2, [r2, #0]
 8005c30:	701a      	strb	r2, [r3, #0]
    n++;
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	3301      	adds	r3, #1
 8005c36:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005c38:	697a      	ldr	r2, [r7, #20]
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d3f0      	bcc.n	8005c22 <_EncodeStr+0x6e>
  }
  return pPayload;
 8005c40:	68fb      	ldr	r3, [r7, #12]
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	371c      	adds	r7, #28
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr

08005c4e <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005c4e:	b480      	push	{r7}
 8005c50:	b083      	sub	sp, #12
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	3304      	adds	r3, #4
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	370c      	adds	r7, #12
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr
	...

08005c68 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b082      	sub	sp, #8
 8005c6c:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005c6e:	4b35      	ldr	r3, [pc, #212]	; (8005d44 <_HandleIncomingPacket+0xdc>)
 8005c70:	7e1b      	ldrb	r3, [r3, #24]
 8005c72:	4618      	mov	r0, r3
 8005c74:	1cfb      	adds	r3, r7, #3
 8005c76:	2201      	movs	r2, #1
 8005c78:	4619      	mov	r1, r3
 8005c7a:	f7ff fdab 	bl	80057d4 <SEGGER_RTT_ReadNoLock>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	dd59      	ble.n	8005d3c <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 8005c88:	78fb      	ldrb	r3, [r7, #3]
 8005c8a:	2b80      	cmp	r3, #128	; 0x80
 8005c8c:	d032      	beq.n	8005cf4 <_HandleIncomingPacket+0x8c>
 8005c8e:	2b80      	cmp	r3, #128	; 0x80
 8005c90:	dc42      	bgt.n	8005d18 <_HandleIncomingPacket+0xb0>
 8005c92:	2b07      	cmp	r3, #7
 8005c94:	dc16      	bgt.n	8005cc4 <_HandleIncomingPacket+0x5c>
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	dd3e      	ble.n	8005d18 <_HandleIncomingPacket+0xb0>
 8005c9a:	3b01      	subs	r3, #1
 8005c9c:	2b06      	cmp	r3, #6
 8005c9e:	d83b      	bhi.n	8005d18 <_HandleIncomingPacket+0xb0>
 8005ca0:	a201      	add	r2, pc, #4	; (adr r2, 8005ca8 <_HandleIncomingPacket+0x40>)
 8005ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ca6:	bf00      	nop
 8005ca8:	08005ccb 	.word	0x08005ccb
 8005cac:	08005cd1 	.word	0x08005cd1
 8005cb0:	08005cd7 	.word	0x08005cd7
 8005cb4:	08005cdd 	.word	0x08005cdd
 8005cb8:	08005ce3 	.word	0x08005ce3
 8005cbc:	08005ce9 	.word	0x08005ce9
 8005cc0:	08005cef 	.word	0x08005cef
 8005cc4:	2b7f      	cmp	r3, #127	; 0x7f
 8005cc6:	d034      	beq.n	8005d32 <_HandleIncomingPacket+0xca>
 8005cc8:	e026      	b.n	8005d18 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005cca:	f000 ff43 	bl	8006b54 <SEGGER_SYSVIEW_Start>
      break;
 8005cce:	e035      	b.n	8005d3c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005cd0:	f000 fffc 	bl	8006ccc <SEGGER_SYSVIEW_Stop>
      break;
 8005cd4:	e032      	b.n	8005d3c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005cd6:	f001 f9d5 	bl	8007084 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005cda:	e02f      	b.n	8005d3c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005cdc:	f001 f99a 	bl	8007014 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005ce0:	e02c      	b.n	8005d3c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005ce2:	f001 f819 	bl	8006d18 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005ce6:	e029      	b.n	8005d3c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005ce8:	f001 fc08 	bl	80074fc <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005cec:	e026      	b.n	8005d3c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005cee:	f001 fbe7 	bl	80074c0 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005cf2:	e023      	b.n	8005d3c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005cf4:	4b13      	ldr	r3, [pc, #76]	; (8005d44 <_HandleIncomingPacket+0xdc>)
 8005cf6:	7e1b      	ldrb	r3, [r3, #24]
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	1cfb      	adds	r3, r7, #3
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	4619      	mov	r1, r3
 8005d00:	f7ff fd68 	bl	80057d4 <SEGGER_RTT_ReadNoLock>
 8005d04:	4603      	mov	r3, r0
 8005d06:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	dd13      	ble.n	8005d36 <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005d0e:	78fb      	ldrb	r3, [r7, #3]
 8005d10:	4618      	mov	r0, r3
 8005d12:	f001 fb55 	bl	80073c0 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005d16:	e00e      	b.n	8005d36 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005d18:	78fb      	ldrb	r3, [r7, #3]
 8005d1a:	b25b      	sxtb	r3, r3
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	da0c      	bge.n	8005d3a <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005d20:	4b08      	ldr	r3, [pc, #32]	; (8005d44 <_HandleIncomingPacket+0xdc>)
 8005d22:	7e1b      	ldrb	r3, [r3, #24]
 8005d24:	4618      	mov	r0, r3
 8005d26:	1cfb      	adds	r3, r7, #3
 8005d28:	2201      	movs	r2, #1
 8005d2a:	4619      	mov	r1, r3
 8005d2c:	f7ff fd52 	bl	80057d4 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005d30:	e003      	b.n	8005d3a <_HandleIncomingPacket+0xd2>
      break;
 8005d32:	bf00      	nop
 8005d34:	e002      	b.n	8005d3c <_HandleIncomingPacket+0xd4>
      break;
 8005d36:	bf00      	nop
 8005d38:	e000      	b.n	8005d3c <_HandleIncomingPacket+0xd4>
      break;
 8005d3a:	bf00      	nop
    }
  }
}
 8005d3c:	bf00      	nop
 8005d3e:	3708      	adds	r7, #8
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}
 8005d44:	200143f0 	.word	0x200143f0

08005d48 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b08c      	sub	sp, #48	; 0x30
 8005d4c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005d4e:	2301      	movs	r3, #1
 8005d50:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005d52:	1d3b      	adds	r3, r7, #4
 8005d54:	3301      	adds	r3, #1
 8005d56:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d5c:	4b32      	ldr	r3, [pc, #200]	; (8005e28 <_TrySendOverflowPacket+0xe0>)
 8005d5e:	695b      	ldr	r3, [r3, #20]
 8005d60:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d62:	e00b      	b.n	8005d7c <_TrySendOverflowPacket+0x34>
 8005d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d66:	b2da      	uxtb	r2, r3
 8005d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d6a:	1c59      	adds	r1, r3, #1
 8005d6c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005d6e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d72:	b2d2      	uxtb	r2, r2
 8005d74:	701a      	strb	r2, [r3, #0]
 8005d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d78:	09db      	lsrs	r3, r3, #7
 8005d7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d7e:	2b7f      	cmp	r3, #127	; 0x7f
 8005d80:	d8f0      	bhi.n	8005d64 <_TrySendOverflowPacket+0x1c>
 8005d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d84:	1c5a      	adds	r2, r3, #1
 8005d86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d8a:	b2d2      	uxtb	r2, r2
 8005d8c:	701a      	strb	r2, [r3, #0]
 8005d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d90:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005d92:	4b26      	ldr	r3, [pc, #152]	; (8005e2c <_TrySendOverflowPacket+0xe4>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005d98:	4b23      	ldr	r3, [pc, #140]	; (8005e28 <_TrySendOverflowPacket+0xe0>)
 8005d9a:	68db      	ldr	r3, [r3, #12]
 8005d9c:	69ba      	ldr	r2, [r7, #24]
 8005d9e:	1ad3      	subs	r3, r2, r3
 8005da0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005da2:	69fb      	ldr	r3, [r7, #28]
 8005da4:	627b      	str	r3, [r7, #36]	; 0x24
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	623b      	str	r3, [r7, #32]
 8005daa:	e00b      	b.n	8005dc4 <_TrySendOverflowPacket+0x7c>
 8005dac:	6a3b      	ldr	r3, [r7, #32]
 8005dae:	b2da      	uxtb	r2, r3
 8005db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db2:	1c59      	adds	r1, r3, #1
 8005db4:	6279      	str	r1, [r7, #36]	; 0x24
 8005db6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005dba:	b2d2      	uxtb	r2, r2
 8005dbc:	701a      	strb	r2, [r3, #0]
 8005dbe:	6a3b      	ldr	r3, [r7, #32]
 8005dc0:	09db      	lsrs	r3, r3, #7
 8005dc2:	623b      	str	r3, [r7, #32]
 8005dc4:	6a3b      	ldr	r3, [r7, #32]
 8005dc6:	2b7f      	cmp	r3, #127	; 0x7f
 8005dc8:	d8f0      	bhi.n	8005dac <_TrySendOverflowPacket+0x64>
 8005dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dcc:	1c5a      	adds	r2, r3, #1
 8005dce:	627a      	str	r2, [r7, #36]	; 0x24
 8005dd0:	6a3a      	ldr	r2, [r7, #32]
 8005dd2:	b2d2      	uxtb	r2, r2
 8005dd4:	701a      	strb	r2, [r3, #0]
 8005dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd8:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8005dda:	4b13      	ldr	r3, [pc, #76]	; (8005e28 <_TrySendOverflowPacket+0xe0>)
 8005ddc:	785b      	ldrb	r3, [r3, #1]
 8005dde:	4618      	mov	r0, r3
 8005de0:	1d3b      	adds	r3, r7, #4
 8005de2:	69fa      	ldr	r2, [r7, #28]
 8005de4:	1ad3      	subs	r3, r2, r3
 8005de6:	461a      	mov	r2, r3
 8005de8:	1d3b      	adds	r3, r7, #4
 8005dea:	4619      	mov	r1, r3
 8005dec:	f7fa fa10 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005df0:	4603      	mov	r3, r0
 8005df2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8005df4:	f7ff fabe 	bl	8005374 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d009      	beq.n	8005e12 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005dfe:	4a0a      	ldr	r2, [pc, #40]	; (8005e28 <_TrySendOverflowPacket+0xe0>)
 8005e00:	69bb      	ldr	r3, [r7, #24]
 8005e02:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005e04:	4b08      	ldr	r3, [pc, #32]	; (8005e28 <_TrySendOverflowPacket+0xe0>)
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	3b01      	subs	r3, #1
 8005e0a:	b2da      	uxtb	r2, r3
 8005e0c:	4b06      	ldr	r3, [pc, #24]	; (8005e28 <_TrySendOverflowPacket+0xe0>)
 8005e0e:	701a      	strb	r2, [r3, #0]
 8005e10:	e004      	b.n	8005e1c <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005e12:	4b05      	ldr	r3, [pc, #20]	; (8005e28 <_TrySendOverflowPacket+0xe0>)
 8005e14:	695b      	ldr	r3, [r3, #20]
 8005e16:	3301      	adds	r3, #1
 8005e18:	4a03      	ldr	r2, [pc, #12]	; (8005e28 <_TrySendOverflowPacket+0xe0>)
 8005e1a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005e1c:	693b      	ldr	r3, [r7, #16]
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3730      	adds	r7, #48	; 0x30
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
 8005e26:	bf00      	nop
 8005e28:	200143f0 	.word	0x200143f0
 8005e2c:	e0001004 	.word	0xe0001004

08005e30 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b08a      	sub	sp, #40	; 0x28
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	60b9      	str	r1, [r7, #8]
 8005e3a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005e3c:	4b6d      	ldr	r3, [pc, #436]	; (8005ff4 <_SendPacket+0x1c4>)
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d010      	beq.n	8005e66 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005e44:	4b6b      	ldr	r3, [pc, #428]	; (8005ff4 <_SendPacket+0x1c4>)
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	f000 80a5 	beq.w	8005f98 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005e4e:	4b69      	ldr	r3, [pc, #420]	; (8005ff4 <_SendPacket+0x1c4>)
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	2b02      	cmp	r3, #2
 8005e54:	d109      	bne.n	8005e6a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005e56:	f7ff ff77 	bl	8005d48 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005e5a:	4b66      	ldr	r3, [pc, #408]	; (8005ff4 <_SendPacket+0x1c4>)
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	f040 809c 	bne.w	8005f9c <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8005e64:	e001      	b.n	8005e6a <_SendPacket+0x3a>
    goto Send;
 8005e66:	bf00      	nop
 8005e68:	e000      	b.n	8005e6c <_SendPacket+0x3c>
Send:
 8005e6a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2b1f      	cmp	r3, #31
 8005e70:	d809      	bhi.n	8005e86 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005e72:	4b60      	ldr	r3, [pc, #384]	; (8005ff4 <_SendPacket+0x1c4>)
 8005e74:	69da      	ldr	r2, [r3, #28]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	fa22 f303 	lsr.w	r3, r2, r3
 8005e7c:	f003 0301 	and.w	r3, r3, #1
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	f040 808d 	bne.w	8005fa0 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2b17      	cmp	r3, #23
 8005e8a:	d807      	bhi.n	8005e9c <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	3b01      	subs	r3, #1
 8005e90:	60fb      	str	r3, [r7, #12]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	b2da      	uxtb	r2, r3
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	701a      	strb	r2, [r3, #0]
 8005e9a:	e03d      	b.n	8005f18 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005e9c:	68ba      	ldr	r2, [r7, #8]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	2b7f      	cmp	r3, #127	; 0x7f
 8005ea8:	d912      	bls.n	8005ed0 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	09da      	lsrs	r2, r3, #7
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	3b01      	subs	r3, #1
 8005eb2:	60fb      	str	r3, [r7, #12]
 8005eb4:	b2d2      	uxtb	r2, r2
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8005eba:	69fb      	ldr	r3, [r7, #28]
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	68fa      	ldr	r2, [r7, #12]
 8005ec0:	3a01      	subs	r2, #1
 8005ec2:	60fa      	str	r2, [r7, #12]
 8005ec4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005ec8:	b2da      	uxtb	r2, r3
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	701a      	strb	r2, [r3, #0]
 8005ece:	e006      	b.n	8005ede <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	3b01      	subs	r3, #1
 8005ed4:	60fb      	str	r3, [r7, #12]
 8005ed6:	69fb      	ldr	r3, [r7, #28]
 8005ed8:	b2da      	uxtb	r2, r3
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2b7f      	cmp	r3, #127	; 0x7f
 8005ee2:	d912      	bls.n	8005f0a <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	09da      	lsrs	r2, r3, #7
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	3b01      	subs	r3, #1
 8005eec:	60fb      	str	r3, [r7, #12]
 8005eee:	b2d2      	uxtb	r2, r2
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	68fa      	ldr	r2, [r7, #12]
 8005efa:	3a01      	subs	r2, #1
 8005efc:	60fa      	str	r2, [r7, #12]
 8005efe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005f02:	b2da      	uxtb	r2, r3
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	701a      	strb	r2, [r3, #0]
 8005f08:	e006      	b.n	8005f18 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	3b01      	subs	r3, #1
 8005f0e:	60fb      	str	r3, [r7, #12]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	b2da      	uxtb	r2, r3
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005f18:	4b37      	ldr	r3, [pc, #220]	; (8005ff8 <_SendPacket+0x1c8>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005f1e:	4b35      	ldr	r3, [pc, #212]	; (8005ff4 <_SendPacket+0x1c4>)
 8005f20:	68db      	ldr	r3, [r3, #12]
 8005f22:	69ba      	ldr	r2, [r7, #24]
 8005f24:	1ad3      	subs	r3, r2, r3
 8005f26:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	627b      	str	r3, [r7, #36]	; 0x24
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	623b      	str	r3, [r7, #32]
 8005f30:	e00b      	b.n	8005f4a <_SendPacket+0x11a>
 8005f32:	6a3b      	ldr	r3, [r7, #32]
 8005f34:	b2da      	uxtb	r2, r3
 8005f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f38:	1c59      	adds	r1, r3, #1
 8005f3a:	6279      	str	r1, [r7, #36]	; 0x24
 8005f3c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f40:	b2d2      	uxtb	r2, r2
 8005f42:	701a      	strb	r2, [r3, #0]
 8005f44:	6a3b      	ldr	r3, [r7, #32]
 8005f46:	09db      	lsrs	r3, r3, #7
 8005f48:	623b      	str	r3, [r7, #32]
 8005f4a:	6a3b      	ldr	r3, [r7, #32]
 8005f4c:	2b7f      	cmp	r3, #127	; 0x7f
 8005f4e:	d8f0      	bhi.n	8005f32 <_SendPacket+0x102>
 8005f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f52:	1c5a      	adds	r2, r3, #1
 8005f54:	627a      	str	r2, [r7, #36]	; 0x24
 8005f56:	6a3a      	ldr	r2, [r7, #32]
 8005f58:	b2d2      	uxtb	r2, r2
 8005f5a:	701a      	strb	r2, [r3, #0]
 8005f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5e:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005f60:	4b24      	ldr	r3, [pc, #144]	; (8005ff4 <_SendPacket+0x1c4>)
 8005f62:	785b      	ldrb	r3, [r3, #1]
 8005f64:	4618      	mov	r0, r3
 8005f66:	68ba      	ldr	r2, [r7, #8]
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	1ad3      	subs	r3, r2, r3
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	68f9      	ldr	r1, [r7, #12]
 8005f70:	f7fa f94e 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005f74:	4603      	mov	r3, r0
 8005f76:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8005f78:	f7ff f9fc 	bl	8005374 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d003      	beq.n	8005f8a <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005f82:	4a1c      	ldr	r2, [pc, #112]	; (8005ff4 <_SendPacket+0x1c4>)
 8005f84:	69bb      	ldr	r3, [r7, #24]
 8005f86:	60d3      	str	r3, [r2, #12]
 8005f88:	e00b      	b.n	8005fa2 <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005f8a:	4b1a      	ldr	r3, [pc, #104]	; (8005ff4 <_SendPacket+0x1c4>)
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	3301      	adds	r3, #1
 8005f90:	b2da      	uxtb	r2, r3
 8005f92:	4b18      	ldr	r3, [pc, #96]	; (8005ff4 <_SendPacket+0x1c4>)
 8005f94:	701a      	strb	r2, [r3, #0]
 8005f96:	e004      	b.n	8005fa2 <_SendPacket+0x172>
    goto SendDone;
 8005f98:	bf00      	nop
 8005f9a:	e002      	b.n	8005fa2 <_SendPacket+0x172>
      goto SendDone;
 8005f9c:	bf00      	nop
 8005f9e:	e000      	b.n	8005fa2 <_SendPacket+0x172>
      goto SendDone;
 8005fa0:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005fa2:	4b14      	ldr	r3, [pc, #80]	; (8005ff4 <_SendPacket+0x1c4>)
 8005fa4:	7e1b      	ldrb	r3, [r3, #24]
 8005fa6:	4619      	mov	r1, r3
 8005fa8:	4a14      	ldr	r2, [pc, #80]	; (8005ffc <_SendPacket+0x1cc>)
 8005faa:	460b      	mov	r3, r1
 8005fac:	005b      	lsls	r3, r3, #1
 8005fae:	440b      	add	r3, r1
 8005fb0:	00db      	lsls	r3, r3, #3
 8005fb2:	4413      	add	r3, r2
 8005fb4:	336c      	adds	r3, #108	; 0x6c
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	4b0e      	ldr	r3, [pc, #56]	; (8005ff4 <_SendPacket+0x1c4>)
 8005fba:	7e1b      	ldrb	r3, [r3, #24]
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	490f      	ldr	r1, [pc, #60]	; (8005ffc <_SendPacket+0x1cc>)
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	005b      	lsls	r3, r3, #1
 8005fc4:	4403      	add	r3, r0
 8005fc6:	00db      	lsls	r3, r3, #3
 8005fc8:	440b      	add	r3, r1
 8005fca:	3370      	adds	r3, #112	; 0x70
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d00b      	beq.n	8005fea <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005fd2:	4b08      	ldr	r3, [pc, #32]	; (8005ff4 <_SendPacket+0x1c4>)
 8005fd4:	789b      	ldrb	r3, [r3, #2]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d107      	bne.n	8005fea <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005fda:	4b06      	ldr	r3, [pc, #24]	; (8005ff4 <_SendPacket+0x1c4>)
 8005fdc:	2201      	movs	r2, #1
 8005fde:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005fe0:	f7ff fe42 	bl	8005c68 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005fe4:	4b03      	ldr	r3, [pc, #12]	; (8005ff4 <_SendPacket+0x1c4>)
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005fea:	bf00      	nop
 8005fec:	3728      	adds	r7, #40	; 0x28
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	bf00      	nop
 8005ff4:	200143f0 	.word	0x200143f0
 8005ff8:	e0001004 	.word	0xe0001004
 8005ffc:	20012f30 	.word	0x20012f30

08006000 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8006000:	b580      	push	{r7, lr}
 8006002:	b08a      	sub	sp, #40	; 0x28
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	460b      	mov	r3, r1
 800600a:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	691b      	ldr	r3, [r3, #16]
 8006010:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	3301      	adds	r3, #1
 8006016:	2b80      	cmp	r3, #128	; 0x80
 8006018:	d80a      	bhi.n	8006030 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	1c59      	adds	r1, r3, #1
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	6051      	str	r1, [r2, #4]
 8006024:	78fa      	ldrb	r2, [r7, #3]
 8006026:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	1c5a      	adds	r2, r3, #1
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	691b      	ldr	r3, [r3, #16]
 8006034:	2b80      	cmp	r3, #128	; 0x80
 8006036:	d15a      	bne.n	80060ee <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	691a      	ldr	r2, [r3, #16]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	b2d2      	uxtb	r2, r2
 8006042:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	68db      	ldr	r3, [r3, #12]
 800604e:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	627b      	str	r3, [r7, #36]	; 0x24
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	623b      	str	r3, [r7, #32]
 8006058:	e00b      	b.n	8006072 <_StoreChar+0x72>
 800605a:	6a3b      	ldr	r3, [r7, #32]
 800605c:	b2da      	uxtb	r2, r3
 800605e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006060:	1c59      	adds	r1, r3, #1
 8006062:	6279      	str	r1, [r7, #36]	; 0x24
 8006064:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006068:	b2d2      	uxtb	r2, r2
 800606a:	701a      	strb	r2, [r3, #0]
 800606c:	6a3b      	ldr	r3, [r7, #32]
 800606e:	09db      	lsrs	r3, r3, #7
 8006070:	623b      	str	r3, [r7, #32]
 8006072:	6a3b      	ldr	r3, [r7, #32]
 8006074:	2b7f      	cmp	r3, #127	; 0x7f
 8006076:	d8f0      	bhi.n	800605a <_StoreChar+0x5a>
 8006078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607a:	1c5a      	adds	r2, r3, #1
 800607c:	627a      	str	r2, [r7, #36]	; 0x24
 800607e:	6a3a      	ldr	r2, [r7, #32]
 8006080:	b2d2      	uxtb	r2, r2
 8006082:	701a      	strb	r2, [r3, #0]
 8006084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006086:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	61fb      	str	r3, [r7, #28]
 800608c:	2300      	movs	r3, #0
 800608e:	61bb      	str	r3, [r7, #24]
 8006090:	e00b      	b.n	80060aa <_StoreChar+0xaa>
 8006092:	69bb      	ldr	r3, [r7, #24]
 8006094:	b2da      	uxtb	r2, r3
 8006096:	69fb      	ldr	r3, [r7, #28]
 8006098:	1c59      	adds	r1, r3, #1
 800609a:	61f9      	str	r1, [r7, #28]
 800609c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060a0:	b2d2      	uxtb	r2, r2
 80060a2:	701a      	strb	r2, [r3, #0]
 80060a4:	69bb      	ldr	r3, [r7, #24]
 80060a6:	09db      	lsrs	r3, r3, #7
 80060a8:	61bb      	str	r3, [r7, #24]
 80060aa:	69bb      	ldr	r3, [r7, #24]
 80060ac:	2b7f      	cmp	r3, #127	; 0x7f
 80060ae:	d8f0      	bhi.n	8006092 <_StoreChar+0x92>
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	1c5a      	adds	r2, r3, #1
 80060b4:	61fa      	str	r2, [r7, #28]
 80060b6:	69ba      	ldr	r2, [r7, #24]
 80060b8:	b2d2      	uxtb	r2, r2
 80060ba:	701a      	strb	r2, [r3, #0]
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	221a      	movs	r2, #26
 80060c6:	6939      	ldr	r1, [r7, #16]
 80060c8:	4618      	mov	r0, r3
 80060ca:	f7ff feb1 	bl	8005e30 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4618      	mov	r0, r3
 80060d4:	f7ff fdbb 	bl	8005c4e <_PreparePacket>
 80060d8:	4602      	mov	r2, r0
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	1c5a      	adds	r2, r3, #1
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	611a      	str	r2, [r3, #16]
  }
}
 80060ee:	bf00      	nop
 80060f0:	3728      	adds	r7, #40	; 0x28
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
	...

080060f8 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b08a      	sub	sp, #40	; 0x28
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	60b9      	str	r1, [r7, #8]
 8006102:	607a      	str	r2, [r7, #4]
 8006104:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 800610a:	2301      	movs	r3, #1
 800610c:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 800610e:	2301      	movs	r3, #1
 8006110:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8006112:	e007      	b.n	8006124 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8006114:	6a3a      	ldr	r2, [r7, #32]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	fbb2 f3f3 	udiv	r3, r2, r3
 800611c:	623b      	str	r3, [r7, #32]
    Width++;
 800611e:	69fb      	ldr	r3, [r7, #28]
 8006120:	3301      	adds	r3, #1
 8006122:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8006124:	6a3a      	ldr	r2, [r7, #32]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	429a      	cmp	r2, r3
 800612a:	d2f3      	bcs.n	8006114 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 800612c:	683a      	ldr	r2, [r7, #0]
 800612e:	69fb      	ldr	r3, [r7, #28]
 8006130:	429a      	cmp	r2, r3
 8006132:	d901      	bls.n	8006138 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8006138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800613a:	f003 0301 	and.w	r3, r3, #1
 800613e:	2b00      	cmp	r3, #0
 8006140:	d11f      	bne.n	8006182 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8006142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006144:	2b00      	cmp	r3, #0
 8006146:	d01c      	beq.n	8006182 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8006148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800614a:	f003 0302 	and.w	r3, r3, #2
 800614e:	2b00      	cmp	r3, #0
 8006150:	d005      	beq.n	800615e <_PrintUnsigned+0x66>
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d102      	bne.n	800615e <_PrintUnsigned+0x66>
        c = '0';
 8006158:	2330      	movs	r3, #48	; 0x30
 800615a:	76fb      	strb	r3, [r7, #27]
 800615c:	e001      	b.n	8006162 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 800615e:	2320      	movs	r3, #32
 8006160:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006162:	e007      	b.n	8006174 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8006164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006166:	3b01      	subs	r3, #1
 8006168:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 800616a:	7efb      	ldrb	r3, [r7, #27]
 800616c:	4619      	mov	r1, r3
 800616e:	68f8      	ldr	r0, [r7, #12]
 8006170:	f7ff ff46 	bl	8006000 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006176:	2b00      	cmp	r3, #0
 8006178:	d003      	beq.n	8006182 <_PrintUnsigned+0x8a>
 800617a:	69fa      	ldr	r2, [r7, #28]
 800617c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800617e:	429a      	cmp	r2, r3
 8006180:	d3f0      	bcc.n	8006164 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	2b01      	cmp	r3, #1
 8006186:	d903      	bls.n	8006190 <_PrintUnsigned+0x98>
      NumDigits--;
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	3b01      	subs	r3, #1
 800618c:	603b      	str	r3, [r7, #0]
 800618e:	e009      	b.n	80061a4 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8006190:	68ba      	ldr	r2, [r7, #8]
 8006192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006194:	fbb2 f3f3 	udiv	r3, r2, r3
 8006198:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 800619a:	697a      	ldr	r2, [r7, #20]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	429a      	cmp	r2, r3
 80061a0:	d200      	bcs.n	80061a4 <_PrintUnsigned+0xac>
        break;
 80061a2:	e005      	b.n	80061b0 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 80061a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	fb02 f303 	mul.w	r3, r2, r3
 80061ac:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80061ae:	e7e8      	b.n	8006182 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 80061b0:	68ba      	ldr	r2, [r7, #8]
 80061b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80061b8:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061be:	fb02 f303 	mul.w	r3, r2, r3
 80061c2:	68ba      	ldr	r2, [r7, #8]
 80061c4:	1ad3      	subs	r3, r2, r3
 80061c6:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 80061c8:	4a15      	ldr	r2, [pc, #84]	; (8006220 <_PrintUnsigned+0x128>)
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	4413      	add	r3, r2
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	4619      	mov	r1, r3
 80061d2:	68f8      	ldr	r0, [r7, #12]
 80061d4:	f7ff ff14 	bl	8006000 <_StoreChar>
    Digit /= Base;
 80061d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80061e0:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 80061e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d1e3      	bne.n	80061b0 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80061e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061ea:	f003 0301 	and.w	r3, r3, #1
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d011      	beq.n	8006216 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 80061f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d00e      	beq.n	8006216 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80061f8:	e006      	b.n	8006208 <_PrintUnsigned+0x110>
        FieldWidth--;
 80061fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061fc:	3b01      	subs	r3, #1
 80061fe:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8006200:	2120      	movs	r1, #32
 8006202:	68f8      	ldr	r0, [r7, #12]
 8006204:	f7ff fefc 	bl	8006000 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800620a:	2b00      	cmp	r3, #0
 800620c:	d003      	beq.n	8006216 <_PrintUnsigned+0x11e>
 800620e:	69fa      	ldr	r2, [r7, #28]
 8006210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006212:	429a      	cmp	r2, r3
 8006214:	d3f1      	bcc.n	80061fa <_PrintUnsigned+0x102>
      }
    }
  }
}
 8006216:	bf00      	nop
 8006218:	3728      	adds	r7, #40	; 0x28
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}
 800621e:	bf00      	nop
 8006220:	08008280 	.word	0x08008280

08006224 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8006224:	b580      	push	{r7, lr}
 8006226:	b088      	sub	sp, #32
 8006228:	af02      	add	r7, sp, #8
 800622a:	60f8      	str	r0, [r7, #12]
 800622c:	60b9      	str	r1, [r7, #8]
 800622e:	607a      	str	r2, [r7, #4]
 8006230:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	2b00      	cmp	r3, #0
 8006236:	bfb8      	it	lt
 8006238:	425b      	neglt	r3, r3
 800623a:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 800623c:	2301      	movs	r3, #1
 800623e:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8006240:	e007      	b.n	8006252 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	693a      	ldr	r2, [r7, #16]
 8006246:	fb92 f3f3 	sdiv	r3, r2, r3
 800624a:	613b      	str	r3, [r7, #16]
    Width++;
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	3301      	adds	r3, #1
 8006250:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	693a      	ldr	r2, [r7, #16]
 8006256:	429a      	cmp	r2, r3
 8006258:	daf3      	bge.n	8006242 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 800625a:	683a      	ldr	r2, [r7, #0]
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	429a      	cmp	r2, r3
 8006260:	d901      	bls.n	8006266 <_PrintInt+0x42>
    Width = NumDigits;
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8006266:	6a3b      	ldr	r3, [r7, #32]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d00a      	beq.n	8006282 <_PrintInt+0x5e>
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	2b00      	cmp	r3, #0
 8006270:	db04      	blt.n	800627c <_PrintInt+0x58>
 8006272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006274:	f003 0304 	and.w	r3, r3, #4
 8006278:	2b00      	cmp	r3, #0
 800627a:	d002      	beq.n	8006282 <_PrintInt+0x5e>
    FieldWidth--;
 800627c:	6a3b      	ldr	r3, [r7, #32]
 800627e:	3b01      	subs	r3, #1
 8006280:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8006282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006284:	f003 0302 	and.w	r3, r3, #2
 8006288:	2b00      	cmp	r3, #0
 800628a:	d002      	beq.n	8006292 <_PrintInt+0x6e>
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d016      	beq.n	80062c0 <_PrintInt+0x9c>
 8006292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006294:	f003 0301 	and.w	r3, r3, #1
 8006298:	2b00      	cmp	r3, #0
 800629a:	d111      	bne.n	80062c0 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 800629c:	6a3b      	ldr	r3, [r7, #32]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d00e      	beq.n	80062c0 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80062a2:	e006      	b.n	80062b2 <_PrintInt+0x8e>
        FieldWidth--;
 80062a4:	6a3b      	ldr	r3, [r7, #32]
 80062a6:	3b01      	subs	r3, #1
 80062a8:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 80062aa:	2120      	movs	r1, #32
 80062ac:	68f8      	ldr	r0, [r7, #12]
 80062ae:	f7ff fea7 	bl	8006000 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80062b2:	6a3b      	ldr	r3, [r7, #32]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d003      	beq.n	80062c0 <_PrintInt+0x9c>
 80062b8:	697a      	ldr	r2, [r7, #20]
 80062ba:	6a3b      	ldr	r3, [r7, #32]
 80062bc:	429a      	cmp	r2, r3
 80062be:	d3f1      	bcc.n	80062a4 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	da07      	bge.n	80062d6 <_PrintInt+0xb2>
    v = -v;
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	425b      	negs	r3, r3
 80062ca:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 80062cc:	212d      	movs	r1, #45	; 0x2d
 80062ce:	68f8      	ldr	r0, [r7, #12]
 80062d0:	f7ff fe96 	bl	8006000 <_StoreChar>
 80062d4:	e008      	b.n	80062e8 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80062d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d8:	f003 0304 	and.w	r3, r3, #4
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d003      	beq.n	80062e8 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 80062e0:	212b      	movs	r1, #43	; 0x2b
 80062e2:	68f8      	ldr	r0, [r7, #12]
 80062e4:	f7ff fe8c 	bl	8006000 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80062e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ea:	f003 0302 	and.w	r3, r3, #2
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d019      	beq.n	8006326 <_PrintInt+0x102>
 80062f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f4:	f003 0301 	and.w	r3, r3, #1
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d114      	bne.n	8006326 <_PrintInt+0x102>
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d111      	bne.n	8006326 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8006302:	6a3b      	ldr	r3, [r7, #32]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d00e      	beq.n	8006326 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006308:	e006      	b.n	8006318 <_PrintInt+0xf4>
        FieldWidth--;
 800630a:	6a3b      	ldr	r3, [r7, #32]
 800630c:	3b01      	subs	r3, #1
 800630e:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8006310:	2130      	movs	r1, #48	; 0x30
 8006312:	68f8      	ldr	r0, [r7, #12]
 8006314:	f7ff fe74 	bl	8006000 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006318:	6a3b      	ldr	r3, [r7, #32]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d003      	beq.n	8006326 <_PrintInt+0x102>
 800631e:	697a      	ldr	r2, [r7, #20]
 8006320:	6a3b      	ldr	r3, [r7, #32]
 8006322:	429a      	cmp	r2, r3
 8006324:	d3f1      	bcc.n	800630a <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8006326:	68b9      	ldr	r1, [r7, #8]
 8006328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632a:	9301      	str	r3, [sp, #4]
 800632c:	6a3b      	ldr	r3, [r7, #32]
 800632e:	9300      	str	r3, [sp, #0]
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	68f8      	ldr	r0, [r7, #12]
 8006336:	f7ff fedf 	bl	80060f8 <_PrintUnsigned>
}
 800633a:	bf00      	nop
 800633c:	3718      	adds	r7, #24
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
	...

08006344 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8006344:	b580      	push	{r7, lr}
 8006346:	b098      	sub	sp, #96	; 0x60
 8006348:	af02      	add	r7, sp, #8
 800634a:	60f8      	str	r0, [r7, #12]
 800634c:	60b9      	str	r1, [r7, #8]
 800634e:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006350:	f3ef 8311 	mrs	r3, BASEPRI
 8006354:	f04f 0120 	mov.w	r1, #32
 8006358:	f381 8811 	msr	BASEPRI, r1
 800635c:	633b      	str	r3, [r7, #48]	; 0x30
 800635e:	48b7      	ldr	r0, [pc, #732]	; (800663c <_VPrintTarget+0x2f8>)
 8006360:	f7ff fc75 	bl	8005c4e <_PreparePacket>
 8006364:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8006366:	4bb5      	ldr	r3, [pc, #724]	; (800663c <_VPrintTarget+0x2f8>)
 8006368:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 800636a:	2300      	movs	r3, #0
 800636c:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 800636e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006370:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8006372:	69fb      	ldr	r3, [r7, #28]
 8006374:	3301      	adds	r3, #1
 8006376:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	3301      	adds	r3, #1
 8006388:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 800638a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800638e:	2b00      	cmp	r3, #0
 8006390:	f000 8183 	beq.w	800669a <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8006394:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006398:	2b25      	cmp	r3, #37	; 0x25
 800639a:	f040 8170 	bne.w	800667e <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 800639e:	2300      	movs	r3, #0
 80063a0:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 80063a2:	2301      	movs	r3, #1
 80063a4:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	781b      	ldrb	r3, [r3, #0]
 80063aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 80063ae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80063b2:	3b23      	subs	r3, #35	; 0x23
 80063b4:	2b0d      	cmp	r3, #13
 80063b6:	d83f      	bhi.n	8006438 <_VPrintTarget+0xf4>
 80063b8:	a201      	add	r2, pc, #4	; (adr r2, 80063c0 <_VPrintTarget+0x7c>)
 80063ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063be:	bf00      	nop
 80063c0:	08006429 	.word	0x08006429
 80063c4:	08006439 	.word	0x08006439
 80063c8:	08006439 	.word	0x08006439
 80063cc:	08006439 	.word	0x08006439
 80063d0:	08006439 	.word	0x08006439
 80063d4:	08006439 	.word	0x08006439
 80063d8:	08006439 	.word	0x08006439
 80063dc:	08006439 	.word	0x08006439
 80063e0:	08006419 	.word	0x08006419
 80063e4:	08006439 	.word	0x08006439
 80063e8:	080063f9 	.word	0x080063f9
 80063ec:	08006439 	.word	0x08006439
 80063f0:	08006439 	.word	0x08006439
 80063f4:	08006409 	.word	0x08006409
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 80063f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063fa:	f043 0301 	orr.w	r3, r3, #1
 80063fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	3301      	adds	r3, #1
 8006404:	60fb      	str	r3, [r7, #12]
 8006406:	e01a      	b.n	800643e <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8006408:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800640a:	f043 0302 	orr.w	r3, r3, #2
 800640e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	3301      	adds	r3, #1
 8006414:	60fb      	str	r3, [r7, #12]
 8006416:	e012      	b.n	800643e <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8006418:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800641a:	f043 0304 	orr.w	r3, r3, #4
 800641e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	3301      	adds	r3, #1
 8006424:	60fb      	str	r3, [r7, #12]
 8006426:	e00a      	b.n	800643e <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8006428:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800642a:	f043 0308 	orr.w	r3, r3, #8
 800642e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	3301      	adds	r3, #1
 8006434:	60fb      	str	r3, [r7, #12]
 8006436:	e002      	b.n	800643e <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8006438:	2300      	movs	r3, #0
 800643a:	653b      	str	r3, [r7, #80]	; 0x50
 800643c:	bf00      	nop
        }
      } while (v);
 800643e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006440:	2b00      	cmp	r3, #0
 8006442:	d1b0      	bne.n	80063a6 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8006444:	2300      	movs	r3, #0
 8006446:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	781b      	ldrb	r3, [r3, #0]
 800644c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8006450:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006454:	2b2f      	cmp	r3, #47	; 0x2f
 8006456:	d912      	bls.n	800647e <_VPrintTarget+0x13a>
 8006458:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800645c:	2b39      	cmp	r3, #57	; 0x39
 800645e:	d80e      	bhi.n	800647e <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	3301      	adds	r3, #1
 8006464:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8006466:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006468:	4613      	mov	r3, r2
 800646a:	009b      	lsls	r3, r3, #2
 800646c:	4413      	add	r3, r2
 800646e:	005b      	lsls	r3, r3, #1
 8006470:	461a      	mov	r2, r3
 8006472:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006476:	4413      	add	r3, r2
 8006478:	3b30      	subs	r3, #48	; 0x30
 800647a:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 800647c:	e7e4      	b.n	8006448 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 800647e:	2300      	movs	r3, #0
 8006480:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 800648a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800648e:	2b2e      	cmp	r3, #46	; 0x2e
 8006490:	d11d      	bne.n	80064ce <_VPrintTarget+0x18a>
        sFormat++;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	3301      	adds	r3, #1
 8006496:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 80064a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80064a4:	2b2f      	cmp	r3, #47	; 0x2f
 80064a6:	d912      	bls.n	80064ce <_VPrintTarget+0x18a>
 80064a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80064ac:	2b39      	cmp	r3, #57	; 0x39
 80064ae:	d80e      	bhi.n	80064ce <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	3301      	adds	r3, #1
 80064b4:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 80064b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80064b8:	4613      	mov	r3, r2
 80064ba:	009b      	lsls	r3, r3, #2
 80064bc:	4413      	add	r3, r2
 80064be:	005b      	lsls	r3, r3, #1
 80064c0:	461a      	mov	r2, r3
 80064c2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80064c6:	4413      	add	r3, r2
 80064c8:	3b30      	subs	r3, #48	; 0x30
 80064ca:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 80064cc:	e7e4      	b.n	8006498 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	781b      	ldrb	r3, [r3, #0]
 80064d2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 80064d6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80064da:	2b6c      	cmp	r3, #108	; 0x6c
 80064dc:	d003      	beq.n	80064e6 <_VPrintTarget+0x1a2>
 80064de:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80064e2:	2b68      	cmp	r3, #104	; 0x68
 80064e4:	d107      	bne.n	80064f6 <_VPrintTarget+0x1b2>
          c = *sFormat;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	3301      	adds	r3, #1
 80064f2:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 80064f4:	e7ef      	b.n	80064d6 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80064f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80064fa:	2b25      	cmp	r3, #37	; 0x25
 80064fc:	f000 80b3 	beq.w	8006666 <_VPrintTarget+0x322>
 8006500:	2b25      	cmp	r3, #37	; 0x25
 8006502:	f2c0 80b7 	blt.w	8006674 <_VPrintTarget+0x330>
 8006506:	2b78      	cmp	r3, #120	; 0x78
 8006508:	f300 80b4 	bgt.w	8006674 <_VPrintTarget+0x330>
 800650c:	2b58      	cmp	r3, #88	; 0x58
 800650e:	f2c0 80b1 	blt.w	8006674 <_VPrintTarget+0x330>
 8006512:	3b58      	subs	r3, #88	; 0x58
 8006514:	2b20      	cmp	r3, #32
 8006516:	f200 80ad 	bhi.w	8006674 <_VPrintTarget+0x330>
 800651a:	a201      	add	r2, pc, #4	; (adr r2, 8006520 <_VPrintTarget+0x1dc>)
 800651c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006520:	08006617 	.word	0x08006617
 8006524:	08006675 	.word	0x08006675
 8006528:	08006675 	.word	0x08006675
 800652c:	08006675 	.word	0x08006675
 8006530:	08006675 	.word	0x08006675
 8006534:	08006675 	.word	0x08006675
 8006538:	08006675 	.word	0x08006675
 800653c:	08006675 	.word	0x08006675
 8006540:	08006675 	.word	0x08006675
 8006544:	08006675 	.word	0x08006675
 8006548:	08006675 	.word	0x08006675
 800654c:	080065a5 	.word	0x080065a5
 8006550:	080065cb 	.word	0x080065cb
 8006554:	08006675 	.word	0x08006675
 8006558:	08006675 	.word	0x08006675
 800655c:	08006675 	.word	0x08006675
 8006560:	08006675 	.word	0x08006675
 8006564:	08006675 	.word	0x08006675
 8006568:	08006675 	.word	0x08006675
 800656c:	08006675 	.word	0x08006675
 8006570:	08006675 	.word	0x08006675
 8006574:	08006675 	.word	0x08006675
 8006578:	08006675 	.word	0x08006675
 800657c:	08006675 	.word	0x08006675
 8006580:	08006641 	.word	0x08006641
 8006584:	08006675 	.word	0x08006675
 8006588:	08006675 	.word	0x08006675
 800658c:	08006675 	.word	0x08006675
 8006590:	08006675 	.word	0x08006675
 8006594:	080065f1 	.word	0x080065f1
 8006598:	08006675 	.word	0x08006675
 800659c:	08006675 	.word	0x08006675
 80065a0:	08006617 	.word	0x08006617
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	1d19      	adds	r1, r3, #4
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	6011      	str	r1, [r2, #0]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 80065b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 80065b8:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80065bc:	f107 0314 	add.w	r3, r7, #20
 80065c0:	4611      	mov	r1, r2
 80065c2:	4618      	mov	r0, r3
 80065c4:	f7ff fd1c 	bl	8006000 <_StoreChar>
        break;
 80065c8:	e055      	b.n	8006676 <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	1d19      	adds	r1, r3, #4
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	6011      	str	r1, [r2, #0]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 80065d8:	f107 0014 	add.w	r0, r7, #20
 80065dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065de:	9301      	str	r3, [sp, #4]
 80065e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065e2:	9300      	str	r3, [sp, #0]
 80065e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065e6:	220a      	movs	r2, #10
 80065e8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80065ea:	f7ff fe1b 	bl	8006224 <_PrintInt>
        break;
 80065ee:	e042      	b.n	8006676 <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	1d19      	adds	r1, r3, #4
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	6011      	str	r1, [r2, #0]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 80065fe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006600:	f107 0014 	add.w	r0, r7, #20
 8006604:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006606:	9301      	str	r3, [sp, #4]
 8006608:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800660a:	9300      	str	r3, [sp, #0]
 800660c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800660e:	220a      	movs	r2, #10
 8006610:	f7ff fd72 	bl	80060f8 <_PrintUnsigned>
        break;
 8006614:	e02f      	b.n	8006676 <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	1d19      	adds	r1, r3, #4
 800661c:	687a      	ldr	r2, [r7, #4]
 800661e:	6011      	str	r1, [r2, #0]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8006624:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006626:	f107 0014 	add.w	r0, r7, #20
 800662a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800662c:	9301      	str	r3, [sp, #4]
 800662e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006630:	9300      	str	r3, [sp, #0]
 8006632:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006634:	2210      	movs	r2, #16
 8006636:	f7ff fd5f 	bl	80060f8 <_PrintUnsigned>
        break;
 800663a:	e01c      	b.n	8006676 <_VPrintTarget+0x332>
 800663c:	20014420 	.word	0x20014420
      case 'p':
        v = va_arg(*pParamList, int);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	1d19      	adds	r1, r3, #4
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	6011      	str	r1, [r2, #0]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 800664e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006650:	f107 0014 	add.w	r0, r7, #20
 8006654:	2300      	movs	r3, #0
 8006656:	9301      	str	r3, [sp, #4]
 8006658:	2308      	movs	r3, #8
 800665a:	9300      	str	r3, [sp, #0]
 800665c:	2308      	movs	r3, #8
 800665e:	2210      	movs	r2, #16
 8006660:	f7ff fd4a 	bl	80060f8 <_PrintUnsigned>
        break;
 8006664:	e007      	b.n	8006676 <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8006666:	f107 0314 	add.w	r3, r7, #20
 800666a:	2125      	movs	r1, #37	; 0x25
 800666c:	4618      	mov	r0, r3
 800666e:	f7ff fcc7 	bl	8006000 <_StoreChar>
        break;
 8006672:	e000      	b.n	8006676 <_VPrintTarget+0x332>
      default:
        break;
 8006674:	bf00      	nop
      }
      sFormat++;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	3301      	adds	r3, #1
 800667a:	60fb      	str	r3, [r7, #12]
 800667c:	e007      	b.n	800668e <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 800667e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006682:	f107 0314 	add.w	r3, r7, #20
 8006686:	4611      	mov	r1, r2
 8006688:	4618      	mov	r0, r3
 800668a:	f7ff fcb9 	bl	8006000 <_StoreChar>
    }
  } while (*sFormat);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	781b      	ldrb	r3, [r3, #0]
 8006692:	2b00      	cmp	r3, #0
 8006694:	f47f ae72 	bne.w	800637c <_VPrintTarget+0x38>
 8006698:	e000      	b.n	800669c <_VPrintTarget+0x358>
      break;
 800669a:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 800669c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d041      	beq.n	8006726 <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 80066a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066a4:	69fb      	ldr	r3, [r7, #28]
 80066a6:	b2d2      	uxtb	r2, r2
 80066a8:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 80066aa:	69bb      	ldr	r3, [r7, #24]
 80066ac:	643b      	str	r3, [r7, #64]	; 0x40
 80066ae:	6a3b      	ldr	r3, [r7, #32]
 80066b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066b2:	e00b      	b.n	80066cc <_VPrintTarget+0x388>
 80066b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066b6:	b2da      	uxtb	r2, r3
 80066b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066ba:	1c59      	adds	r1, r3, #1
 80066bc:	6439      	str	r1, [r7, #64]	; 0x40
 80066be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066c2:	b2d2      	uxtb	r2, r2
 80066c4:	701a      	strb	r2, [r3, #0]
 80066c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066c8:	09db      	lsrs	r3, r3, #7
 80066ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066ce:	2b7f      	cmp	r3, #127	; 0x7f
 80066d0:	d8f0      	bhi.n	80066b4 <_VPrintTarget+0x370>
 80066d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066d4:	1c5a      	adds	r2, r3, #1
 80066d6:	643a      	str	r2, [r7, #64]	; 0x40
 80066d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80066da:	b2d2      	uxtb	r2, r2
 80066dc:	701a      	strb	r2, [r3, #0]
 80066de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066e0:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 80066e2:	69bb      	ldr	r3, [r7, #24]
 80066e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80066e6:	2300      	movs	r3, #0
 80066e8:	637b      	str	r3, [r7, #52]	; 0x34
 80066ea:	e00b      	b.n	8006704 <_VPrintTarget+0x3c0>
 80066ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066ee:	b2da      	uxtb	r2, r3
 80066f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f2:	1c59      	adds	r1, r3, #1
 80066f4:	63b9      	str	r1, [r7, #56]	; 0x38
 80066f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066fa:	b2d2      	uxtb	r2, r2
 80066fc:	701a      	strb	r2, [r3, #0]
 80066fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006700:	09db      	lsrs	r3, r3, #7
 8006702:	637b      	str	r3, [r7, #52]	; 0x34
 8006704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006706:	2b7f      	cmp	r3, #127	; 0x7f
 8006708:	d8f0      	bhi.n	80066ec <_VPrintTarget+0x3a8>
 800670a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800670c:	1c5a      	adds	r2, r3, #1
 800670e:	63ba      	str	r2, [r7, #56]	; 0x38
 8006710:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006712:	b2d2      	uxtb	r2, r2
 8006714:	701a      	strb	r2, [r3, #0]
 8006716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006718:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800671a:	69fb      	ldr	r3, [r7, #28]
 800671c:	69b9      	ldr	r1, [r7, #24]
 800671e:	221a      	movs	r2, #26
 8006720:	4618      	mov	r0, r3
 8006722:	f7ff fb85 	bl	8005e30 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8006726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006728:	f383 8811 	msr	BASEPRI, r3
#endif
}
 800672c:	bf00      	nop
 800672e:	3758      	adds	r7, #88	; 0x58
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}

08006734 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8006734:	b580      	push	{r7, lr}
 8006736:	b086      	sub	sp, #24
 8006738:	af02      	add	r7, sp, #8
 800673a:	60f8      	str	r0, [r7, #12]
 800673c:	60b9      	str	r1, [r7, #8]
 800673e:	607a      	str	r2, [r7, #4]
 8006740:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006742:	2300      	movs	r3, #0
 8006744:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006748:	4917      	ldr	r1, [pc, #92]	; (80067a8 <SEGGER_SYSVIEW_Init+0x74>)
 800674a:	4818      	ldr	r0, [pc, #96]	; (80067ac <SEGGER_SYSVIEW_Init+0x78>)
 800674c:	f7ff f93e 	bl	80059cc <SEGGER_RTT_AllocUpBuffer>
 8006750:	4603      	mov	r3, r0
 8006752:	b2da      	uxtb	r2, r3
 8006754:	4b16      	ldr	r3, [pc, #88]	; (80067b0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006756:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8006758:	4b15      	ldr	r3, [pc, #84]	; (80067b0 <SEGGER_SYSVIEW_Init+0x7c>)
 800675a:	785a      	ldrb	r2, [r3, #1]
 800675c:	4b14      	ldr	r3, [pc, #80]	; (80067b0 <SEGGER_SYSVIEW_Init+0x7c>)
 800675e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006760:	4b13      	ldr	r3, [pc, #76]	; (80067b0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006762:	7e1b      	ldrb	r3, [r3, #24]
 8006764:	4618      	mov	r0, r3
 8006766:	2300      	movs	r3, #0
 8006768:	9300      	str	r3, [sp, #0]
 800676a:	2308      	movs	r3, #8
 800676c:	4a11      	ldr	r2, [pc, #68]	; (80067b4 <SEGGER_SYSVIEW_Init+0x80>)
 800676e:	490f      	ldr	r1, [pc, #60]	; (80067ac <SEGGER_SYSVIEW_Init+0x78>)
 8006770:	f7ff f9b0 	bl	8005ad4 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8006774:	4b0e      	ldr	r3, [pc, #56]	; (80067b0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006776:	2200      	movs	r2, #0
 8006778:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800677a:	4b0f      	ldr	r3, [pc, #60]	; (80067b8 <SEGGER_SYSVIEW_Init+0x84>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a0c      	ldr	r2, [pc, #48]	; (80067b0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006780:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8006782:	4a0b      	ldr	r2, [pc, #44]	; (80067b0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8006788:	4a09      	ldr	r2, [pc, #36]	; (80067b0 <SEGGER_SYSVIEW_Init+0x7c>)
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800678e:	4a08      	ldr	r2, [pc, #32]	; (80067b0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8006794:	4a06      	ldr	r2, [pc, #24]	; (80067b0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800679a:	4b05      	ldr	r3, [pc, #20]	; (80067b0 <SEGGER_SYSVIEW_Init+0x7c>)
 800679c:	2200      	movs	r2, #0
 800679e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80067a0:	bf00      	nop
 80067a2:	3710      	adds	r7, #16
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}
 80067a8:	200133e8 	.word	0x200133e8
 80067ac:	08008248 	.word	0x08008248
 80067b0:	200143f0 	.word	0x200143f0
 80067b4:	200143e8 	.word	0x200143e8
 80067b8:	e0001004 	.word	0xe0001004

080067bc <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80067bc:	b480      	push	{r7}
 80067be:	b083      	sub	sp, #12
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80067c4:	4a04      	ldr	r2, [pc, #16]	; (80067d8 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6113      	str	r3, [r2, #16]
}
 80067ca:	bf00      	nop
 80067cc:	370c      	adds	r7, #12
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr
 80067d6:	bf00      	nop
 80067d8:	200143f0 	.word	0x200143f0

080067dc <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80067dc:	b580      	push	{r7, lr}
 80067de:	b084      	sub	sp, #16
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80067e4:	f3ef 8311 	mrs	r3, BASEPRI
 80067e8:	f04f 0120 	mov.w	r1, #32
 80067ec:	f381 8811 	msr	BASEPRI, r1
 80067f0:	60fb      	str	r3, [r7, #12]
 80067f2:	4808      	ldr	r0, [pc, #32]	; (8006814 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80067f4:	f7ff fa2b 	bl	8005c4e <_PreparePacket>
 80067f8:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80067fa:	687a      	ldr	r2, [r7, #4]
 80067fc:	68b9      	ldr	r1, [r7, #8]
 80067fe:	68b8      	ldr	r0, [r7, #8]
 8006800:	f7ff fb16 	bl	8005e30 <_SendPacket>
  RECORD_END();
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f383 8811 	msr	BASEPRI, r3
}
 800680a:	bf00      	nop
 800680c:	3710      	adds	r7, #16
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
 8006812:	bf00      	nop
 8006814:	20014420 	.word	0x20014420

08006818 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006818:	b580      	push	{r7, lr}
 800681a:	b088      	sub	sp, #32
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006822:	f3ef 8311 	mrs	r3, BASEPRI
 8006826:	f04f 0120 	mov.w	r1, #32
 800682a:	f381 8811 	msr	BASEPRI, r1
 800682e:	617b      	str	r3, [r7, #20]
 8006830:	4816      	ldr	r0, [pc, #88]	; (800688c <SEGGER_SYSVIEW_RecordU32+0x74>)
 8006832:	f7ff fa0c 	bl	8005c4e <_PreparePacket>
 8006836:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	61fb      	str	r3, [r7, #28]
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	61bb      	str	r3, [r7, #24]
 8006844:	e00b      	b.n	800685e <SEGGER_SYSVIEW_RecordU32+0x46>
 8006846:	69bb      	ldr	r3, [r7, #24]
 8006848:	b2da      	uxtb	r2, r3
 800684a:	69fb      	ldr	r3, [r7, #28]
 800684c:	1c59      	adds	r1, r3, #1
 800684e:	61f9      	str	r1, [r7, #28]
 8006850:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006854:	b2d2      	uxtb	r2, r2
 8006856:	701a      	strb	r2, [r3, #0]
 8006858:	69bb      	ldr	r3, [r7, #24]
 800685a:	09db      	lsrs	r3, r3, #7
 800685c:	61bb      	str	r3, [r7, #24]
 800685e:	69bb      	ldr	r3, [r7, #24]
 8006860:	2b7f      	cmp	r3, #127	; 0x7f
 8006862:	d8f0      	bhi.n	8006846 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006864:	69fb      	ldr	r3, [r7, #28]
 8006866:	1c5a      	adds	r2, r3, #1
 8006868:	61fa      	str	r2, [r7, #28]
 800686a:	69ba      	ldr	r2, [r7, #24]
 800686c:	b2d2      	uxtb	r2, r2
 800686e:	701a      	strb	r2, [r3, #0]
 8006870:	69fb      	ldr	r3, [r7, #28]
 8006872:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	68f9      	ldr	r1, [r7, #12]
 8006878:	6938      	ldr	r0, [r7, #16]
 800687a:	f7ff fad9 	bl	8005e30 <_SendPacket>
  RECORD_END();
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	f383 8811 	msr	BASEPRI, r3
}
 8006884:	bf00      	nop
 8006886:	3720      	adds	r7, #32
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}
 800688c:	20014420 	.word	0x20014420

08006890 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006890:	b580      	push	{r7, lr}
 8006892:	b08c      	sub	sp, #48	; 0x30
 8006894:	af00      	add	r7, sp, #0
 8006896:	60f8      	str	r0, [r7, #12]
 8006898:	60b9      	str	r1, [r7, #8]
 800689a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800689c:	f3ef 8311 	mrs	r3, BASEPRI
 80068a0:	f04f 0120 	mov.w	r1, #32
 80068a4:	f381 8811 	msr	BASEPRI, r1
 80068a8:	61fb      	str	r3, [r7, #28]
 80068aa:	4825      	ldr	r0, [pc, #148]	; (8006940 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80068ac:	f7ff f9cf 	bl	8005c4e <_PreparePacket>
 80068b0:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80068b2:	69bb      	ldr	r3, [r7, #24]
 80068b4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80068be:	e00b      	b.n	80068d8 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80068c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c2:	b2da      	uxtb	r2, r3
 80068c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068c6:	1c59      	adds	r1, r3, #1
 80068c8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80068ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068ce:	b2d2      	uxtb	r2, r2
 80068d0:	701a      	strb	r2, [r3, #0]
 80068d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d4:	09db      	lsrs	r3, r3, #7
 80068d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80068d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068da:	2b7f      	cmp	r3, #127	; 0x7f
 80068dc:	d8f0      	bhi.n	80068c0 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80068de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e0:	1c5a      	adds	r2, r3, #1
 80068e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80068e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068e6:	b2d2      	uxtb	r2, r2
 80068e8:	701a      	strb	r2, [r3, #0]
 80068ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ec:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	627b      	str	r3, [r7, #36]	; 0x24
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	623b      	str	r3, [r7, #32]
 80068f6:	e00b      	b.n	8006910 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80068f8:	6a3b      	ldr	r3, [r7, #32]
 80068fa:	b2da      	uxtb	r2, r3
 80068fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fe:	1c59      	adds	r1, r3, #1
 8006900:	6279      	str	r1, [r7, #36]	; 0x24
 8006902:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006906:	b2d2      	uxtb	r2, r2
 8006908:	701a      	strb	r2, [r3, #0]
 800690a:	6a3b      	ldr	r3, [r7, #32]
 800690c:	09db      	lsrs	r3, r3, #7
 800690e:	623b      	str	r3, [r7, #32]
 8006910:	6a3b      	ldr	r3, [r7, #32]
 8006912:	2b7f      	cmp	r3, #127	; 0x7f
 8006914:	d8f0      	bhi.n	80068f8 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8006916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006918:	1c5a      	adds	r2, r3, #1
 800691a:	627a      	str	r2, [r7, #36]	; 0x24
 800691c:	6a3a      	ldr	r2, [r7, #32]
 800691e:	b2d2      	uxtb	r2, r2
 8006920:	701a      	strb	r2, [r3, #0]
 8006922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006924:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006926:	68fa      	ldr	r2, [r7, #12]
 8006928:	6979      	ldr	r1, [r7, #20]
 800692a:	69b8      	ldr	r0, [r7, #24]
 800692c:	f7ff fa80 	bl	8005e30 <_SendPacket>
  RECORD_END();
 8006930:	69fb      	ldr	r3, [r7, #28]
 8006932:	f383 8811 	msr	BASEPRI, r3
}
 8006936:	bf00      	nop
 8006938:	3730      	adds	r7, #48	; 0x30
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}
 800693e:	bf00      	nop
 8006940:	20014420 	.word	0x20014420

08006944 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8006944:	b580      	push	{r7, lr}
 8006946:	b08e      	sub	sp, #56	; 0x38
 8006948:	af00      	add	r7, sp, #0
 800694a:	60f8      	str	r0, [r7, #12]
 800694c:	60b9      	str	r1, [r7, #8]
 800694e:	607a      	str	r2, [r7, #4]
 8006950:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8006952:	f3ef 8311 	mrs	r3, BASEPRI
 8006956:	f04f 0120 	mov.w	r1, #32
 800695a:	f381 8811 	msr	BASEPRI, r1
 800695e:	61fb      	str	r3, [r7, #28]
 8006960:	4832      	ldr	r0, [pc, #200]	; (8006a2c <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8006962:	f7ff f974 	bl	8005c4e <_PreparePacket>
 8006966:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006968:	69bb      	ldr	r3, [r7, #24]
 800696a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	637b      	str	r3, [r7, #52]	; 0x34
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	633b      	str	r3, [r7, #48]	; 0x30
 8006974:	e00b      	b.n	800698e <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8006976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006978:	b2da      	uxtb	r2, r3
 800697a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800697c:	1c59      	adds	r1, r3, #1
 800697e:	6379      	str	r1, [r7, #52]	; 0x34
 8006980:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006984:	b2d2      	uxtb	r2, r2
 8006986:	701a      	strb	r2, [r3, #0]
 8006988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800698a:	09db      	lsrs	r3, r3, #7
 800698c:	633b      	str	r3, [r7, #48]	; 0x30
 800698e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006990:	2b7f      	cmp	r3, #127	; 0x7f
 8006992:	d8f0      	bhi.n	8006976 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006996:	1c5a      	adds	r2, r3, #1
 8006998:	637a      	str	r2, [r7, #52]	; 0x34
 800699a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800699c:	b2d2      	uxtb	r2, r2
 800699e:	701a      	strb	r2, [r3, #0]
 80069a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069a2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80069ac:	e00b      	b.n	80069c6 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80069ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b0:	b2da      	uxtb	r2, r3
 80069b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069b4:	1c59      	adds	r1, r3, #1
 80069b6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80069b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069bc:	b2d2      	uxtb	r2, r2
 80069be:	701a      	strb	r2, [r3, #0]
 80069c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c2:	09db      	lsrs	r3, r3, #7
 80069c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80069c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c8:	2b7f      	cmp	r3, #127	; 0x7f
 80069ca:	d8f0      	bhi.n	80069ae <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80069cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ce:	1c5a      	adds	r2, r3, #1
 80069d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80069d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069d4:	b2d2      	uxtb	r2, r2
 80069d6:	701a      	strb	r2, [r3, #0]
 80069d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069da:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	627b      	str	r3, [r7, #36]	; 0x24
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	623b      	str	r3, [r7, #32]
 80069e4:	e00b      	b.n	80069fe <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80069e6:	6a3b      	ldr	r3, [r7, #32]
 80069e8:	b2da      	uxtb	r2, r3
 80069ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ec:	1c59      	adds	r1, r3, #1
 80069ee:	6279      	str	r1, [r7, #36]	; 0x24
 80069f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069f4:	b2d2      	uxtb	r2, r2
 80069f6:	701a      	strb	r2, [r3, #0]
 80069f8:	6a3b      	ldr	r3, [r7, #32]
 80069fa:	09db      	lsrs	r3, r3, #7
 80069fc:	623b      	str	r3, [r7, #32]
 80069fe:	6a3b      	ldr	r3, [r7, #32]
 8006a00:	2b7f      	cmp	r3, #127	; 0x7f
 8006a02:	d8f0      	bhi.n	80069e6 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8006a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a06:	1c5a      	adds	r2, r3, #1
 8006a08:	627a      	str	r2, [r7, #36]	; 0x24
 8006a0a:	6a3a      	ldr	r2, [r7, #32]
 8006a0c:	b2d2      	uxtb	r2, r2
 8006a0e:	701a      	strb	r2, [r3, #0]
 8006a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a12:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006a14:	68fa      	ldr	r2, [r7, #12]
 8006a16:	6979      	ldr	r1, [r7, #20]
 8006a18:	69b8      	ldr	r0, [r7, #24]
 8006a1a:	f7ff fa09 	bl	8005e30 <_SendPacket>
  RECORD_END();
 8006a1e:	69fb      	ldr	r3, [r7, #28]
 8006a20:	f383 8811 	msr	BASEPRI, r3
}
 8006a24:	bf00      	nop
 8006a26:	3738      	adds	r7, #56	; 0x38
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}
 8006a2c:	20014420 	.word	0x20014420

08006a30 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b090      	sub	sp, #64	; 0x40
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	60f8      	str	r0, [r7, #12]
 8006a38:	60b9      	str	r1, [r7, #8]
 8006a3a:	607a      	str	r2, [r7, #4]
 8006a3c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006a3e:	f3ef 8311 	mrs	r3, BASEPRI
 8006a42:	f04f 0120 	mov.w	r1, #32
 8006a46:	f381 8811 	msr	BASEPRI, r1
 8006a4a:	61fb      	str	r3, [r7, #28]
 8006a4c:	4840      	ldr	r0, [pc, #256]	; (8006b50 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8006a4e:	f7ff f8fe 	bl	8005c4e <_PreparePacket>
 8006a52:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006a54:	69bb      	ldr	r3, [r7, #24]
 8006a56:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a60:	e00b      	b.n	8006a7a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8006a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a64:	b2da      	uxtb	r2, r3
 8006a66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a68:	1c59      	adds	r1, r3, #1
 8006a6a:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006a6c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a70:	b2d2      	uxtb	r2, r2
 8006a72:	701a      	strb	r2, [r3, #0]
 8006a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a76:	09db      	lsrs	r3, r3, #7
 8006a78:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a7c:	2b7f      	cmp	r3, #127	; 0x7f
 8006a7e:	d8f0      	bhi.n	8006a62 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006a80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a82:	1c5a      	adds	r2, r3, #1
 8006a84:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006a86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a88:	b2d2      	uxtb	r2, r2
 8006a8a:	701a      	strb	r2, [r3, #0]
 8006a8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a8e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	637b      	str	r3, [r7, #52]	; 0x34
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	633b      	str	r3, [r7, #48]	; 0x30
 8006a98:	e00b      	b.n	8006ab2 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8006a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a9c:	b2da      	uxtb	r2, r3
 8006a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aa0:	1c59      	adds	r1, r3, #1
 8006aa2:	6379      	str	r1, [r7, #52]	; 0x34
 8006aa4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006aa8:	b2d2      	uxtb	r2, r2
 8006aaa:	701a      	strb	r2, [r3, #0]
 8006aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aae:	09db      	lsrs	r3, r3, #7
 8006ab0:	633b      	str	r3, [r7, #48]	; 0x30
 8006ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab4:	2b7f      	cmp	r3, #127	; 0x7f
 8006ab6:	d8f0      	bhi.n	8006a9a <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aba:	1c5a      	adds	r2, r3, #1
 8006abc:	637a      	str	r2, [r7, #52]	; 0x34
 8006abe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ac0:	b2d2      	uxtb	r2, r2
 8006ac2:	701a      	strb	r2, [r3, #0]
 8006ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ac6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ad0:	e00b      	b.n	8006aea <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8006ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad4:	b2da      	uxtb	r2, r3
 8006ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ad8:	1c59      	adds	r1, r3, #1
 8006ada:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006adc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ae0:	b2d2      	uxtb	r2, r2
 8006ae2:	701a      	strb	r2, [r3, #0]
 8006ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae6:	09db      	lsrs	r3, r3, #7
 8006ae8:	62bb      	str	r3, [r7, #40]	; 0x28
 8006aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aec:	2b7f      	cmp	r3, #127	; 0x7f
 8006aee:	d8f0      	bhi.n	8006ad2 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006af2:	1c5a      	adds	r2, r3, #1
 8006af4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006af6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006af8:	b2d2      	uxtb	r2, r2
 8006afa:	701a      	strb	r2, [r3, #0]
 8006afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006afe:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	627b      	str	r3, [r7, #36]	; 0x24
 8006b04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b06:	623b      	str	r3, [r7, #32]
 8006b08:	e00b      	b.n	8006b22 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8006b0a:	6a3b      	ldr	r3, [r7, #32]
 8006b0c:	b2da      	uxtb	r2, r3
 8006b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b10:	1c59      	adds	r1, r3, #1
 8006b12:	6279      	str	r1, [r7, #36]	; 0x24
 8006b14:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b18:	b2d2      	uxtb	r2, r2
 8006b1a:	701a      	strb	r2, [r3, #0]
 8006b1c:	6a3b      	ldr	r3, [r7, #32]
 8006b1e:	09db      	lsrs	r3, r3, #7
 8006b20:	623b      	str	r3, [r7, #32]
 8006b22:	6a3b      	ldr	r3, [r7, #32]
 8006b24:	2b7f      	cmp	r3, #127	; 0x7f
 8006b26:	d8f0      	bhi.n	8006b0a <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2a:	1c5a      	adds	r2, r3, #1
 8006b2c:	627a      	str	r2, [r7, #36]	; 0x24
 8006b2e:	6a3a      	ldr	r2, [r7, #32]
 8006b30:	b2d2      	uxtb	r2, r2
 8006b32:	701a      	strb	r2, [r3, #0]
 8006b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b36:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006b38:	68fa      	ldr	r2, [r7, #12]
 8006b3a:	6979      	ldr	r1, [r7, #20]
 8006b3c:	69b8      	ldr	r0, [r7, #24]
 8006b3e:	f7ff f977 	bl	8005e30 <_SendPacket>
  RECORD_END();
 8006b42:	69fb      	ldr	r3, [r7, #28]
 8006b44:	f383 8811 	msr	BASEPRI, r3
}
 8006b48:	bf00      	nop
 8006b4a:	3740      	adds	r7, #64	; 0x40
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}
 8006b50:	20014420 	.word	0x20014420

08006b54 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b08c      	sub	sp, #48	; 0x30
 8006b58:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006b5a:	4b59      	ldr	r3, [pc, #356]	; (8006cc0 <SEGGER_SYSVIEW_Start+0x16c>)
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006b60:	f3ef 8311 	mrs	r3, BASEPRI
 8006b64:	f04f 0120 	mov.w	r1, #32
 8006b68:	f381 8811 	msr	BASEPRI, r1
 8006b6c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006b6e:	4b54      	ldr	r3, [pc, #336]	; (8006cc0 <SEGGER_SYSVIEW_Start+0x16c>)
 8006b70:	785b      	ldrb	r3, [r3, #1]
 8006b72:	220a      	movs	r2, #10
 8006b74:	4953      	ldr	r1, [pc, #332]	; (8006cc4 <SEGGER_SYSVIEW_Start+0x170>)
 8006b76:	4618      	mov	r0, r3
 8006b78:	f7f9 fb4a 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8006b82:	f7fe fbf7 	bl	8005374 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006b86:	200a      	movs	r0, #10
 8006b88:	f7ff fe28 	bl	80067dc <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006b8c:	f3ef 8311 	mrs	r3, BASEPRI
 8006b90:	f04f 0120 	mov.w	r1, #32
 8006b94:	f381 8811 	msr	BASEPRI, r1
 8006b98:	60bb      	str	r3, [r7, #8]
 8006b9a:	484b      	ldr	r0, [pc, #300]	; (8006cc8 <SEGGER_SYSVIEW_Start+0x174>)
 8006b9c:	f7ff f857 	bl	8005c4e <_PreparePacket>
 8006ba0:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006baa:	4b45      	ldr	r3, [pc, #276]	; (8006cc0 <SEGGER_SYSVIEW_Start+0x16c>)
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bb0:	e00b      	b.n	8006bca <SEGGER_SYSVIEW_Start+0x76>
 8006bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb4:	b2da      	uxtb	r2, r3
 8006bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bb8:	1c59      	adds	r1, r3, #1
 8006bba:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006bbc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bc0:	b2d2      	uxtb	r2, r2
 8006bc2:	701a      	strb	r2, [r3, #0]
 8006bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc6:	09db      	lsrs	r3, r3, #7
 8006bc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bcc:	2b7f      	cmp	r3, #127	; 0x7f
 8006bce:	d8f0      	bhi.n	8006bb2 <SEGGER_SYSVIEW_Start+0x5e>
 8006bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bd2:	1c5a      	adds	r2, r3, #1
 8006bd4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006bd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bd8:	b2d2      	uxtb	r2, r2
 8006bda:	701a      	strb	r2, [r3, #0]
 8006bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bde:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	627b      	str	r3, [r7, #36]	; 0x24
 8006be4:	4b36      	ldr	r3, [pc, #216]	; (8006cc0 <SEGGER_SYSVIEW_Start+0x16c>)
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	623b      	str	r3, [r7, #32]
 8006bea:	e00b      	b.n	8006c04 <SEGGER_SYSVIEW_Start+0xb0>
 8006bec:	6a3b      	ldr	r3, [r7, #32]
 8006bee:	b2da      	uxtb	r2, r3
 8006bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf2:	1c59      	adds	r1, r3, #1
 8006bf4:	6279      	str	r1, [r7, #36]	; 0x24
 8006bf6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bfa:	b2d2      	uxtb	r2, r2
 8006bfc:	701a      	strb	r2, [r3, #0]
 8006bfe:	6a3b      	ldr	r3, [r7, #32]
 8006c00:	09db      	lsrs	r3, r3, #7
 8006c02:	623b      	str	r3, [r7, #32]
 8006c04:	6a3b      	ldr	r3, [r7, #32]
 8006c06:	2b7f      	cmp	r3, #127	; 0x7f
 8006c08:	d8f0      	bhi.n	8006bec <SEGGER_SYSVIEW_Start+0x98>
 8006c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c0c:	1c5a      	adds	r2, r3, #1
 8006c0e:	627a      	str	r2, [r7, #36]	; 0x24
 8006c10:	6a3a      	ldr	r2, [r7, #32]
 8006c12:	b2d2      	uxtb	r2, r2
 8006c14:	701a      	strb	r2, [r3, #0]
 8006c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c18:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	61fb      	str	r3, [r7, #28]
 8006c1e:	4b28      	ldr	r3, [pc, #160]	; (8006cc0 <SEGGER_SYSVIEW_Start+0x16c>)
 8006c20:	691b      	ldr	r3, [r3, #16]
 8006c22:	61bb      	str	r3, [r7, #24]
 8006c24:	e00b      	b.n	8006c3e <SEGGER_SYSVIEW_Start+0xea>
 8006c26:	69bb      	ldr	r3, [r7, #24]
 8006c28:	b2da      	uxtb	r2, r3
 8006c2a:	69fb      	ldr	r3, [r7, #28]
 8006c2c:	1c59      	adds	r1, r3, #1
 8006c2e:	61f9      	str	r1, [r7, #28]
 8006c30:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c34:	b2d2      	uxtb	r2, r2
 8006c36:	701a      	strb	r2, [r3, #0]
 8006c38:	69bb      	ldr	r3, [r7, #24]
 8006c3a:	09db      	lsrs	r3, r3, #7
 8006c3c:	61bb      	str	r3, [r7, #24]
 8006c3e:	69bb      	ldr	r3, [r7, #24]
 8006c40:	2b7f      	cmp	r3, #127	; 0x7f
 8006c42:	d8f0      	bhi.n	8006c26 <SEGGER_SYSVIEW_Start+0xd2>
 8006c44:	69fb      	ldr	r3, [r7, #28]
 8006c46:	1c5a      	adds	r2, r3, #1
 8006c48:	61fa      	str	r2, [r7, #28]
 8006c4a:	69ba      	ldr	r2, [r7, #24]
 8006c4c:	b2d2      	uxtb	r2, r2
 8006c4e:	701a      	strb	r2, [r3, #0]
 8006c50:	69fb      	ldr	r3, [r7, #28]
 8006c52:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	617b      	str	r3, [r7, #20]
 8006c58:	2300      	movs	r3, #0
 8006c5a:	613b      	str	r3, [r7, #16]
 8006c5c:	e00b      	b.n	8006c76 <SEGGER_SYSVIEW_Start+0x122>
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	b2da      	uxtb	r2, r3
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	1c59      	adds	r1, r3, #1
 8006c66:	6179      	str	r1, [r7, #20]
 8006c68:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c6c:	b2d2      	uxtb	r2, r2
 8006c6e:	701a      	strb	r2, [r3, #0]
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	09db      	lsrs	r3, r3, #7
 8006c74:	613b      	str	r3, [r7, #16]
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	2b7f      	cmp	r3, #127	; 0x7f
 8006c7a:	d8f0      	bhi.n	8006c5e <SEGGER_SYSVIEW_Start+0x10a>
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	1c5a      	adds	r2, r3, #1
 8006c80:	617a      	str	r2, [r7, #20]
 8006c82:	693a      	ldr	r2, [r7, #16]
 8006c84:	b2d2      	uxtb	r2, r2
 8006c86:	701a      	strb	r2, [r3, #0]
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006c8c:	2218      	movs	r2, #24
 8006c8e:	6839      	ldr	r1, [r7, #0]
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f7ff f8cd 	bl	8005e30 <_SendPacket>
      RECORD_END();
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006c9c:	4b08      	ldr	r3, [pc, #32]	; (8006cc0 <SEGGER_SYSVIEW_Start+0x16c>)
 8006c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d002      	beq.n	8006caa <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006ca4:	4b06      	ldr	r3, [pc, #24]	; (8006cc0 <SEGGER_SYSVIEW_Start+0x16c>)
 8006ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca8:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006caa:	f000 f9eb 	bl	8007084 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006cae:	f000 f9b1 	bl	8007014 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006cb2:	f000 fc23 	bl	80074fc <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006cb6:	bf00      	nop
 8006cb8:	3730      	adds	r7, #48	; 0x30
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}
 8006cbe:	bf00      	nop
 8006cc0:	200143f0 	.word	0x200143f0
 8006cc4:	08008274 	.word	0x08008274
 8006cc8:	20014420 	.word	0x20014420

08006ccc <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b082      	sub	sp, #8
 8006cd0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006cd2:	f3ef 8311 	mrs	r3, BASEPRI
 8006cd6:	f04f 0120 	mov.w	r1, #32
 8006cda:	f381 8811 	msr	BASEPRI, r1
 8006cde:	607b      	str	r3, [r7, #4]
 8006ce0:	480b      	ldr	r0, [pc, #44]	; (8006d10 <SEGGER_SYSVIEW_Stop+0x44>)
 8006ce2:	f7fe ffb4 	bl	8005c4e <_PreparePacket>
 8006ce6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006ce8:	4b0a      	ldr	r3, [pc, #40]	; (8006d14 <SEGGER_SYSVIEW_Stop+0x48>)
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d007      	beq.n	8006d00 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006cf0:	220b      	movs	r2, #11
 8006cf2:	6839      	ldr	r1, [r7, #0]
 8006cf4:	6838      	ldr	r0, [r7, #0]
 8006cf6:	f7ff f89b 	bl	8005e30 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006cfa:	4b06      	ldr	r3, [pc, #24]	; (8006d14 <SEGGER_SYSVIEW_Stop+0x48>)
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f383 8811 	msr	BASEPRI, r3
}
 8006d06:	bf00      	nop
 8006d08:	3708      	adds	r7, #8
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}
 8006d0e:	bf00      	nop
 8006d10:	20014420 	.word	0x20014420
 8006d14:	200143f0 	.word	0x200143f0

08006d18 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b08c      	sub	sp, #48	; 0x30
 8006d1c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006d1e:	f3ef 8311 	mrs	r3, BASEPRI
 8006d22:	f04f 0120 	mov.w	r1, #32
 8006d26:	f381 8811 	msr	BASEPRI, r1
 8006d2a:	60fb      	str	r3, [r7, #12]
 8006d2c:	4845      	ldr	r0, [pc, #276]	; (8006e44 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8006d2e:	f7fe ff8e 	bl	8005c4e <_PreparePacket>
 8006d32:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d3c:	4b42      	ldr	r3, [pc, #264]	; (8006e48 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d42:	e00b      	b.n	8006d5c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d46:	b2da      	uxtb	r2, r3
 8006d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d4a:	1c59      	adds	r1, r3, #1
 8006d4c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006d4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d52:	b2d2      	uxtb	r2, r2
 8006d54:	701a      	strb	r2, [r3, #0]
 8006d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d58:	09db      	lsrs	r3, r3, #7
 8006d5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d5e:	2b7f      	cmp	r3, #127	; 0x7f
 8006d60:	d8f0      	bhi.n	8006d44 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d64:	1c5a      	adds	r2, r3, #1
 8006d66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d6a:	b2d2      	uxtb	r2, r2
 8006d6c:	701a      	strb	r2, [r3, #0]
 8006d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d70:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	627b      	str	r3, [r7, #36]	; 0x24
 8006d76:	4b34      	ldr	r3, [pc, #208]	; (8006e48 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	623b      	str	r3, [r7, #32]
 8006d7c:	e00b      	b.n	8006d96 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006d7e:	6a3b      	ldr	r3, [r7, #32]
 8006d80:	b2da      	uxtb	r2, r3
 8006d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d84:	1c59      	adds	r1, r3, #1
 8006d86:	6279      	str	r1, [r7, #36]	; 0x24
 8006d88:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d8c:	b2d2      	uxtb	r2, r2
 8006d8e:	701a      	strb	r2, [r3, #0]
 8006d90:	6a3b      	ldr	r3, [r7, #32]
 8006d92:	09db      	lsrs	r3, r3, #7
 8006d94:	623b      	str	r3, [r7, #32]
 8006d96:	6a3b      	ldr	r3, [r7, #32]
 8006d98:	2b7f      	cmp	r3, #127	; 0x7f
 8006d9a:	d8f0      	bhi.n	8006d7e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9e:	1c5a      	adds	r2, r3, #1
 8006da0:	627a      	str	r2, [r7, #36]	; 0x24
 8006da2:	6a3a      	ldr	r2, [r7, #32]
 8006da4:	b2d2      	uxtb	r2, r2
 8006da6:	701a      	strb	r2, [r3, #0]
 8006da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006daa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	61fb      	str	r3, [r7, #28]
 8006db0:	4b25      	ldr	r3, [pc, #148]	; (8006e48 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006db2:	691b      	ldr	r3, [r3, #16]
 8006db4:	61bb      	str	r3, [r7, #24]
 8006db6:	e00b      	b.n	8006dd0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006db8:	69bb      	ldr	r3, [r7, #24]
 8006dba:	b2da      	uxtb	r2, r3
 8006dbc:	69fb      	ldr	r3, [r7, #28]
 8006dbe:	1c59      	adds	r1, r3, #1
 8006dc0:	61f9      	str	r1, [r7, #28]
 8006dc2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006dc6:	b2d2      	uxtb	r2, r2
 8006dc8:	701a      	strb	r2, [r3, #0]
 8006dca:	69bb      	ldr	r3, [r7, #24]
 8006dcc:	09db      	lsrs	r3, r3, #7
 8006dce:	61bb      	str	r3, [r7, #24]
 8006dd0:	69bb      	ldr	r3, [r7, #24]
 8006dd2:	2b7f      	cmp	r3, #127	; 0x7f
 8006dd4:	d8f0      	bhi.n	8006db8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006dd6:	69fb      	ldr	r3, [r7, #28]
 8006dd8:	1c5a      	adds	r2, r3, #1
 8006dda:	61fa      	str	r2, [r7, #28]
 8006ddc:	69ba      	ldr	r2, [r7, #24]
 8006dde:	b2d2      	uxtb	r2, r2
 8006de0:	701a      	strb	r2, [r3, #0]
 8006de2:	69fb      	ldr	r3, [r7, #28]
 8006de4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	617b      	str	r3, [r7, #20]
 8006dea:	2300      	movs	r3, #0
 8006dec:	613b      	str	r3, [r7, #16]
 8006dee:	e00b      	b.n	8006e08 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	b2da      	uxtb	r2, r3
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	1c59      	adds	r1, r3, #1
 8006df8:	6179      	str	r1, [r7, #20]
 8006dfa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006dfe:	b2d2      	uxtb	r2, r2
 8006e00:	701a      	strb	r2, [r3, #0]
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	09db      	lsrs	r3, r3, #7
 8006e06:	613b      	str	r3, [r7, #16]
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	2b7f      	cmp	r3, #127	; 0x7f
 8006e0c:	d8f0      	bhi.n	8006df0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	1c5a      	adds	r2, r3, #1
 8006e12:	617a      	str	r2, [r7, #20]
 8006e14:	693a      	ldr	r2, [r7, #16]
 8006e16:	b2d2      	uxtb	r2, r2
 8006e18:	701a      	strb	r2, [r3, #0]
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006e1e:	2218      	movs	r2, #24
 8006e20:	6879      	ldr	r1, [r7, #4]
 8006e22:	68b8      	ldr	r0, [r7, #8]
 8006e24:	f7ff f804 	bl	8005e30 <_SendPacket>
  RECORD_END();
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006e2e:	4b06      	ldr	r3, [pc, #24]	; (8006e48 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d002      	beq.n	8006e3c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006e36:	4b04      	ldr	r3, [pc, #16]	; (8006e48 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e3a:	4798      	blx	r3
  }
}
 8006e3c:	bf00      	nop
 8006e3e:	3730      	adds	r7, #48	; 0x30
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}
 8006e44:	20014420 	.word	0x20014420
 8006e48:	200143f0 	.word	0x200143f0

08006e4c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b092      	sub	sp, #72	; 0x48
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006e54:	f3ef 8311 	mrs	r3, BASEPRI
 8006e58:	f04f 0120 	mov.w	r1, #32
 8006e5c:	f381 8811 	msr	BASEPRI, r1
 8006e60:	617b      	str	r3, [r7, #20]
 8006e62:	486a      	ldr	r0, [pc, #424]	; (800700c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006e64:	f7fe fef3 	bl	8005c4e <_PreparePacket>
 8006e68:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	647b      	str	r3, [r7, #68]	; 0x44
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	4b66      	ldr	r3, [pc, #408]	; (8007010 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006e78:	691b      	ldr	r3, [r3, #16]
 8006e7a:	1ad3      	subs	r3, r2, r3
 8006e7c:	643b      	str	r3, [r7, #64]	; 0x40
 8006e7e:	e00b      	b.n	8006e98 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006e80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e82:	b2da      	uxtb	r2, r3
 8006e84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e86:	1c59      	adds	r1, r3, #1
 8006e88:	6479      	str	r1, [r7, #68]	; 0x44
 8006e8a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e8e:	b2d2      	uxtb	r2, r2
 8006e90:	701a      	strb	r2, [r3, #0]
 8006e92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e94:	09db      	lsrs	r3, r3, #7
 8006e96:	643b      	str	r3, [r7, #64]	; 0x40
 8006e98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e9a:	2b7f      	cmp	r3, #127	; 0x7f
 8006e9c:	d8f0      	bhi.n	8006e80 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006e9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ea0:	1c5a      	adds	r2, r3, #1
 8006ea2:	647a      	str	r2, [r7, #68]	; 0x44
 8006ea4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ea6:	b2d2      	uxtb	r2, r2
 8006ea8:	701a      	strb	r2, [r3, #0]
 8006eaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006eac:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	689b      	ldr	r3, [r3, #8]
 8006eb6:	63bb      	str	r3, [r7, #56]	; 0x38
 8006eb8:	e00b      	b.n	8006ed2 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ebc:	b2da      	uxtb	r2, r3
 8006ebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ec0:	1c59      	adds	r1, r3, #1
 8006ec2:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006ec4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ec8:	b2d2      	uxtb	r2, r2
 8006eca:	701a      	strb	r2, [r3, #0]
 8006ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ece:	09db      	lsrs	r3, r3, #7
 8006ed0:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed4:	2b7f      	cmp	r3, #127	; 0x7f
 8006ed6:	d8f0      	bhi.n	8006eba <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006ed8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006eda:	1c5a      	adds	r2, r3, #1
 8006edc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006ede:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ee0:	b2d2      	uxtb	r2, r2
 8006ee2:	701a      	strb	r2, [r3, #0]
 8006ee4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ee6:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	2220      	movs	r2, #32
 8006eee:	4619      	mov	r1, r3
 8006ef0:	68f8      	ldr	r0, [r7, #12]
 8006ef2:	f7fe fe5f 	bl	8005bb4 <_EncodeStr>
 8006ef6:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006ef8:	2209      	movs	r2, #9
 8006efa:	68f9      	ldr	r1, [r7, #12]
 8006efc:	6938      	ldr	r0, [r7, #16]
 8006efe:	f7fe ff97 	bl	8005e30 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	637b      	str	r3, [r7, #52]	; 0x34
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	4b40      	ldr	r3, [pc, #256]	; (8007010 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006f10:	691b      	ldr	r3, [r3, #16]
 8006f12:	1ad3      	subs	r3, r2, r3
 8006f14:	633b      	str	r3, [r7, #48]	; 0x30
 8006f16:	e00b      	b.n	8006f30 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f1a:	b2da      	uxtb	r2, r3
 8006f1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f1e:	1c59      	adds	r1, r3, #1
 8006f20:	6379      	str	r1, [r7, #52]	; 0x34
 8006f22:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f26:	b2d2      	uxtb	r2, r2
 8006f28:	701a      	strb	r2, [r3, #0]
 8006f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f2c:	09db      	lsrs	r3, r3, #7
 8006f2e:	633b      	str	r3, [r7, #48]	; 0x30
 8006f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f32:	2b7f      	cmp	r3, #127	; 0x7f
 8006f34:	d8f0      	bhi.n	8006f18 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006f36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f38:	1c5a      	adds	r2, r3, #1
 8006f3a:	637a      	str	r2, [r7, #52]	; 0x34
 8006f3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f3e:	b2d2      	uxtb	r2, r2
 8006f40:	701a      	strb	r2, [r3, #0]
 8006f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f44:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	68db      	ldr	r3, [r3, #12]
 8006f4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f50:	e00b      	b.n	8006f6a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f54:	b2da      	uxtb	r2, r3
 8006f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f58:	1c59      	adds	r1, r3, #1
 8006f5a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006f5c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f60:	b2d2      	uxtb	r2, r2
 8006f62:	701a      	strb	r2, [r3, #0]
 8006f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f66:	09db      	lsrs	r3, r3, #7
 8006f68:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f6c:	2b7f      	cmp	r3, #127	; 0x7f
 8006f6e:	d8f0      	bhi.n	8006f52 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f72:	1c5a      	adds	r2, r3, #1
 8006f74:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f78:	b2d2      	uxtb	r2, r2
 8006f7a:	701a      	strb	r2, [r3, #0]
 8006f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f7e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	627b      	str	r3, [r7, #36]	; 0x24
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	691b      	ldr	r3, [r3, #16]
 8006f88:	623b      	str	r3, [r7, #32]
 8006f8a:	e00b      	b.n	8006fa4 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006f8c:	6a3b      	ldr	r3, [r7, #32]
 8006f8e:	b2da      	uxtb	r2, r3
 8006f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f92:	1c59      	adds	r1, r3, #1
 8006f94:	6279      	str	r1, [r7, #36]	; 0x24
 8006f96:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f9a:	b2d2      	uxtb	r2, r2
 8006f9c:	701a      	strb	r2, [r3, #0]
 8006f9e:	6a3b      	ldr	r3, [r7, #32]
 8006fa0:	09db      	lsrs	r3, r3, #7
 8006fa2:	623b      	str	r3, [r7, #32]
 8006fa4:	6a3b      	ldr	r3, [r7, #32]
 8006fa6:	2b7f      	cmp	r3, #127	; 0x7f
 8006fa8:	d8f0      	bhi.n	8006f8c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fac:	1c5a      	adds	r2, r3, #1
 8006fae:	627a      	str	r2, [r7, #36]	; 0x24
 8006fb0:	6a3a      	ldr	r2, [r7, #32]
 8006fb2:	b2d2      	uxtb	r2, r2
 8006fb4:	701a      	strb	r2, [r3, #0]
 8006fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	61fb      	str	r3, [r7, #28]
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	61bb      	str	r3, [r7, #24]
 8006fc2:	e00b      	b.n	8006fdc <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006fc4:	69bb      	ldr	r3, [r7, #24]
 8006fc6:	b2da      	uxtb	r2, r3
 8006fc8:	69fb      	ldr	r3, [r7, #28]
 8006fca:	1c59      	adds	r1, r3, #1
 8006fcc:	61f9      	str	r1, [r7, #28]
 8006fce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006fd2:	b2d2      	uxtb	r2, r2
 8006fd4:	701a      	strb	r2, [r3, #0]
 8006fd6:	69bb      	ldr	r3, [r7, #24]
 8006fd8:	09db      	lsrs	r3, r3, #7
 8006fda:	61bb      	str	r3, [r7, #24]
 8006fdc:	69bb      	ldr	r3, [r7, #24]
 8006fde:	2b7f      	cmp	r3, #127	; 0x7f
 8006fe0:	d8f0      	bhi.n	8006fc4 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006fe2:	69fb      	ldr	r3, [r7, #28]
 8006fe4:	1c5a      	adds	r2, r3, #1
 8006fe6:	61fa      	str	r2, [r7, #28]
 8006fe8:	69ba      	ldr	r2, [r7, #24]
 8006fea:	b2d2      	uxtb	r2, r2
 8006fec:	701a      	strb	r2, [r3, #0]
 8006fee:	69fb      	ldr	r3, [r7, #28]
 8006ff0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006ff2:	2215      	movs	r2, #21
 8006ff4:	68f9      	ldr	r1, [r7, #12]
 8006ff6:	6938      	ldr	r0, [r7, #16]
 8006ff8:	f7fe ff1a 	bl	8005e30 <_SendPacket>
  RECORD_END();
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	f383 8811 	msr	BASEPRI, r3
}
 8007002:	bf00      	nop
 8007004:	3748      	adds	r7, #72	; 0x48
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}
 800700a:	bf00      	nop
 800700c:	20014420 	.word	0x20014420
 8007010:	200143f0 	.word	0x200143f0

08007014 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8007014:	b580      	push	{r7, lr}
 8007016:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8007018:	4b07      	ldr	r3, [pc, #28]	; (8007038 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800701a:	6a1b      	ldr	r3, [r3, #32]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d008      	beq.n	8007032 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8007020:	4b05      	ldr	r3, [pc, #20]	; (8007038 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007022:	6a1b      	ldr	r3, [r3, #32]
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d003      	beq.n	8007032 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800702a:	4b03      	ldr	r3, [pc, #12]	; (8007038 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800702c:	6a1b      	ldr	r3, [r3, #32]
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	4798      	blx	r3
  }
}
 8007032:	bf00      	nop
 8007034:	bd80      	pop	{r7, pc}
 8007036:	bf00      	nop
 8007038:	200143f0 	.word	0x200143f0

0800703c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800703c:	b580      	push	{r7, lr}
 800703e:	b086      	sub	sp, #24
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007044:	f3ef 8311 	mrs	r3, BASEPRI
 8007048:	f04f 0120 	mov.w	r1, #32
 800704c:	f381 8811 	msr	BASEPRI, r1
 8007050:	617b      	str	r3, [r7, #20]
 8007052:	480b      	ldr	r0, [pc, #44]	; (8007080 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8007054:	f7fe fdfb 	bl	8005c4e <_PreparePacket>
 8007058:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800705a:	2280      	movs	r2, #128	; 0x80
 800705c:	6879      	ldr	r1, [r7, #4]
 800705e:	6938      	ldr	r0, [r7, #16]
 8007060:	f7fe fda8 	bl	8005bb4 <_EncodeStr>
 8007064:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8007066:	220e      	movs	r2, #14
 8007068:	68f9      	ldr	r1, [r7, #12]
 800706a:	6938      	ldr	r0, [r7, #16]
 800706c:	f7fe fee0 	bl	8005e30 <_SendPacket>
  RECORD_END();
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	f383 8811 	msr	BASEPRI, r3
}
 8007076:	bf00      	nop
 8007078:	3718      	adds	r7, #24
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}
 800707e:	bf00      	nop
 8007080:	20014420 	.word	0x20014420

08007084 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8007084:	b590      	push	{r4, r7, lr}
 8007086:	b083      	sub	sp, #12
 8007088:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800708a:	4b15      	ldr	r3, [pc, #84]	; (80070e0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800708c:	6a1b      	ldr	r3, [r3, #32]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d01a      	beq.n	80070c8 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8007092:	4b13      	ldr	r3, [pc, #76]	; (80070e0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007094:	6a1b      	ldr	r3, [r3, #32]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d015      	beq.n	80070c8 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800709c:	4b10      	ldr	r3, [pc, #64]	; (80070e0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800709e:	6a1b      	ldr	r3, [r3, #32]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4798      	blx	r3
 80070a4:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80070a8:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80070aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80070ae:	f04f 0200 	mov.w	r2, #0
 80070b2:	f04f 0300 	mov.w	r3, #0
 80070b6:	000a      	movs	r2, r1
 80070b8:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80070ba:	4613      	mov	r3, r2
 80070bc:	461a      	mov	r2, r3
 80070be:	4621      	mov	r1, r4
 80070c0:	200d      	movs	r0, #13
 80070c2:	f7ff fbe5 	bl	8006890 <SEGGER_SYSVIEW_RecordU32x2>
 80070c6:	e006      	b.n	80070d6 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80070c8:	4b06      	ldr	r3, [pc, #24]	; (80070e4 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4619      	mov	r1, r3
 80070ce:	200c      	movs	r0, #12
 80070d0:	f7ff fba2 	bl	8006818 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80070d4:	bf00      	nop
 80070d6:	bf00      	nop
 80070d8:	370c      	adds	r7, #12
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd90      	pop	{r4, r7, pc}
 80070de:	bf00      	nop
 80070e0:	200143f0 	.word	0x200143f0
 80070e4:	e0001004 	.word	0xe0001004

080070e8 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b086      	sub	sp, #24
 80070ec:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80070ee:	f3ef 8311 	mrs	r3, BASEPRI
 80070f2:	f04f 0120 	mov.w	r1, #32
 80070f6:	f381 8811 	msr	BASEPRI, r1
 80070fa:	60fb      	str	r3, [r7, #12]
 80070fc:	4819      	ldr	r0, [pc, #100]	; (8007164 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80070fe:	f7fe fda6 	bl	8005c4e <_PreparePacket>
 8007102:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8007108:	4b17      	ldr	r3, [pc, #92]	; (8007168 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007110:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	617b      	str	r3, [r7, #20]
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	613b      	str	r3, [r7, #16]
 800711a:	e00b      	b.n	8007134 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	b2da      	uxtb	r2, r3
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	1c59      	adds	r1, r3, #1
 8007124:	6179      	str	r1, [r7, #20]
 8007126:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800712a:	b2d2      	uxtb	r2, r2
 800712c:	701a      	strb	r2, [r3, #0]
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	09db      	lsrs	r3, r3, #7
 8007132:	613b      	str	r3, [r7, #16]
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	2b7f      	cmp	r3, #127	; 0x7f
 8007138:	d8f0      	bhi.n	800711c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	1c5a      	adds	r2, r3, #1
 800713e:	617a      	str	r2, [r7, #20]
 8007140:	693a      	ldr	r2, [r7, #16]
 8007142:	b2d2      	uxtb	r2, r2
 8007144:	701a      	strb	r2, [r3, #0]
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800714a:	2202      	movs	r2, #2
 800714c:	6879      	ldr	r1, [r7, #4]
 800714e:	68b8      	ldr	r0, [r7, #8]
 8007150:	f7fe fe6e 	bl	8005e30 <_SendPacket>
  RECORD_END();
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	f383 8811 	msr	BASEPRI, r3
}
 800715a:	bf00      	nop
 800715c:	3718      	adds	r7, #24
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}
 8007162:	bf00      	nop
 8007164:	20014420 	.word	0x20014420
 8007168:	e000ed04 	.word	0xe000ed04

0800716c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800716c:	b580      	push	{r7, lr}
 800716e:	b082      	sub	sp, #8
 8007170:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007172:	f3ef 8311 	mrs	r3, BASEPRI
 8007176:	f04f 0120 	mov.w	r1, #32
 800717a:	f381 8811 	msr	BASEPRI, r1
 800717e:	607b      	str	r3, [r7, #4]
 8007180:	4807      	ldr	r0, [pc, #28]	; (80071a0 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8007182:	f7fe fd64 	bl	8005c4e <_PreparePacket>
 8007186:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8007188:	2203      	movs	r2, #3
 800718a:	6839      	ldr	r1, [r7, #0]
 800718c:	6838      	ldr	r0, [r7, #0]
 800718e:	f7fe fe4f 	bl	8005e30 <_SendPacket>
  RECORD_END();
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f383 8811 	msr	BASEPRI, r3
}
 8007198:	bf00      	nop
 800719a:	3708      	adds	r7, #8
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}
 80071a0:	20014420 	.word	0x20014420

080071a4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b082      	sub	sp, #8
 80071a8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80071aa:	f3ef 8311 	mrs	r3, BASEPRI
 80071ae:	f04f 0120 	mov.w	r1, #32
 80071b2:	f381 8811 	msr	BASEPRI, r1
 80071b6:	607b      	str	r3, [r7, #4]
 80071b8:	4807      	ldr	r0, [pc, #28]	; (80071d8 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80071ba:	f7fe fd48 	bl	8005c4e <_PreparePacket>
 80071be:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80071c0:	2212      	movs	r2, #18
 80071c2:	6839      	ldr	r1, [r7, #0]
 80071c4:	6838      	ldr	r0, [r7, #0]
 80071c6:	f7fe fe33 	bl	8005e30 <_SendPacket>
  RECORD_END();
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f383 8811 	msr	BASEPRI, r3
}
 80071d0:	bf00      	nop
 80071d2:	3708      	adds	r7, #8
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}
 80071d8:	20014420 	.word	0x20014420

080071dc <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80071dc:	b580      	push	{r7, lr}
 80071de:	b082      	sub	sp, #8
 80071e0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80071e2:	f3ef 8311 	mrs	r3, BASEPRI
 80071e6:	f04f 0120 	mov.w	r1, #32
 80071ea:	f381 8811 	msr	BASEPRI, r1
 80071ee:	607b      	str	r3, [r7, #4]
 80071f0:	4807      	ldr	r0, [pc, #28]	; (8007210 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80071f2:	f7fe fd2c 	bl	8005c4e <_PreparePacket>
 80071f6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80071f8:	2211      	movs	r2, #17
 80071fa:	6839      	ldr	r1, [r7, #0]
 80071fc:	6838      	ldr	r0, [r7, #0]
 80071fe:	f7fe fe17 	bl	8005e30 <_SendPacket>
  RECORD_END();
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f383 8811 	msr	BASEPRI, r3
}
 8007208:	bf00      	nop
 800720a:	3708      	adds	r7, #8
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}
 8007210:	20014420 	.word	0x20014420

08007214 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8007214:	b580      	push	{r7, lr}
 8007216:	b088      	sub	sp, #32
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800721c:	f3ef 8311 	mrs	r3, BASEPRI
 8007220:	f04f 0120 	mov.w	r1, #32
 8007224:	f381 8811 	msr	BASEPRI, r1
 8007228:	617b      	str	r3, [r7, #20]
 800722a:	4819      	ldr	r0, [pc, #100]	; (8007290 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800722c:	f7fe fd0f 	bl	8005c4e <_PreparePacket>
 8007230:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007236:	4b17      	ldr	r3, [pc, #92]	; (8007294 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8007238:	691b      	ldr	r3, [r3, #16]
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	1ad3      	subs	r3, r2, r3
 800723e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	61fb      	str	r3, [r7, #28]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	61bb      	str	r3, [r7, #24]
 8007248:	e00b      	b.n	8007262 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800724a:	69bb      	ldr	r3, [r7, #24]
 800724c:	b2da      	uxtb	r2, r3
 800724e:	69fb      	ldr	r3, [r7, #28]
 8007250:	1c59      	adds	r1, r3, #1
 8007252:	61f9      	str	r1, [r7, #28]
 8007254:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007258:	b2d2      	uxtb	r2, r2
 800725a:	701a      	strb	r2, [r3, #0]
 800725c:	69bb      	ldr	r3, [r7, #24]
 800725e:	09db      	lsrs	r3, r3, #7
 8007260:	61bb      	str	r3, [r7, #24]
 8007262:	69bb      	ldr	r3, [r7, #24]
 8007264:	2b7f      	cmp	r3, #127	; 0x7f
 8007266:	d8f0      	bhi.n	800724a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8007268:	69fb      	ldr	r3, [r7, #28]
 800726a:	1c5a      	adds	r2, r3, #1
 800726c:	61fa      	str	r2, [r7, #28]
 800726e:	69ba      	ldr	r2, [r7, #24]
 8007270:	b2d2      	uxtb	r2, r2
 8007272:	701a      	strb	r2, [r3, #0]
 8007274:	69fb      	ldr	r3, [r7, #28]
 8007276:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8007278:	2208      	movs	r2, #8
 800727a:	68f9      	ldr	r1, [r7, #12]
 800727c:	6938      	ldr	r0, [r7, #16]
 800727e:	f7fe fdd7 	bl	8005e30 <_SendPacket>
  RECORD_END();
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	f383 8811 	msr	BASEPRI, r3
}
 8007288:	bf00      	nop
 800728a:	3720      	adds	r7, #32
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}
 8007290:	20014420 	.word	0x20014420
 8007294:	200143f0 	.word	0x200143f0

08007298 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8007298:	b580      	push	{r7, lr}
 800729a:	b088      	sub	sp, #32
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80072a0:	f3ef 8311 	mrs	r3, BASEPRI
 80072a4:	f04f 0120 	mov.w	r1, #32
 80072a8:	f381 8811 	msr	BASEPRI, r1
 80072ac:	617b      	str	r3, [r7, #20]
 80072ae:	4819      	ldr	r0, [pc, #100]	; (8007314 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80072b0:	f7fe fccd 	bl	8005c4e <_PreparePacket>
 80072b4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80072ba:	4b17      	ldr	r3, [pc, #92]	; (8007318 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80072bc:	691b      	ldr	r3, [r3, #16]
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	1ad3      	subs	r3, r2, r3
 80072c2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	61fb      	str	r3, [r7, #28]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	61bb      	str	r3, [r7, #24]
 80072cc:	e00b      	b.n	80072e6 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80072ce:	69bb      	ldr	r3, [r7, #24]
 80072d0:	b2da      	uxtb	r2, r3
 80072d2:	69fb      	ldr	r3, [r7, #28]
 80072d4:	1c59      	adds	r1, r3, #1
 80072d6:	61f9      	str	r1, [r7, #28]
 80072d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80072dc:	b2d2      	uxtb	r2, r2
 80072de:	701a      	strb	r2, [r3, #0]
 80072e0:	69bb      	ldr	r3, [r7, #24]
 80072e2:	09db      	lsrs	r3, r3, #7
 80072e4:	61bb      	str	r3, [r7, #24]
 80072e6:	69bb      	ldr	r3, [r7, #24]
 80072e8:	2b7f      	cmp	r3, #127	; 0x7f
 80072ea:	d8f0      	bhi.n	80072ce <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80072ec:	69fb      	ldr	r3, [r7, #28]
 80072ee:	1c5a      	adds	r2, r3, #1
 80072f0:	61fa      	str	r2, [r7, #28]
 80072f2:	69ba      	ldr	r2, [r7, #24]
 80072f4:	b2d2      	uxtb	r2, r2
 80072f6:	701a      	strb	r2, [r3, #0]
 80072f8:	69fb      	ldr	r3, [r7, #28]
 80072fa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80072fc:	2204      	movs	r2, #4
 80072fe:	68f9      	ldr	r1, [r7, #12]
 8007300:	6938      	ldr	r0, [r7, #16]
 8007302:	f7fe fd95 	bl	8005e30 <_SendPacket>
  RECORD_END();
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	f383 8811 	msr	BASEPRI, r3
}
 800730c:	bf00      	nop
 800730e:	3720      	adds	r7, #32
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}
 8007314:	20014420 	.word	0x20014420
 8007318:	200143f0 	.word	0x200143f0

0800731c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800731c:	b580      	push	{r7, lr}
 800731e:	b088      	sub	sp, #32
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007324:	f3ef 8311 	mrs	r3, BASEPRI
 8007328:	f04f 0120 	mov.w	r1, #32
 800732c:	f381 8811 	msr	BASEPRI, r1
 8007330:	617b      	str	r3, [r7, #20]
 8007332:	4819      	ldr	r0, [pc, #100]	; (8007398 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8007334:	f7fe fc8b 	bl	8005c4e <_PreparePacket>
 8007338:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800733e:	4b17      	ldr	r3, [pc, #92]	; (800739c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8007340:	691b      	ldr	r3, [r3, #16]
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	1ad3      	subs	r3, r2, r3
 8007346:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	61fb      	str	r3, [r7, #28]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	61bb      	str	r3, [r7, #24]
 8007350:	e00b      	b.n	800736a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8007352:	69bb      	ldr	r3, [r7, #24]
 8007354:	b2da      	uxtb	r2, r3
 8007356:	69fb      	ldr	r3, [r7, #28]
 8007358:	1c59      	adds	r1, r3, #1
 800735a:	61f9      	str	r1, [r7, #28]
 800735c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007360:	b2d2      	uxtb	r2, r2
 8007362:	701a      	strb	r2, [r3, #0]
 8007364:	69bb      	ldr	r3, [r7, #24]
 8007366:	09db      	lsrs	r3, r3, #7
 8007368:	61bb      	str	r3, [r7, #24]
 800736a:	69bb      	ldr	r3, [r7, #24]
 800736c:	2b7f      	cmp	r3, #127	; 0x7f
 800736e:	d8f0      	bhi.n	8007352 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8007370:	69fb      	ldr	r3, [r7, #28]
 8007372:	1c5a      	adds	r2, r3, #1
 8007374:	61fa      	str	r2, [r7, #28]
 8007376:	69ba      	ldr	r2, [r7, #24]
 8007378:	b2d2      	uxtb	r2, r2
 800737a:	701a      	strb	r2, [r3, #0]
 800737c:	69fb      	ldr	r3, [r7, #28]
 800737e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8007380:	2206      	movs	r2, #6
 8007382:	68f9      	ldr	r1, [r7, #12]
 8007384:	6938      	ldr	r0, [r7, #16]
 8007386:	f7fe fd53 	bl	8005e30 <_SendPacket>
  RECORD_END();
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	f383 8811 	msr	BASEPRI, r3
}
 8007390:	bf00      	nop
 8007392:	3720      	adds	r7, #32
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}
 8007398:	20014420 	.word	0x20014420
 800739c:	200143f0 	.word	0x200143f0

080073a0 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80073a0:	b480      	push	{r7}
 80073a2:	b083      	sub	sp, #12
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80073a8:	4b04      	ldr	r3, [pc, #16]	; (80073bc <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80073aa:	691b      	ldr	r3, [r3, #16]
 80073ac:	687a      	ldr	r2, [r7, #4]
 80073ae:	1ad3      	subs	r3, r2, r3
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	370c      	adds	r7, #12
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr
 80073bc:	200143f0 	.word	0x200143f0

080073c0 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b08c      	sub	sp, #48	; 0x30
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	4603      	mov	r3, r0
 80073c8:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80073ca:	4b3b      	ldr	r3, [pc, #236]	; (80074b8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d06d      	beq.n	80074ae <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80073d2:	4b39      	ldr	r3, [pc, #228]	; (80074b8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80073d8:	2300      	movs	r3, #0
 80073da:	62bb      	str	r3, [r7, #40]	; 0x28
 80073dc:	e008      	b.n	80073f0 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80073de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073e0:	691b      	ldr	r3, [r3, #16]
 80073e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80073e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d007      	beq.n	80073fa <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80073ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ec:	3301      	adds	r3, #1
 80073ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80073f0:	79fb      	ldrb	r3, [r7, #7]
 80073f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073f4:	429a      	cmp	r2, r3
 80073f6:	d3f2      	bcc.n	80073de <SEGGER_SYSVIEW_SendModule+0x1e>
 80073f8:	e000      	b.n	80073fc <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80073fa:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80073fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d055      	beq.n	80074ae <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007402:	f3ef 8311 	mrs	r3, BASEPRI
 8007406:	f04f 0120 	mov.w	r1, #32
 800740a:	f381 8811 	msr	BASEPRI, r1
 800740e:	617b      	str	r3, [r7, #20]
 8007410:	482a      	ldr	r0, [pc, #168]	; (80074bc <SEGGER_SYSVIEW_SendModule+0xfc>)
 8007412:	f7fe fc1c 	bl	8005c4e <_PreparePacket>
 8007416:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	627b      	str	r3, [r7, #36]	; 0x24
 8007420:	79fb      	ldrb	r3, [r7, #7]
 8007422:	623b      	str	r3, [r7, #32]
 8007424:	e00b      	b.n	800743e <SEGGER_SYSVIEW_SendModule+0x7e>
 8007426:	6a3b      	ldr	r3, [r7, #32]
 8007428:	b2da      	uxtb	r2, r3
 800742a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800742c:	1c59      	adds	r1, r3, #1
 800742e:	6279      	str	r1, [r7, #36]	; 0x24
 8007430:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007434:	b2d2      	uxtb	r2, r2
 8007436:	701a      	strb	r2, [r3, #0]
 8007438:	6a3b      	ldr	r3, [r7, #32]
 800743a:	09db      	lsrs	r3, r3, #7
 800743c:	623b      	str	r3, [r7, #32]
 800743e:	6a3b      	ldr	r3, [r7, #32]
 8007440:	2b7f      	cmp	r3, #127	; 0x7f
 8007442:	d8f0      	bhi.n	8007426 <SEGGER_SYSVIEW_SendModule+0x66>
 8007444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007446:	1c5a      	adds	r2, r3, #1
 8007448:	627a      	str	r2, [r7, #36]	; 0x24
 800744a:	6a3a      	ldr	r2, [r7, #32]
 800744c:	b2d2      	uxtb	r2, r2
 800744e:	701a      	strb	r2, [r3, #0]
 8007450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007452:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	61fb      	str	r3, [r7, #28]
 8007458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800745a:	689b      	ldr	r3, [r3, #8]
 800745c:	61bb      	str	r3, [r7, #24]
 800745e:	e00b      	b.n	8007478 <SEGGER_SYSVIEW_SendModule+0xb8>
 8007460:	69bb      	ldr	r3, [r7, #24]
 8007462:	b2da      	uxtb	r2, r3
 8007464:	69fb      	ldr	r3, [r7, #28]
 8007466:	1c59      	adds	r1, r3, #1
 8007468:	61f9      	str	r1, [r7, #28]
 800746a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800746e:	b2d2      	uxtb	r2, r2
 8007470:	701a      	strb	r2, [r3, #0]
 8007472:	69bb      	ldr	r3, [r7, #24]
 8007474:	09db      	lsrs	r3, r3, #7
 8007476:	61bb      	str	r3, [r7, #24]
 8007478:	69bb      	ldr	r3, [r7, #24]
 800747a:	2b7f      	cmp	r3, #127	; 0x7f
 800747c:	d8f0      	bhi.n	8007460 <SEGGER_SYSVIEW_SendModule+0xa0>
 800747e:	69fb      	ldr	r3, [r7, #28]
 8007480:	1c5a      	adds	r2, r3, #1
 8007482:	61fa      	str	r2, [r7, #28]
 8007484:	69ba      	ldr	r2, [r7, #24]
 8007486:	b2d2      	uxtb	r2, r2
 8007488:	701a      	strb	r2, [r3, #0]
 800748a:	69fb      	ldr	r3, [r7, #28]
 800748c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800748e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	2280      	movs	r2, #128	; 0x80
 8007494:	4619      	mov	r1, r3
 8007496:	68f8      	ldr	r0, [r7, #12]
 8007498:	f7fe fb8c 	bl	8005bb4 <_EncodeStr>
 800749c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800749e:	2216      	movs	r2, #22
 80074a0:	68f9      	ldr	r1, [r7, #12]
 80074a2:	6938      	ldr	r0, [r7, #16]
 80074a4:	f7fe fcc4 	bl	8005e30 <_SendPacket>
      RECORD_END();
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80074ae:	bf00      	nop
 80074b0:	3730      	adds	r7, #48	; 0x30
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}
 80074b6:	bf00      	nop
 80074b8:	20014418 	.word	0x20014418
 80074bc:	20014420 	.word	0x20014420

080074c0 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b082      	sub	sp, #8
 80074c4:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80074c6:	4b0c      	ldr	r3, [pc, #48]	; (80074f8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d00f      	beq.n	80074ee <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80074ce:	4b0a      	ldr	r3, [pc, #40]	; (80074f8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	68db      	ldr	r3, [r3, #12]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d002      	beq.n	80074e2 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	68db      	ldr	r3, [r3, #12]
 80074e0:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	691b      	ldr	r3, [r3, #16]
 80074e6:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d1f2      	bne.n	80074d4 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80074ee:	bf00      	nop
 80074f0:	3708      	adds	r7, #8
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}
 80074f6:	bf00      	nop
 80074f8:	20014418 	.word	0x20014418

080074fc <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b086      	sub	sp, #24
 8007500:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8007502:	f3ef 8311 	mrs	r3, BASEPRI
 8007506:	f04f 0120 	mov.w	r1, #32
 800750a:	f381 8811 	msr	BASEPRI, r1
 800750e:	60fb      	str	r3, [r7, #12]
 8007510:	4817      	ldr	r0, [pc, #92]	; (8007570 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8007512:	f7fe fb9c 	bl	8005c4e <_PreparePacket>
 8007516:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	617b      	str	r3, [r7, #20]
 8007520:	4b14      	ldr	r3, [pc, #80]	; (8007574 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8007522:	781b      	ldrb	r3, [r3, #0]
 8007524:	613b      	str	r3, [r7, #16]
 8007526:	e00b      	b.n	8007540 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	b2da      	uxtb	r2, r3
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	1c59      	adds	r1, r3, #1
 8007530:	6179      	str	r1, [r7, #20]
 8007532:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007536:	b2d2      	uxtb	r2, r2
 8007538:	701a      	strb	r2, [r3, #0]
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	09db      	lsrs	r3, r3, #7
 800753e:	613b      	str	r3, [r7, #16]
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	2b7f      	cmp	r3, #127	; 0x7f
 8007544:	d8f0      	bhi.n	8007528 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	1c5a      	adds	r2, r3, #1
 800754a:	617a      	str	r2, [r7, #20]
 800754c:	693a      	ldr	r2, [r7, #16]
 800754e:	b2d2      	uxtb	r2, r2
 8007550:	701a      	strb	r2, [r3, #0]
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8007556:	221b      	movs	r2, #27
 8007558:	6879      	ldr	r1, [r7, #4]
 800755a:	68b8      	ldr	r0, [r7, #8]
 800755c:	f7fe fc68 	bl	8005e30 <_SendPacket>
  RECORD_END();
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f383 8811 	msr	BASEPRI, r3
}
 8007566:	bf00      	nop
 8007568:	3718      	adds	r7, #24
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}
 800756e:	bf00      	nop
 8007570:	20014420 	.word	0x20014420
 8007574:	2001441c 	.word	0x2001441c

08007578 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8007578:	b40f      	push	{r0, r1, r2, r3}
 800757a:	b580      	push	{r7, lr}
 800757c:	b082      	sub	sp, #8
 800757e:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8007580:	f107 0314 	add.w	r3, r7, #20
 8007584:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8007586:	1d3b      	adds	r3, r7, #4
 8007588:	461a      	mov	r2, r3
 800758a:	2100      	movs	r1, #0
 800758c:	6938      	ldr	r0, [r7, #16]
 800758e:	f7fe fed9 	bl	8006344 <_VPrintTarget>
  va_end(ParamList);
}
 8007592:	bf00      	nop
 8007594:	3708      	adds	r7, #8
 8007596:	46bd      	mov	sp, r7
 8007598:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800759c:	b004      	add	sp, #16
 800759e:	4770      	bx	lr

080075a0 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b08a      	sub	sp, #40	; 0x28
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80075a8:	f3ef 8311 	mrs	r3, BASEPRI
 80075ac:	f04f 0120 	mov.w	r1, #32
 80075b0:	f381 8811 	msr	BASEPRI, r1
 80075b4:	617b      	str	r3, [r7, #20]
 80075b6:	4827      	ldr	r0, [pc, #156]	; (8007654 <SEGGER_SYSVIEW_Warn+0xb4>)
 80075b8:	f7fe fb49 	bl	8005c4e <_PreparePacket>
 80075bc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80075be:	2280      	movs	r2, #128	; 0x80
 80075c0:	6879      	ldr	r1, [r7, #4]
 80075c2:	6938      	ldr	r0, [r7, #16]
 80075c4:	f7fe faf6 	bl	8005bb4 <_EncodeStr>
 80075c8:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	627b      	str	r3, [r7, #36]	; 0x24
 80075ce:	2301      	movs	r3, #1
 80075d0:	623b      	str	r3, [r7, #32]
 80075d2:	e00b      	b.n	80075ec <SEGGER_SYSVIEW_Warn+0x4c>
 80075d4:	6a3b      	ldr	r3, [r7, #32]
 80075d6:	b2da      	uxtb	r2, r3
 80075d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075da:	1c59      	adds	r1, r3, #1
 80075dc:	6279      	str	r1, [r7, #36]	; 0x24
 80075de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80075e2:	b2d2      	uxtb	r2, r2
 80075e4:	701a      	strb	r2, [r3, #0]
 80075e6:	6a3b      	ldr	r3, [r7, #32]
 80075e8:	09db      	lsrs	r3, r3, #7
 80075ea:	623b      	str	r3, [r7, #32]
 80075ec:	6a3b      	ldr	r3, [r7, #32]
 80075ee:	2b7f      	cmp	r3, #127	; 0x7f
 80075f0:	d8f0      	bhi.n	80075d4 <SEGGER_SYSVIEW_Warn+0x34>
 80075f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f4:	1c5a      	adds	r2, r3, #1
 80075f6:	627a      	str	r2, [r7, #36]	; 0x24
 80075f8:	6a3a      	ldr	r2, [r7, #32]
 80075fa:	b2d2      	uxtb	r2, r2
 80075fc:	701a      	strb	r2, [r3, #0]
 80075fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007600:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	61fb      	str	r3, [r7, #28]
 8007606:	2300      	movs	r3, #0
 8007608:	61bb      	str	r3, [r7, #24]
 800760a:	e00b      	b.n	8007624 <SEGGER_SYSVIEW_Warn+0x84>
 800760c:	69bb      	ldr	r3, [r7, #24]
 800760e:	b2da      	uxtb	r2, r3
 8007610:	69fb      	ldr	r3, [r7, #28]
 8007612:	1c59      	adds	r1, r3, #1
 8007614:	61f9      	str	r1, [r7, #28]
 8007616:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800761a:	b2d2      	uxtb	r2, r2
 800761c:	701a      	strb	r2, [r3, #0]
 800761e:	69bb      	ldr	r3, [r7, #24]
 8007620:	09db      	lsrs	r3, r3, #7
 8007622:	61bb      	str	r3, [r7, #24]
 8007624:	69bb      	ldr	r3, [r7, #24]
 8007626:	2b7f      	cmp	r3, #127	; 0x7f
 8007628:	d8f0      	bhi.n	800760c <SEGGER_SYSVIEW_Warn+0x6c>
 800762a:	69fb      	ldr	r3, [r7, #28]
 800762c:	1c5a      	adds	r2, r3, #1
 800762e:	61fa      	str	r2, [r7, #28]
 8007630:	69ba      	ldr	r2, [r7, #24]
 8007632:	b2d2      	uxtb	r2, r2
 8007634:	701a      	strb	r2, [r3, #0]
 8007636:	69fb      	ldr	r3, [r7, #28]
 8007638:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800763a:	221a      	movs	r2, #26
 800763c:	68f9      	ldr	r1, [r7, #12]
 800763e:	6938      	ldr	r0, [r7, #16]
 8007640:	f7fe fbf6 	bl	8005e30 <_SendPacket>
  RECORD_END();
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	f383 8811 	msr	BASEPRI, r3
}
 800764a:	bf00      	nop
 800764c:	3728      	adds	r7, #40	; 0x28
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}
 8007652:	bf00      	nop
 8007654:	20014420 	.word	0x20014420

08007658 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8007658:	b580      	push	{r7, lr}
 800765a:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800765c:	4b13      	ldr	r3, [pc, #76]	; (80076ac <SEGGER_SYSVIEW_IsStarted+0x54>)
 800765e:	7e1b      	ldrb	r3, [r3, #24]
 8007660:	4619      	mov	r1, r3
 8007662:	4a13      	ldr	r2, [pc, #76]	; (80076b0 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8007664:	460b      	mov	r3, r1
 8007666:	005b      	lsls	r3, r3, #1
 8007668:	440b      	add	r3, r1
 800766a:	00db      	lsls	r3, r3, #3
 800766c:	4413      	add	r3, r2
 800766e:	336c      	adds	r3, #108	; 0x6c
 8007670:	681a      	ldr	r2, [r3, #0]
 8007672:	4b0e      	ldr	r3, [pc, #56]	; (80076ac <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007674:	7e1b      	ldrb	r3, [r3, #24]
 8007676:	4618      	mov	r0, r3
 8007678:	490d      	ldr	r1, [pc, #52]	; (80076b0 <SEGGER_SYSVIEW_IsStarted+0x58>)
 800767a:	4603      	mov	r3, r0
 800767c:	005b      	lsls	r3, r3, #1
 800767e:	4403      	add	r3, r0
 8007680:	00db      	lsls	r3, r3, #3
 8007682:	440b      	add	r3, r1
 8007684:	3370      	adds	r3, #112	; 0x70
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	429a      	cmp	r2, r3
 800768a:	d00b      	beq.n	80076a4 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800768c:	4b07      	ldr	r3, [pc, #28]	; (80076ac <SEGGER_SYSVIEW_IsStarted+0x54>)
 800768e:	789b      	ldrb	r3, [r3, #2]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d107      	bne.n	80076a4 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8007694:	4b05      	ldr	r3, [pc, #20]	; (80076ac <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007696:	2201      	movs	r2, #1
 8007698:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800769a:	f7fe fae5 	bl	8005c68 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800769e:	4b03      	ldr	r3, [pc, #12]	; (80076ac <SEGGER_SYSVIEW_IsStarted+0x54>)
 80076a0:	2200      	movs	r2, #0
 80076a2:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 80076a4:	4b01      	ldr	r3, [pc, #4]	; (80076ac <SEGGER_SYSVIEW_IsStarted+0x54>)
 80076a6:	781b      	ldrb	r3, [r3, #0]
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	bd80      	pop	{r7, pc}
 80076ac:	200143f0 	.word	0x200143f0
 80076b0:	20012f30 	.word	0x20012f30

080076b4 <sniprintf>:
 80076b4:	b40c      	push	{r2, r3}
 80076b6:	b530      	push	{r4, r5, lr}
 80076b8:	4b17      	ldr	r3, [pc, #92]	; (8007718 <sniprintf+0x64>)
 80076ba:	1e0c      	subs	r4, r1, #0
 80076bc:	681d      	ldr	r5, [r3, #0]
 80076be:	b09d      	sub	sp, #116	; 0x74
 80076c0:	da08      	bge.n	80076d4 <sniprintf+0x20>
 80076c2:	238b      	movs	r3, #139	; 0x8b
 80076c4:	602b      	str	r3, [r5, #0]
 80076c6:	f04f 30ff 	mov.w	r0, #4294967295
 80076ca:	b01d      	add	sp, #116	; 0x74
 80076cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80076d0:	b002      	add	sp, #8
 80076d2:	4770      	bx	lr
 80076d4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80076d8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80076dc:	bf14      	ite	ne
 80076de:	f104 33ff 	addne.w	r3, r4, #4294967295
 80076e2:	4623      	moveq	r3, r4
 80076e4:	9304      	str	r3, [sp, #16]
 80076e6:	9307      	str	r3, [sp, #28]
 80076e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80076ec:	9002      	str	r0, [sp, #8]
 80076ee:	9006      	str	r0, [sp, #24]
 80076f0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80076f4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80076f6:	ab21      	add	r3, sp, #132	; 0x84
 80076f8:	a902      	add	r1, sp, #8
 80076fa:	4628      	mov	r0, r5
 80076fc:	9301      	str	r3, [sp, #4]
 80076fe:	f000 f9bb 	bl	8007a78 <_svfiprintf_r>
 8007702:	1c43      	adds	r3, r0, #1
 8007704:	bfbc      	itt	lt
 8007706:	238b      	movlt	r3, #139	; 0x8b
 8007708:	602b      	strlt	r3, [r5, #0]
 800770a:	2c00      	cmp	r4, #0
 800770c:	d0dd      	beq.n	80076ca <sniprintf+0x16>
 800770e:	9b02      	ldr	r3, [sp, #8]
 8007710:	2200      	movs	r2, #0
 8007712:	701a      	strb	r2, [r3, #0]
 8007714:	e7d9      	b.n	80076ca <sniprintf+0x16>
 8007716:	bf00      	nop
 8007718:	20000068 	.word	0x20000068

0800771c <memcmp>:
 800771c:	b510      	push	{r4, lr}
 800771e:	3901      	subs	r1, #1
 8007720:	4402      	add	r2, r0
 8007722:	4290      	cmp	r0, r2
 8007724:	d101      	bne.n	800772a <memcmp+0xe>
 8007726:	2000      	movs	r0, #0
 8007728:	e005      	b.n	8007736 <memcmp+0x1a>
 800772a:	7803      	ldrb	r3, [r0, #0]
 800772c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007730:	42a3      	cmp	r3, r4
 8007732:	d001      	beq.n	8007738 <memcmp+0x1c>
 8007734:	1b18      	subs	r0, r3, r4
 8007736:	bd10      	pop	{r4, pc}
 8007738:	3001      	adds	r0, #1
 800773a:	e7f2      	b.n	8007722 <memcmp+0x6>

0800773c <memset>:
 800773c:	4402      	add	r2, r0
 800773e:	4603      	mov	r3, r0
 8007740:	4293      	cmp	r3, r2
 8007742:	d100      	bne.n	8007746 <memset+0xa>
 8007744:	4770      	bx	lr
 8007746:	f803 1b01 	strb.w	r1, [r3], #1
 800774a:	e7f9      	b.n	8007740 <memset+0x4>

0800774c <strcat>:
 800774c:	b510      	push	{r4, lr}
 800774e:	4602      	mov	r2, r0
 8007750:	7814      	ldrb	r4, [r2, #0]
 8007752:	4613      	mov	r3, r2
 8007754:	3201      	adds	r2, #1
 8007756:	2c00      	cmp	r4, #0
 8007758:	d1fa      	bne.n	8007750 <strcat+0x4>
 800775a:	3b01      	subs	r3, #1
 800775c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007760:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007764:	2a00      	cmp	r2, #0
 8007766:	d1f9      	bne.n	800775c <strcat+0x10>
 8007768:	bd10      	pop	{r4, pc}
	...

0800776c <__libc_init_array>:
 800776c:	b570      	push	{r4, r5, r6, lr}
 800776e:	4d0d      	ldr	r5, [pc, #52]	; (80077a4 <__libc_init_array+0x38>)
 8007770:	4c0d      	ldr	r4, [pc, #52]	; (80077a8 <__libc_init_array+0x3c>)
 8007772:	1b64      	subs	r4, r4, r5
 8007774:	10a4      	asrs	r4, r4, #2
 8007776:	2600      	movs	r6, #0
 8007778:	42a6      	cmp	r6, r4
 800777a:	d109      	bne.n	8007790 <__libc_init_array+0x24>
 800777c:	4d0b      	ldr	r5, [pc, #44]	; (80077ac <__libc_init_array+0x40>)
 800777e:	4c0c      	ldr	r4, [pc, #48]	; (80077b0 <__libc_init_array+0x44>)
 8007780:	f000 fc78 	bl	8008074 <_init>
 8007784:	1b64      	subs	r4, r4, r5
 8007786:	10a4      	asrs	r4, r4, #2
 8007788:	2600      	movs	r6, #0
 800778a:	42a6      	cmp	r6, r4
 800778c:	d105      	bne.n	800779a <__libc_init_array+0x2e>
 800778e:	bd70      	pop	{r4, r5, r6, pc}
 8007790:	f855 3b04 	ldr.w	r3, [r5], #4
 8007794:	4798      	blx	r3
 8007796:	3601      	adds	r6, #1
 8007798:	e7ee      	b.n	8007778 <__libc_init_array+0xc>
 800779a:	f855 3b04 	ldr.w	r3, [r5], #4
 800779e:	4798      	blx	r3
 80077a0:	3601      	adds	r6, #1
 80077a2:	e7f2      	b.n	800778a <__libc_init_array+0x1e>
 80077a4:	080082cc 	.word	0x080082cc
 80077a8:	080082cc 	.word	0x080082cc
 80077ac:	080082cc 	.word	0x080082cc
 80077b0:	080082d0 	.word	0x080082d0

080077b4 <__retarget_lock_acquire_recursive>:
 80077b4:	4770      	bx	lr

080077b6 <__retarget_lock_release_recursive>:
 80077b6:	4770      	bx	lr

080077b8 <memcpy>:
 80077b8:	440a      	add	r2, r1
 80077ba:	4291      	cmp	r1, r2
 80077bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80077c0:	d100      	bne.n	80077c4 <memcpy+0xc>
 80077c2:	4770      	bx	lr
 80077c4:	b510      	push	{r4, lr}
 80077c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80077ce:	4291      	cmp	r1, r2
 80077d0:	d1f9      	bne.n	80077c6 <memcpy+0xe>
 80077d2:	bd10      	pop	{r4, pc}

080077d4 <_free_r>:
 80077d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80077d6:	2900      	cmp	r1, #0
 80077d8:	d044      	beq.n	8007864 <_free_r+0x90>
 80077da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077de:	9001      	str	r0, [sp, #4]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	f1a1 0404 	sub.w	r4, r1, #4
 80077e6:	bfb8      	it	lt
 80077e8:	18e4      	addlt	r4, r4, r3
 80077ea:	f000 f8df 	bl	80079ac <__malloc_lock>
 80077ee:	4a1e      	ldr	r2, [pc, #120]	; (8007868 <_free_r+0x94>)
 80077f0:	9801      	ldr	r0, [sp, #4]
 80077f2:	6813      	ldr	r3, [r2, #0]
 80077f4:	b933      	cbnz	r3, 8007804 <_free_r+0x30>
 80077f6:	6063      	str	r3, [r4, #4]
 80077f8:	6014      	str	r4, [r2, #0]
 80077fa:	b003      	add	sp, #12
 80077fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007800:	f000 b8da 	b.w	80079b8 <__malloc_unlock>
 8007804:	42a3      	cmp	r3, r4
 8007806:	d908      	bls.n	800781a <_free_r+0x46>
 8007808:	6825      	ldr	r5, [r4, #0]
 800780a:	1961      	adds	r1, r4, r5
 800780c:	428b      	cmp	r3, r1
 800780e:	bf01      	itttt	eq
 8007810:	6819      	ldreq	r1, [r3, #0]
 8007812:	685b      	ldreq	r3, [r3, #4]
 8007814:	1949      	addeq	r1, r1, r5
 8007816:	6021      	streq	r1, [r4, #0]
 8007818:	e7ed      	b.n	80077f6 <_free_r+0x22>
 800781a:	461a      	mov	r2, r3
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	b10b      	cbz	r3, 8007824 <_free_r+0x50>
 8007820:	42a3      	cmp	r3, r4
 8007822:	d9fa      	bls.n	800781a <_free_r+0x46>
 8007824:	6811      	ldr	r1, [r2, #0]
 8007826:	1855      	adds	r5, r2, r1
 8007828:	42a5      	cmp	r5, r4
 800782a:	d10b      	bne.n	8007844 <_free_r+0x70>
 800782c:	6824      	ldr	r4, [r4, #0]
 800782e:	4421      	add	r1, r4
 8007830:	1854      	adds	r4, r2, r1
 8007832:	42a3      	cmp	r3, r4
 8007834:	6011      	str	r1, [r2, #0]
 8007836:	d1e0      	bne.n	80077fa <_free_r+0x26>
 8007838:	681c      	ldr	r4, [r3, #0]
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	6053      	str	r3, [r2, #4]
 800783e:	440c      	add	r4, r1
 8007840:	6014      	str	r4, [r2, #0]
 8007842:	e7da      	b.n	80077fa <_free_r+0x26>
 8007844:	d902      	bls.n	800784c <_free_r+0x78>
 8007846:	230c      	movs	r3, #12
 8007848:	6003      	str	r3, [r0, #0]
 800784a:	e7d6      	b.n	80077fa <_free_r+0x26>
 800784c:	6825      	ldr	r5, [r4, #0]
 800784e:	1961      	adds	r1, r4, r5
 8007850:	428b      	cmp	r3, r1
 8007852:	bf04      	itt	eq
 8007854:	6819      	ldreq	r1, [r3, #0]
 8007856:	685b      	ldreq	r3, [r3, #4]
 8007858:	6063      	str	r3, [r4, #4]
 800785a:	bf04      	itt	eq
 800785c:	1949      	addeq	r1, r1, r5
 800785e:	6021      	streq	r1, [r4, #0]
 8007860:	6054      	str	r4, [r2, #4]
 8007862:	e7ca      	b.n	80077fa <_free_r+0x26>
 8007864:	b003      	add	sp, #12
 8007866:	bd30      	pop	{r4, r5, pc}
 8007868:	20014644 	.word	0x20014644

0800786c <sbrk_aligned>:
 800786c:	b570      	push	{r4, r5, r6, lr}
 800786e:	4e0e      	ldr	r6, [pc, #56]	; (80078a8 <sbrk_aligned+0x3c>)
 8007870:	460c      	mov	r4, r1
 8007872:	6831      	ldr	r1, [r6, #0]
 8007874:	4605      	mov	r5, r0
 8007876:	b911      	cbnz	r1, 800787e <sbrk_aligned+0x12>
 8007878:	f000 fba6 	bl	8007fc8 <_sbrk_r>
 800787c:	6030      	str	r0, [r6, #0]
 800787e:	4621      	mov	r1, r4
 8007880:	4628      	mov	r0, r5
 8007882:	f000 fba1 	bl	8007fc8 <_sbrk_r>
 8007886:	1c43      	adds	r3, r0, #1
 8007888:	d00a      	beq.n	80078a0 <sbrk_aligned+0x34>
 800788a:	1cc4      	adds	r4, r0, #3
 800788c:	f024 0403 	bic.w	r4, r4, #3
 8007890:	42a0      	cmp	r0, r4
 8007892:	d007      	beq.n	80078a4 <sbrk_aligned+0x38>
 8007894:	1a21      	subs	r1, r4, r0
 8007896:	4628      	mov	r0, r5
 8007898:	f000 fb96 	bl	8007fc8 <_sbrk_r>
 800789c:	3001      	adds	r0, #1
 800789e:	d101      	bne.n	80078a4 <sbrk_aligned+0x38>
 80078a0:	f04f 34ff 	mov.w	r4, #4294967295
 80078a4:	4620      	mov	r0, r4
 80078a6:	bd70      	pop	{r4, r5, r6, pc}
 80078a8:	20014648 	.word	0x20014648

080078ac <_malloc_r>:
 80078ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078b0:	1ccd      	adds	r5, r1, #3
 80078b2:	f025 0503 	bic.w	r5, r5, #3
 80078b6:	3508      	adds	r5, #8
 80078b8:	2d0c      	cmp	r5, #12
 80078ba:	bf38      	it	cc
 80078bc:	250c      	movcc	r5, #12
 80078be:	2d00      	cmp	r5, #0
 80078c0:	4607      	mov	r7, r0
 80078c2:	db01      	blt.n	80078c8 <_malloc_r+0x1c>
 80078c4:	42a9      	cmp	r1, r5
 80078c6:	d905      	bls.n	80078d4 <_malloc_r+0x28>
 80078c8:	230c      	movs	r3, #12
 80078ca:	603b      	str	r3, [r7, #0]
 80078cc:	2600      	movs	r6, #0
 80078ce:	4630      	mov	r0, r6
 80078d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078d4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80079a8 <_malloc_r+0xfc>
 80078d8:	f000 f868 	bl	80079ac <__malloc_lock>
 80078dc:	f8d8 3000 	ldr.w	r3, [r8]
 80078e0:	461c      	mov	r4, r3
 80078e2:	bb5c      	cbnz	r4, 800793c <_malloc_r+0x90>
 80078e4:	4629      	mov	r1, r5
 80078e6:	4638      	mov	r0, r7
 80078e8:	f7ff ffc0 	bl	800786c <sbrk_aligned>
 80078ec:	1c43      	adds	r3, r0, #1
 80078ee:	4604      	mov	r4, r0
 80078f0:	d155      	bne.n	800799e <_malloc_r+0xf2>
 80078f2:	f8d8 4000 	ldr.w	r4, [r8]
 80078f6:	4626      	mov	r6, r4
 80078f8:	2e00      	cmp	r6, #0
 80078fa:	d145      	bne.n	8007988 <_malloc_r+0xdc>
 80078fc:	2c00      	cmp	r4, #0
 80078fe:	d048      	beq.n	8007992 <_malloc_r+0xe6>
 8007900:	6823      	ldr	r3, [r4, #0]
 8007902:	4631      	mov	r1, r6
 8007904:	4638      	mov	r0, r7
 8007906:	eb04 0903 	add.w	r9, r4, r3
 800790a:	f000 fb5d 	bl	8007fc8 <_sbrk_r>
 800790e:	4581      	cmp	r9, r0
 8007910:	d13f      	bne.n	8007992 <_malloc_r+0xe6>
 8007912:	6821      	ldr	r1, [r4, #0]
 8007914:	1a6d      	subs	r5, r5, r1
 8007916:	4629      	mov	r1, r5
 8007918:	4638      	mov	r0, r7
 800791a:	f7ff ffa7 	bl	800786c <sbrk_aligned>
 800791e:	3001      	adds	r0, #1
 8007920:	d037      	beq.n	8007992 <_malloc_r+0xe6>
 8007922:	6823      	ldr	r3, [r4, #0]
 8007924:	442b      	add	r3, r5
 8007926:	6023      	str	r3, [r4, #0]
 8007928:	f8d8 3000 	ldr.w	r3, [r8]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d038      	beq.n	80079a2 <_malloc_r+0xf6>
 8007930:	685a      	ldr	r2, [r3, #4]
 8007932:	42a2      	cmp	r2, r4
 8007934:	d12b      	bne.n	800798e <_malloc_r+0xe2>
 8007936:	2200      	movs	r2, #0
 8007938:	605a      	str	r2, [r3, #4]
 800793a:	e00f      	b.n	800795c <_malloc_r+0xb0>
 800793c:	6822      	ldr	r2, [r4, #0]
 800793e:	1b52      	subs	r2, r2, r5
 8007940:	d41f      	bmi.n	8007982 <_malloc_r+0xd6>
 8007942:	2a0b      	cmp	r2, #11
 8007944:	d917      	bls.n	8007976 <_malloc_r+0xca>
 8007946:	1961      	adds	r1, r4, r5
 8007948:	42a3      	cmp	r3, r4
 800794a:	6025      	str	r5, [r4, #0]
 800794c:	bf18      	it	ne
 800794e:	6059      	strne	r1, [r3, #4]
 8007950:	6863      	ldr	r3, [r4, #4]
 8007952:	bf08      	it	eq
 8007954:	f8c8 1000 	streq.w	r1, [r8]
 8007958:	5162      	str	r2, [r4, r5]
 800795a:	604b      	str	r3, [r1, #4]
 800795c:	4638      	mov	r0, r7
 800795e:	f104 060b 	add.w	r6, r4, #11
 8007962:	f000 f829 	bl	80079b8 <__malloc_unlock>
 8007966:	f026 0607 	bic.w	r6, r6, #7
 800796a:	1d23      	adds	r3, r4, #4
 800796c:	1af2      	subs	r2, r6, r3
 800796e:	d0ae      	beq.n	80078ce <_malloc_r+0x22>
 8007970:	1b9b      	subs	r3, r3, r6
 8007972:	50a3      	str	r3, [r4, r2]
 8007974:	e7ab      	b.n	80078ce <_malloc_r+0x22>
 8007976:	42a3      	cmp	r3, r4
 8007978:	6862      	ldr	r2, [r4, #4]
 800797a:	d1dd      	bne.n	8007938 <_malloc_r+0x8c>
 800797c:	f8c8 2000 	str.w	r2, [r8]
 8007980:	e7ec      	b.n	800795c <_malloc_r+0xb0>
 8007982:	4623      	mov	r3, r4
 8007984:	6864      	ldr	r4, [r4, #4]
 8007986:	e7ac      	b.n	80078e2 <_malloc_r+0x36>
 8007988:	4634      	mov	r4, r6
 800798a:	6876      	ldr	r6, [r6, #4]
 800798c:	e7b4      	b.n	80078f8 <_malloc_r+0x4c>
 800798e:	4613      	mov	r3, r2
 8007990:	e7cc      	b.n	800792c <_malloc_r+0x80>
 8007992:	230c      	movs	r3, #12
 8007994:	603b      	str	r3, [r7, #0]
 8007996:	4638      	mov	r0, r7
 8007998:	f000 f80e 	bl	80079b8 <__malloc_unlock>
 800799c:	e797      	b.n	80078ce <_malloc_r+0x22>
 800799e:	6025      	str	r5, [r4, #0]
 80079a0:	e7dc      	b.n	800795c <_malloc_r+0xb0>
 80079a2:	605b      	str	r3, [r3, #4]
 80079a4:	deff      	udf	#255	; 0xff
 80079a6:	bf00      	nop
 80079a8:	20014644 	.word	0x20014644

080079ac <__malloc_lock>:
 80079ac:	4801      	ldr	r0, [pc, #4]	; (80079b4 <__malloc_lock+0x8>)
 80079ae:	f7ff bf01 	b.w	80077b4 <__retarget_lock_acquire_recursive>
 80079b2:	bf00      	nop
 80079b4:	20014640 	.word	0x20014640

080079b8 <__malloc_unlock>:
 80079b8:	4801      	ldr	r0, [pc, #4]	; (80079c0 <__malloc_unlock+0x8>)
 80079ba:	f7ff befc 	b.w	80077b6 <__retarget_lock_release_recursive>
 80079be:	bf00      	nop
 80079c0:	20014640 	.word	0x20014640

080079c4 <__ssputs_r>:
 80079c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079c8:	688e      	ldr	r6, [r1, #8]
 80079ca:	461f      	mov	r7, r3
 80079cc:	42be      	cmp	r6, r7
 80079ce:	680b      	ldr	r3, [r1, #0]
 80079d0:	4682      	mov	sl, r0
 80079d2:	460c      	mov	r4, r1
 80079d4:	4690      	mov	r8, r2
 80079d6:	d82c      	bhi.n	8007a32 <__ssputs_r+0x6e>
 80079d8:	898a      	ldrh	r2, [r1, #12]
 80079da:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80079de:	d026      	beq.n	8007a2e <__ssputs_r+0x6a>
 80079e0:	6965      	ldr	r5, [r4, #20]
 80079e2:	6909      	ldr	r1, [r1, #16]
 80079e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80079e8:	eba3 0901 	sub.w	r9, r3, r1
 80079ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80079f0:	1c7b      	adds	r3, r7, #1
 80079f2:	444b      	add	r3, r9
 80079f4:	106d      	asrs	r5, r5, #1
 80079f6:	429d      	cmp	r5, r3
 80079f8:	bf38      	it	cc
 80079fa:	461d      	movcc	r5, r3
 80079fc:	0553      	lsls	r3, r2, #21
 80079fe:	d527      	bpl.n	8007a50 <__ssputs_r+0x8c>
 8007a00:	4629      	mov	r1, r5
 8007a02:	f7ff ff53 	bl	80078ac <_malloc_r>
 8007a06:	4606      	mov	r6, r0
 8007a08:	b360      	cbz	r0, 8007a64 <__ssputs_r+0xa0>
 8007a0a:	6921      	ldr	r1, [r4, #16]
 8007a0c:	464a      	mov	r2, r9
 8007a0e:	f7ff fed3 	bl	80077b8 <memcpy>
 8007a12:	89a3      	ldrh	r3, [r4, #12]
 8007a14:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007a18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a1c:	81a3      	strh	r3, [r4, #12]
 8007a1e:	6126      	str	r6, [r4, #16]
 8007a20:	6165      	str	r5, [r4, #20]
 8007a22:	444e      	add	r6, r9
 8007a24:	eba5 0509 	sub.w	r5, r5, r9
 8007a28:	6026      	str	r6, [r4, #0]
 8007a2a:	60a5      	str	r5, [r4, #8]
 8007a2c:	463e      	mov	r6, r7
 8007a2e:	42be      	cmp	r6, r7
 8007a30:	d900      	bls.n	8007a34 <__ssputs_r+0x70>
 8007a32:	463e      	mov	r6, r7
 8007a34:	6820      	ldr	r0, [r4, #0]
 8007a36:	4632      	mov	r2, r6
 8007a38:	4641      	mov	r1, r8
 8007a3a:	f000 faab 	bl	8007f94 <memmove>
 8007a3e:	68a3      	ldr	r3, [r4, #8]
 8007a40:	1b9b      	subs	r3, r3, r6
 8007a42:	60a3      	str	r3, [r4, #8]
 8007a44:	6823      	ldr	r3, [r4, #0]
 8007a46:	4433      	add	r3, r6
 8007a48:	6023      	str	r3, [r4, #0]
 8007a4a:	2000      	movs	r0, #0
 8007a4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a50:	462a      	mov	r2, r5
 8007a52:	f000 fac9 	bl	8007fe8 <_realloc_r>
 8007a56:	4606      	mov	r6, r0
 8007a58:	2800      	cmp	r0, #0
 8007a5a:	d1e0      	bne.n	8007a1e <__ssputs_r+0x5a>
 8007a5c:	6921      	ldr	r1, [r4, #16]
 8007a5e:	4650      	mov	r0, sl
 8007a60:	f7ff feb8 	bl	80077d4 <_free_r>
 8007a64:	230c      	movs	r3, #12
 8007a66:	f8ca 3000 	str.w	r3, [sl]
 8007a6a:	89a3      	ldrh	r3, [r4, #12]
 8007a6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a70:	81a3      	strh	r3, [r4, #12]
 8007a72:	f04f 30ff 	mov.w	r0, #4294967295
 8007a76:	e7e9      	b.n	8007a4c <__ssputs_r+0x88>

08007a78 <_svfiprintf_r>:
 8007a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a7c:	4698      	mov	r8, r3
 8007a7e:	898b      	ldrh	r3, [r1, #12]
 8007a80:	061b      	lsls	r3, r3, #24
 8007a82:	b09d      	sub	sp, #116	; 0x74
 8007a84:	4607      	mov	r7, r0
 8007a86:	460d      	mov	r5, r1
 8007a88:	4614      	mov	r4, r2
 8007a8a:	d50e      	bpl.n	8007aaa <_svfiprintf_r+0x32>
 8007a8c:	690b      	ldr	r3, [r1, #16]
 8007a8e:	b963      	cbnz	r3, 8007aaa <_svfiprintf_r+0x32>
 8007a90:	2140      	movs	r1, #64	; 0x40
 8007a92:	f7ff ff0b 	bl	80078ac <_malloc_r>
 8007a96:	6028      	str	r0, [r5, #0]
 8007a98:	6128      	str	r0, [r5, #16]
 8007a9a:	b920      	cbnz	r0, 8007aa6 <_svfiprintf_r+0x2e>
 8007a9c:	230c      	movs	r3, #12
 8007a9e:	603b      	str	r3, [r7, #0]
 8007aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8007aa4:	e0d0      	b.n	8007c48 <_svfiprintf_r+0x1d0>
 8007aa6:	2340      	movs	r3, #64	; 0x40
 8007aa8:	616b      	str	r3, [r5, #20]
 8007aaa:	2300      	movs	r3, #0
 8007aac:	9309      	str	r3, [sp, #36]	; 0x24
 8007aae:	2320      	movs	r3, #32
 8007ab0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ab4:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ab8:	2330      	movs	r3, #48	; 0x30
 8007aba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007c60 <_svfiprintf_r+0x1e8>
 8007abe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ac2:	f04f 0901 	mov.w	r9, #1
 8007ac6:	4623      	mov	r3, r4
 8007ac8:	469a      	mov	sl, r3
 8007aca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ace:	b10a      	cbz	r2, 8007ad4 <_svfiprintf_r+0x5c>
 8007ad0:	2a25      	cmp	r2, #37	; 0x25
 8007ad2:	d1f9      	bne.n	8007ac8 <_svfiprintf_r+0x50>
 8007ad4:	ebba 0b04 	subs.w	fp, sl, r4
 8007ad8:	d00b      	beq.n	8007af2 <_svfiprintf_r+0x7a>
 8007ada:	465b      	mov	r3, fp
 8007adc:	4622      	mov	r2, r4
 8007ade:	4629      	mov	r1, r5
 8007ae0:	4638      	mov	r0, r7
 8007ae2:	f7ff ff6f 	bl	80079c4 <__ssputs_r>
 8007ae6:	3001      	adds	r0, #1
 8007ae8:	f000 80a9 	beq.w	8007c3e <_svfiprintf_r+0x1c6>
 8007aec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007aee:	445a      	add	r2, fp
 8007af0:	9209      	str	r2, [sp, #36]	; 0x24
 8007af2:	f89a 3000 	ldrb.w	r3, [sl]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	f000 80a1 	beq.w	8007c3e <_svfiprintf_r+0x1c6>
 8007afc:	2300      	movs	r3, #0
 8007afe:	f04f 32ff 	mov.w	r2, #4294967295
 8007b02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b06:	f10a 0a01 	add.w	sl, sl, #1
 8007b0a:	9304      	str	r3, [sp, #16]
 8007b0c:	9307      	str	r3, [sp, #28]
 8007b0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b12:	931a      	str	r3, [sp, #104]	; 0x68
 8007b14:	4654      	mov	r4, sl
 8007b16:	2205      	movs	r2, #5
 8007b18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b1c:	4850      	ldr	r0, [pc, #320]	; (8007c60 <_svfiprintf_r+0x1e8>)
 8007b1e:	f7f8 fbc7 	bl	80002b0 <memchr>
 8007b22:	9a04      	ldr	r2, [sp, #16]
 8007b24:	b9d8      	cbnz	r0, 8007b5e <_svfiprintf_r+0xe6>
 8007b26:	06d0      	lsls	r0, r2, #27
 8007b28:	bf44      	itt	mi
 8007b2a:	2320      	movmi	r3, #32
 8007b2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b30:	0711      	lsls	r1, r2, #28
 8007b32:	bf44      	itt	mi
 8007b34:	232b      	movmi	r3, #43	; 0x2b
 8007b36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b3a:	f89a 3000 	ldrb.w	r3, [sl]
 8007b3e:	2b2a      	cmp	r3, #42	; 0x2a
 8007b40:	d015      	beq.n	8007b6e <_svfiprintf_r+0xf6>
 8007b42:	9a07      	ldr	r2, [sp, #28]
 8007b44:	4654      	mov	r4, sl
 8007b46:	2000      	movs	r0, #0
 8007b48:	f04f 0c0a 	mov.w	ip, #10
 8007b4c:	4621      	mov	r1, r4
 8007b4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b52:	3b30      	subs	r3, #48	; 0x30
 8007b54:	2b09      	cmp	r3, #9
 8007b56:	d94d      	bls.n	8007bf4 <_svfiprintf_r+0x17c>
 8007b58:	b1b0      	cbz	r0, 8007b88 <_svfiprintf_r+0x110>
 8007b5a:	9207      	str	r2, [sp, #28]
 8007b5c:	e014      	b.n	8007b88 <_svfiprintf_r+0x110>
 8007b5e:	eba0 0308 	sub.w	r3, r0, r8
 8007b62:	fa09 f303 	lsl.w	r3, r9, r3
 8007b66:	4313      	orrs	r3, r2
 8007b68:	9304      	str	r3, [sp, #16]
 8007b6a:	46a2      	mov	sl, r4
 8007b6c:	e7d2      	b.n	8007b14 <_svfiprintf_r+0x9c>
 8007b6e:	9b03      	ldr	r3, [sp, #12]
 8007b70:	1d19      	adds	r1, r3, #4
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	9103      	str	r1, [sp, #12]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	bfbb      	ittet	lt
 8007b7a:	425b      	neglt	r3, r3
 8007b7c:	f042 0202 	orrlt.w	r2, r2, #2
 8007b80:	9307      	strge	r3, [sp, #28]
 8007b82:	9307      	strlt	r3, [sp, #28]
 8007b84:	bfb8      	it	lt
 8007b86:	9204      	strlt	r2, [sp, #16]
 8007b88:	7823      	ldrb	r3, [r4, #0]
 8007b8a:	2b2e      	cmp	r3, #46	; 0x2e
 8007b8c:	d10c      	bne.n	8007ba8 <_svfiprintf_r+0x130>
 8007b8e:	7863      	ldrb	r3, [r4, #1]
 8007b90:	2b2a      	cmp	r3, #42	; 0x2a
 8007b92:	d134      	bne.n	8007bfe <_svfiprintf_r+0x186>
 8007b94:	9b03      	ldr	r3, [sp, #12]
 8007b96:	1d1a      	adds	r2, r3, #4
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	9203      	str	r2, [sp, #12]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	bfb8      	it	lt
 8007ba0:	f04f 33ff 	movlt.w	r3, #4294967295
 8007ba4:	3402      	adds	r4, #2
 8007ba6:	9305      	str	r3, [sp, #20]
 8007ba8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007c70 <_svfiprintf_r+0x1f8>
 8007bac:	7821      	ldrb	r1, [r4, #0]
 8007bae:	2203      	movs	r2, #3
 8007bb0:	4650      	mov	r0, sl
 8007bb2:	f7f8 fb7d 	bl	80002b0 <memchr>
 8007bb6:	b138      	cbz	r0, 8007bc8 <_svfiprintf_r+0x150>
 8007bb8:	9b04      	ldr	r3, [sp, #16]
 8007bba:	eba0 000a 	sub.w	r0, r0, sl
 8007bbe:	2240      	movs	r2, #64	; 0x40
 8007bc0:	4082      	lsls	r2, r0
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	3401      	adds	r4, #1
 8007bc6:	9304      	str	r3, [sp, #16]
 8007bc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bcc:	4825      	ldr	r0, [pc, #148]	; (8007c64 <_svfiprintf_r+0x1ec>)
 8007bce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007bd2:	2206      	movs	r2, #6
 8007bd4:	f7f8 fb6c 	bl	80002b0 <memchr>
 8007bd8:	2800      	cmp	r0, #0
 8007bda:	d038      	beq.n	8007c4e <_svfiprintf_r+0x1d6>
 8007bdc:	4b22      	ldr	r3, [pc, #136]	; (8007c68 <_svfiprintf_r+0x1f0>)
 8007bde:	bb1b      	cbnz	r3, 8007c28 <_svfiprintf_r+0x1b0>
 8007be0:	9b03      	ldr	r3, [sp, #12]
 8007be2:	3307      	adds	r3, #7
 8007be4:	f023 0307 	bic.w	r3, r3, #7
 8007be8:	3308      	adds	r3, #8
 8007bea:	9303      	str	r3, [sp, #12]
 8007bec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bee:	4433      	add	r3, r6
 8007bf0:	9309      	str	r3, [sp, #36]	; 0x24
 8007bf2:	e768      	b.n	8007ac6 <_svfiprintf_r+0x4e>
 8007bf4:	fb0c 3202 	mla	r2, ip, r2, r3
 8007bf8:	460c      	mov	r4, r1
 8007bfa:	2001      	movs	r0, #1
 8007bfc:	e7a6      	b.n	8007b4c <_svfiprintf_r+0xd4>
 8007bfe:	2300      	movs	r3, #0
 8007c00:	3401      	adds	r4, #1
 8007c02:	9305      	str	r3, [sp, #20]
 8007c04:	4619      	mov	r1, r3
 8007c06:	f04f 0c0a 	mov.w	ip, #10
 8007c0a:	4620      	mov	r0, r4
 8007c0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c10:	3a30      	subs	r2, #48	; 0x30
 8007c12:	2a09      	cmp	r2, #9
 8007c14:	d903      	bls.n	8007c1e <_svfiprintf_r+0x1a6>
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d0c6      	beq.n	8007ba8 <_svfiprintf_r+0x130>
 8007c1a:	9105      	str	r1, [sp, #20]
 8007c1c:	e7c4      	b.n	8007ba8 <_svfiprintf_r+0x130>
 8007c1e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c22:	4604      	mov	r4, r0
 8007c24:	2301      	movs	r3, #1
 8007c26:	e7f0      	b.n	8007c0a <_svfiprintf_r+0x192>
 8007c28:	ab03      	add	r3, sp, #12
 8007c2a:	9300      	str	r3, [sp, #0]
 8007c2c:	462a      	mov	r2, r5
 8007c2e:	4b0f      	ldr	r3, [pc, #60]	; (8007c6c <_svfiprintf_r+0x1f4>)
 8007c30:	a904      	add	r1, sp, #16
 8007c32:	4638      	mov	r0, r7
 8007c34:	f3af 8000 	nop.w
 8007c38:	1c42      	adds	r2, r0, #1
 8007c3a:	4606      	mov	r6, r0
 8007c3c:	d1d6      	bne.n	8007bec <_svfiprintf_r+0x174>
 8007c3e:	89ab      	ldrh	r3, [r5, #12]
 8007c40:	065b      	lsls	r3, r3, #25
 8007c42:	f53f af2d 	bmi.w	8007aa0 <_svfiprintf_r+0x28>
 8007c46:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c48:	b01d      	add	sp, #116	; 0x74
 8007c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c4e:	ab03      	add	r3, sp, #12
 8007c50:	9300      	str	r3, [sp, #0]
 8007c52:	462a      	mov	r2, r5
 8007c54:	4b05      	ldr	r3, [pc, #20]	; (8007c6c <_svfiprintf_r+0x1f4>)
 8007c56:	a904      	add	r1, sp, #16
 8007c58:	4638      	mov	r0, r7
 8007c5a:	f000 f879 	bl	8007d50 <_printf_i>
 8007c5e:	e7eb      	b.n	8007c38 <_svfiprintf_r+0x1c0>
 8007c60:	08008290 	.word	0x08008290
 8007c64:	0800829a 	.word	0x0800829a
 8007c68:	00000000 	.word	0x00000000
 8007c6c:	080079c5 	.word	0x080079c5
 8007c70:	08008296 	.word	0x08008296

08007c74 <_printf_common>:
 8007c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c78:	4616      	mov	r6, r2
 8007c7a:	4699      	mov	r9, r3
 8007c7c:	688a      	ldr	r2, [r1, #8]
 8007c7e:	690b      	ldr	r3, [r1, #16]
 8007c80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007c84:	4293      	cmp	r3, r2
 8007c86:	bfb8      	it	lt
 8007c88:	4613      	movlt	r3, r2
 8007c8a:	6033      	str	r3, [r6, #0]
 8007c8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007c90:	4607      	mov	r7, r0
 8007c92:	460c      	mov	r4, r1
 8007c94:	b10a      	cbz	r2, 8007c9a <_printf_common+0x26>
 8007c96:	3301      	adds	r3, #1
 8007c98:	6033      	str	r3, [r6, #0]
 8007c9a:	6823      	ldr	r3, [r4, #0]
 8007c9c:	0699      	lsls	r1, r3, #26
 8007c9e:	bf42      	ittt	mi
 8007ca0:	6833      	ldrmi	r3, [r6, #0]
 8007ca2:	3302      	addmi	r3, #2
 8007ca4:	6033      	strmi	r3, [r6, #0]
 8007ca6:	6825      	ldr	r5, [r4, #0]
 8007ca8:	f015 0506 	ands.w	r5, r5, #6
 8007cac:	d106      	bne.n	8007cbc <_printf_common+0x48>
 8007cae:	f104 0a19 	add.w	sl, r4, #25
 8007cb2:	68e3      	ldr	r3, [r4, #12]
 8007cb4:	6832      	ldr	r2, [r6, #0]
 8007cb6:	1a9b      	subs	r3, r3, r2
 8007cb8:	42ab      	cmp	r3, r5
 8007cba:	dc26      	bgt.n	8007d0a <_printf_common+0x96>
 8007cbc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007cc0:	1e13      	subs	r3, r2, #0
 8007cc2:	6822      	ldr	r2, [r4, #0]
 8007cc4:	bf18      	it	ne
 8007cc6:	2301      	movne	r3, #1
 8007cc8:	0692      	lsls	r2, r2, #26
 8007cca:	d42b      	bmi.n	8007d24 <_printf_common+0xb0>
 8007ccc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007cd0:	4649      	mov	r1, r9
 8007cd2:	4638      	mov	r0, r7
 8007cd4:	47c0      	blx	r8
 8007cd6:	3001      	adds	r0, #1
 8007cd8:	d01e      	beq.n	8007d18 <_printf_common+0xa4>
 8007cda:	6823      	ldr	r3, [r4, #0]
 8007cdc:	6922      	ldr	r2, [r4, #16]
 8007cde:	f003 0306 	and.w	r3, r3, #6
 8007ce2:	2b04      	cmp	r3, #4
 8007ce4:	bf02      	ittt	eq
 8007ce6:	68e5      	ldreq	r5, [r4, #12]
 8007ce8:	6833      	ldreq	r3, [r6, #0]
 8007cea:	1aed      	subeq	r5, r5, r3
 8007cec:	68a3      	ldr	r3, [r4, #8]
 8007cee:	bf0c      	ite	eq
 8007cf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007cf4:	2500      	movne	r5, #0
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	bfc4      	itt	gt
 8007cfa:	1a9b      	subgt	r3, r3, r2
 8007cfc:	18ed      	addgt	r5, r5, r3
 8007cfe:	2600      	movs	r6, #0
 8007d00:	341a      	adds	r4, #26
 8007d02:	42b5      	cmp	r5, r6
 8007d04:	d11a      	bne.n	8007d3c <_printf_common+0xc8>
 8007d06:	2000      	movs	r0, #0
 8007d08:	e008      	b.n	8007d1c <_printf_common+0xa8>
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	4652      	mov	r2, sl
 8007d0e:	4649      	mov	r1, r9
 8007d10:	4638      	mov	r0, r7
 8007d12:	47c0      	blx	r8
 8007d14:	3001      	adds	r0, #1
 8007d16:	d103      	bne.n	8007d20 <_printf_common+0xac>
 8007d18:	f04f 30ff 	mov.w	r0, #4294967295
 8007d1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d20:	3501      	adds	r5, #1
 8007d22:	e7c6      	b.n	8007cb2 <_printf_common+0x3e>
 8007d24:	18e1      	adds	r1, r4, r3
 8007d26:	1c5a      	adds	r2, r3, #1
 8007d28:	2030      	movs	r0, #48	; 0x30
 8007d2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007d2e:	4422      	add	r2, r4
 8007d30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d38:	3302      	adds	r3, #2
 8007d3a:	e7c7      	b.n	8007ccc <_printf_common+0x58>
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	4622      	mov	r2, r4
 8007d40:	4649      	mov	r1, r9
 8007d42:	4638      	mov	r0, r7
 8007d44:	47c0      	blx	r8
 8007d46:	3001      	adds	r0, #1
 8007d48:	d0e6      	beq.n	8007d18 <_printf_common+0xa4>
 8007d4a:	3601      	adds	r6, #1
 8007d4c:	e7d9      	b.n	8007d02 <_printf_common+0x8e>
	...

08007d50 <_printf_i>:
 8007d50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d54:	7e0f      	ldrb	r7, [r1, #24]
 8007d56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007d58:	2f78      	cmp	r7, #120	; 0x78
 8007d5a:	4691      	mov	r9, r2
 8007d5c:	4680      	mov	r8, r0
 8007d5e:	460c      	mov	r4, r1
 8007d60:	469a      	mov	sl, r3
 8007d62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007d66:	d807      	bhi.n	8007d78 <_printf_i+0x28>
 8007d68:	2f62      	cmp	r7, #98	; 0x62
 8007d6a:	d80a      	bhi.n	8007d82 <_printf_i+0x32>
 8007d6c:	2f00      	cmp	r7, #0
 8007d6e:	f000 80d4 	beq.w	8007f1a <_printf_i+0x1ca>
 8007d72:	2f58      	cmp	r7, #88	; 0x58
 8007d74:	f000 80c0 	beq.w	8007ef8 <_printf_i+0x1a8>
 8007d78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007d80:	e03a      	b.n	8007df8 <_printf_i+0xa8>
 8007d82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007d86:	2b15      	cmp	r3, #21
 8007d88:	d8f6      	bhi.n	8007d78 <_printf_i+0x28>
 8007d8a:	a101      	add	r1, pc, #4	; (adr r1, 8007d90 <_printf_i+0x40>)
 8007d8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d90:	08007de9 	.word	0x08007de9
 8007d94:	08007dfd 	.word	0x08007dfd
 8007d98:	08007d79 	.word	0x08007d79
 8007d9c:	08007d79 	.word	0x08007d79
 8007da0:	08007d79 	.word	0x08007d79
 8007da4:	08007d79 	.word	0x08007d79
 8007da8:	08007dfd 	.word	0x08007dfd
 8007dac:	08007d79 	.word	0x08007d79
 8007db0:	08007d79 	.word	0x08007d79
 8007db4:	08007d79 	.word	0x08007d79
 8007db8:	08007d79 	.word	0x08007d79
 8007dbc:	08007f01 	.word	0x08007f01
 8007dc0:	08007e29 	.word	0x08007e29
 8007dc4:	08007ebb 	.word	0x08007ebb
 8007dc8:	08007d79 	.word	0x08007d79
 8007dcc:	08007d79 	.word	0x08007d79
 8007dd0:	08007f23 	.word	0x08007f23
 8007dd4:	08007d79 	.word	0x08007d79
 8007dd8:	08007e29 	.word	0x08007e29
 8007ddc:	08007d79 	.word	0x08007d79
 8007de0:	08007d79 	.word	0x08007d79
 8007de4:	08007ec3 	.word	0x08007ec3
 8007de8:	682b      	ldr	r3, [r5, #0]
 8007dea:	1d1a      	adds	r2, r3, #4
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	602a      	str	r2, [r5, #0]
 8007df0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007df4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007df8:	2301      	movs	r3, #1
 8007dfa:	e09f      	b.n	8007f3c <_printf_i+0x1ec>
 8007dfc:	6820      	ldr	r0, [r4, #0]
 8007dfe:	682b      	ldr	r3, [r5, #0]
 8007e00:	0607      	lsls	r7, r0, #24
 8007e02:	f103 0104 	add.w	r1, r3, #4
 8007e06:	6029      	str	r1, [r5, #0]
 8007e08:	d501      	bpl.n	8007e0e <_printf_i+0xbe>
 8007e0a:	681e      	ldr	r6, [r3, #0]
 8007e0c:	e003      	b.n	8007e16 <_printf_i+0xc6>
 8007e0e:	0646      	lsls	r6, r0, #25
 8007e10:	d5fb      	bpl.n	8007e0a <_printf_i+0xba>
 8007e12:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007e16:	2e00      	cmp	r6, #0
 8007e18:	da03      	bge.n	8007e22 <_printf_i+0xd2>
 8007e1a:	232d      	movs	r3, #45	; 0x2d
 8007e1c:	4276      	negs	r6, r6
 8007e1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e22:	485a      	ldr	r0, [pc, #360]	; (8007f8c <_printf_i+0x23c>)
 8007e24:	230a      	movs	r3, #10
 8007e26:	e012      	b.n	8007e4e <_printf_i+0xfe>
 8007e28:	682b      	ldr	r3, [r5, #0]
 8007e2a:	6820      	ldr	r0, [r4, #0]
 8007e2c:	1d19      	adds	r1, r3, #4
 8007e2e:	6029      	str	r1, [r5, #0]
 8007e30:	0605      	lsls	r5, r0, #24
 8007e32:	d501      	bpl.n	8007e38 <_printf_i+0xe8>
 8007e34:	681e      	ldr	r6, [r3, #0]
 8007e36:	e002      	b.n	8007e3e <_printf_i+0xee>
 8007e38:	0641      	lsls	r1, r0, #25
 8007e3a:	d5fb      	bpl.n	8007e34 <_printf_i+0xe4>
 8007e3c:	881e      	ldrh	r6, [r3, #0]
 8007e3e:	4853      	ldr	r0, [pc, #332]	; (8007f8c <_printf_i+0x23c>)
 8007e40:	2f6f      	cmp	r7, #111	; 0x6f
 8007e42:	bf0c      	ite	eq
 8007e44:	2308      	moveq	r3, #8
 8007e46:	230a      	movne	r3, #10
 8007e48:	2100      	movs	r1, #0
 8007e4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007e4e:	6865      	ldr	r5, [r4, #4]
 8007e50:	60a5      	str	r5, [r4, #8]
 8007e52:	2d00      	cmp	r5, #0
 8007e54:	bfa2      	ittt	ge
 8007e56:	6821      	ldrge	r1, [r4, #0]
 8007e58:	f021 0104 	bicge.w	r1, r1, #4
 8007e5c:	6021      	strge	r1, [r4, #0]
 8007e5e:	b90e      	cbnz	r6, 8007e64 <_printf_i+0x114>
 8007e60:	2d00      	cmp	r5, #0
 8007e62:	d04b      	beq.n	8007efc <_printf_i+0x1ac>
 8007e64:	4615      	mov	r5, r2
 8007e66:	fbb6 f1f3 	udiv	r1, r6, r3
 8007e6a:	fb03 6711 	mls	r7, r3, r1, r6
 8007e6e:	5dc7      	ldrb	r7, [r0, r7]
 8007e70:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007e74:	4637      	mov	r7, r6
 8007e76:	42bb      	cmp	r3, r7
 8007e78:	460e      	mov	r6, r1
 8007e7a:	d9f4      	bls.n	8007e66 <_printf_i+0x116>
 8007e7c:	2b08      	cmp	r3, #8
 8007e7e:	d10b      	bne.n	8007e98 <_printf_i+0x148>
 8007e80:	6823      	ldr	r3, [r4, #0]
 8007e82:	07de      	lsls	r6, r3, #31
 8007e84:	d508      	bpl.n	8007e98 <_printf_i+0x148>
 8007e86:	6923      	ldr	r3, [r4, #16]
 8007e88:	6861      	ldr	r1, [r4, #4]
 8007e8a:	4299      	cmp	r1, r3
 8007e8c:	bfde      	ittt	le
 8007e8e:	2330      	movle	r3, #48	; 0x30
 8007e90:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007e94:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007e98:	1b52      	subs	r2, r2, r5
 8007e9a:	6122      	str	r2, [r4, #16]
 8007e9c:	f8cd a000 	str.w	sl, [sp]
 8007ea0:	464b      	mov	r3, r9
 8007ea2:	aa03      	add	r2, sp, #12
 8007ea4:	4621      	mov	r1, r4
 8007ea6:	4640      	mov	r0, r8
 8007ea8:	f7ff fee4 	bl	8007c74 <_printf_common>
 8007eac:	3001      	adds	r0, #1
 8007eae:	d14a      	bne.n	8007f46 <_printf_i+0x1f6>
 8007eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8007eb4:	b004      	add	sp, #16
 8007eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007eba:	6823      	ldr	r3, [r4, #0]
 8007ebc:	f043 0320 	orr.w	r3, r3, #32
 8007ec0:	6023      	str	r3, [r4, #0]
 8007ec2:	4833      	ldr	r0, [pc, #204]	; (8007f90 <_printf_i+0x240>)
 8007ec4:	2778      	movs	r7, #120	; 0x78
 8007ec6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007eca:	6823      	ldr	r3, [r4, #0]
 8007ecc:	6829      	ldr	r1, [r5, #0]
 8007ece:	061f      	lsls	r7, r3, #24
 8007ed0:	f851 6b04 	ldr.w	r6, [r1], #4
 8007ed4:	d402      	bmi.n	8007edc <_printf_i+0x18c>
 8007ed6:	065f      	lsls	r7, r3, #25
 8007ed8:	bf48      	it	mi
 8007eda:	b2b6      	uxthmi	r6, r6
 8007edc:	07df      	lsls	r7, r3, #31
 8007ede:	bf48      	it	mi
 8007ee0:	f043 0320 	orrmi.w	r3, r3, #32
 8007ee4:	6029      	str	r1, [r5, #0]
 8007ee6:	bf48      	it	mi
 8007ee8:	6023      	strmi	r3, [r4, #0]
 8007eea:	b91e      	cbnz	r6, 8007ef4 <_printf_i+0x1a4>
 8007eec:	6823      	ldr	r3, [r4, #0]
 8007eee:	f023 0320 	bic.w	r3, r3, #32
 8007ef2:	6023      	str	r3, [r4, #0]
 8007ef4:	2310      	movs	r3, #16
 8007ef6:	e7a7      	b.n	8007e48 <_printf_i+0xf8>
 8007ef8:	4824      	ldr	r0, [pc, #144]	; (8007f8c <_printf_i+0x23c>)
 8007efa:	e7e4      	b.n	8007ec6 <_printf_i+0x176>
 8007efc:	4615      	mov	r5, r2
 8007efe:	e7bd      	b.n	8007e7c <_printf_i+0x12c>
 8007f00:	682b      	ldr	r3, [r5, #0]
 8007f02:	6826      	ldr	r6, [r4, #0]
 8007f04:	6961      	ldr	r1, [r4, #20]
 8007f06:	1d18      	adds	r0, r3, #4
 8007f08:	6028      	str	r0, [r5, #0]
 8007f0a:	0635      	lsls	r5, r6, #24
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	d501      	bpl.n	8007f14 <_printf_i+0x1c4>
 8007f10:	6019      	str	r1, [r3, #0]
 8007f12:	e002      	b.n	8007f1a <_printf_i+0x1ca>
 8007f14:	0670      	lsls	r0, r6, #25
 8007f16:	d5fb      	bpl.n	8007f10 <_printf_i+0x1c0>
 8007f18:	8019      	strh	r1, [r3, #0]
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	6123      	str	r3, [r4, #16]
 8007f1e:	4615      	mov	r5, r2
 8007f20:	e7bc      	b.n	8007e9c <_printf_i+0x14c>
 8007f22:	682b      	ldr	r3, [r5, #0]
 8007f24:	1d1a      	adds	r2, r3, #4
 8007f26:	602a      	str	r2, [r5, #0]
 8007f28:	681d      	ldr	r5, [r3, #0]
 8007f2a:	6862      	ldr	r2, [r4, #4]
 8007f2c:	2100      	movs	r1, #0
 8007f2e:	4628      	mov	r0, r5
 8007f30:	f7f8 f9be 	bl	80002b0 <memchr>
 8007f34:	b108      	cbz	r0, 8007f3a <_printf_i+0x1ea>
 8007f36:	1b40      	subs	r0, r0, r5
 8007f38:	6060      	str	r0, [r4, #4]
 8007f3a:	6863      	ldr	r3, [r4, #4]
 8007f3c:	6123      	str	r3, [r4, #16]
 8007f3e:	2300      	movs	r3, #0
 8007f40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f44:	e7aa      	b.n	8007e9c <_printf_i+0x14c>
 8007f46:	6923      	ldr	r3, [r4, #16]
 8007f48:	462a      	mov	r2, r5
 8007f4a:	4649      	mov	r1, r9
 8007f4c:	4640      	mov	r0, r8
 8007f4e:	47d0      	blx	sl
 8007f50:	3001      	adds	r0, #1
 8007f52:	d0ad      	beq.n	8007eb0 <_printf_i+0x160>
 8007f54:	6823      	ldr	r3, [r4, #0]
 8007f56:	079b      	lsls	r3, r3, #30
 8007f58:	d413      	bmi.n	8007f82 <_printf_i+0x232>
 8007f5a:	68e0      	ldr	r0, [r4, #12]
 8007f5c:	9b03      	ldr	r3, [sp, #12]
 8007f5e:	4298      	cmp	r0, r3
 8007f60:	bfb8      	it	lt
 8007f62:	4618      	movlt	r0, r3
 8007f64:	e7a6      	b.n	8007eb4 <_printf_i+0x164>
 8007f66:	2301      	movs	r3, #1
 8007f68:	4632      	mov	r2, r6
 8007f6a:	4649      	mov	r1, r9
 8007f6c:	4640      	mov	r0, r8
 8007f6e:	47d0      	blx	sl
 8007f70:	3001      	adds	r0, #1
 8007f72:	d09d      	beq.n	8007eb0 <_printf_i+0x160>
 8007f74:	3501      	adds	r5, #1
 8007f76:	68e3      	ldr	r3, [r4, #12]
 8007f78:	9903      	ldr	r1, [sp, #12]
 8007f7a:	1a5b      	subs	r3, r3, r1
 8007f7c:	42ab      	cmp	r3, r5
 8007f7e:	dcf2      	bgt.n	8007f66 <_printf_i+0x216>
 8007f80:	e7eb      	b.n	8007f5a <_printf_i+0x20a>
 8007f82:	2500      	movs	r5, #0
 8007f84:	f104 0619 	add.w	r6, r4, #25
 8007f88:	e7f5      	b.n	8007f76 <_printf_i+0x226>
 8007f8a:	bf00      	nop
 8007f8c:	080082a1 	.word	0x080082a1
 8007f90:	080082b2 	.word	0x080082b2

08007f94 <memmove>:
 8007f94:	4288      	cmp	r0, r1
 8007f96:	b510      	push	{r4, lr}
 8007f98:	eb01 0402 	add.w	r4, r1, r2
 8007f9c:	d902      	bls.n	8007fa4 <memmove+0x10>
 8007f9e:	4284      	cmp	r4, r0
 8007fa0:	4623      	mov	r3, r4
 8007fa2:	d807      	bhi.n	8007fb4 <memmove+0x20>
 8007fa4:	1e43      	subs	r3, r0, #1
 8007fa6:	42a1      	cmp	r1, r4
 8007fa8:	d008      	beq.n	8007fbc <memmove+0x28>
 8007faa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007fae:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007fb2:	e7f8      	b.n	8007fa6 <memmove+0x12>
 8007fb4:	4402      	add	r2, r0
 8007fb6:	4601      	mov	r1, r0
 8007fb8:	428a      	cmp	r2, r1
 8007fba:	d100      	bne.n	8007fbe <memmove+0x2a>
 8007fbc:	bd10      	pop	{r4, pc}
 8007fbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007fc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007fc6:	e7f7      	b.n	8007fb8 <memmove+0x24>

08007fc8 <_sbrk_r>:
 8007fc8:	b538      	push	{r3, r4, r5, lr}
 8007fca:	4d06      	ldr	r5, [pc, #24]	; (8007fe4 <_sbrk_r+0x1c>)
 8007fcc:	2300      	movs	r3, #0
 8007fce:	4604      	mov	r4, r0
 8007fd0:	4608      	mov	r0, r1
 8007fd2:	602b      	str	r3, [r5, #0]
 8007fd4:	f000 f840 	bl	8008058 <_sbrk>
 8007fd8:	1c43      	adds	r3, r0, #1
 8007fda:	d102      	bne.n	8007fe2 <_sbrk_r+0x1a>
 8007fdc:	682b      	ldr	r3, [r5, #0]
 8007fde:	b103      	cbz	r3, 8007fe2 <_sbrk_r+0x1a>
 8007fe0:	6023      	str	r3, [r4, #0]
 8007fe2:	bd38      	pop	{r3, r4, r5, pc}
 8007fe4:	2001463c 	.word	0x2001463c

08007fe8 <_realloc_r>:
 8007fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fec:	4680      	mov	r8, r0
 8007fee:	4614      	mov	r4, r2
 8007ff0:	460e      	mov	r6, r1
 8007ff2:	b921      	cbnz	r1, 8007ffe <_realloc_r+0x16>
 8007ff4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ff8:	4611      	mov	r1, r2
 8007ffa:	f7ff bc57 	b.w	80078ac <_malloc_r>
 8007ffe:	b92a      	cbnz	r2, 800800c <_realloc_r+0x24>
 8008000:	f7ff fbe8 	bl	80077d4 <_free_r>
 8008004:	4625      	mov	r5, r4
 8008006:	4628      	mov	r0, r5
 8008008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800800c:	f000 f81b 	bl	8008046 <_malloc_usable_size_r>
 8008010:	4284      	cmp	r4, r0
 8008012:	4607      	mov	r7, r0
 8008014:	d802      	bhi.n	800801c <_realloc_r+0x34>
 8008016:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800801a:	d812      	bhi.n	8008042 <_realloc_r+0x5a>
 800801c:	4621      	mov	r1, r4
 800801e:	4640      	mov	r0, r8
 8008020:	f7ff fc44 	bl	80078ac <_malloc_r>
 8008024:	4605      	mov	r5, r0
 8008026:	2800      	cmp	r0, #0
 8008028:	d0ed      	beq.n	8008006 <_realloc_r+0x1e>
 800802a:	42bc      	cmp	r4, r7
 800802c:	4622      	mov	r2, r4
 800802e:	4631      	mov	r1, r6
 8008030:	bf28      	it	cs
 8008032:	463a      	movcs	r2, r7
 8008034:	f7ff fbc0 	bl	80077b8 <memcpy>
 8008038:	4631      	mov	r1, r6
 800803a:	4640      	mov	r0, r8
 800803c:	f7ff fbca 	bl	80077d4 <_free_r>
 8008040:	e7e1      	b.n	8008006 <_realloc_r+0x1e>
 8008042:	4635      	mov	r5, r6
 8008044:	e7df      	b.n	8008006 <_realloc_r+0x1e>

08008046 <_malloc_usable_size_r>:
 8008046:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800804a:	1f18      	subs	r0, r3, #4
 800804c:	2b00      	cmp	r3, #0
 800804e:	bfbc      	itt	lt
 8008050:	580b      	ldrlt	r3, [r1, r0]
 8008052:	18c0      	addlt	r0, r0, r3
 8008054:	4770      	bx	lr
	...

08008058 <_sbrk>:
 8008058:	4a04      	ldr	r2, [pc, #16]	; (800806c <_sbrk+0x14>)
 800805a:	6811      	ldr	r1, [r2, #0]
 800805c:	4603      	mov	r3, r0
 800805e:	b909      	cbnz	r1, 8008064 <_sbrk+0xc>
 8008060:	4903      	ldr	r1, [pc, #12]	; (8008070 <_sbrk+0x18>)
 8008062:	6011      	str	r1, [r2, #0]
 8008064:	6810      	ldr	r0, [r2, #0]
 8008066:	4403      	add	r3, r0
 8008068:	6013      	str	r3, [r2, #0]
 800806a:	4770      	bx	lr
 800806c:	2001464c 	.word	0x2001464c
 8008070:	20014650 	.word	0x20014650

08008074 <_init>:
 8008074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008076:	bf00      	nop
 8008078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800807a:	bc08      	pop	{r3}
 800807c:	469e      	mov	lr, r3
 800807e:	4770      	bx	lr

08008080 <_fini>:
 8008080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008082:	bf00      	nop
 8008084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008086:	bc08      	pop	{r3}
 8008088:	469e      	mov	lr, r3
 800808a:	4770      	bx	lr
