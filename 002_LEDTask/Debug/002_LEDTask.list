
002_LEDTask.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006854  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  08006a24  08006a24  00016a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b88  08006b88  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08006b88  08006b88  00016b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b90  08006b90  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b90  08006b90  00016b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b94  08006b94  00016b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08006b98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001448c  2000001c  08006bb4  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200144a8  08006bb4  000244a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000151b1  00000000  00000000  0002008f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003574  00000000  00000000  00035240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001438  00000000  00000000  000387b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f86  00000000  00000000  00039bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024aed  00000000  00000000  0003ab76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018dc6  00000000  00000000  0005f663  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de3b8  00000000  00000000  00078429  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005408  00000000  00000000  001567e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000134  00000000  00000000  0015bbec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000001c 	.word	0x2000001c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006a0c 	.word	0x08006a0c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000020 	.word	0x20000020
 800020c:	08006a0c 	.word	0x08006a0c

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	20012ed4 	.word	0x20012ed4

080002a4 <__aeabi_uldivmod>:
 80002a4:	b953      	cbnz	r3, 80002bc <__aeabi_uldivmod+0x18>
 80002a6:	b94a      	cbnz	r2, 80002bc <__aeabi_uldivmod+0x18>
 80002a8:	2900      	cmp	r1, #0
 80002aa:	bf08      	it	eq
 80002ac:	2800      	cmpeq	r0, #0
 80002ae:	bf1c      	itt	ne
 80002b0:	f04f 31ff 	movne.w	r1, #4294967295
 80002b4:	f04f 30ff 	movne.w	r0, #4294967295
 80002b8:	f000 b970 	b.w	800059c <__aeabi_idiv0>
 80002bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c4:	f000 f806 	bl	80002d4 <__udivmoddi4>
 80002c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d0:	b004      	add	sp, #16
 80002d2:	4770      	bx	lr

080002d4 <__udivmoddi4>:
 80002d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d8:	9e08      	ldr	r6, [sp, #32]
 80002da:	460d      	mov	r5, r1
 80002dc:	4604      	mov	r4, r0
 80002de:	460f      	mov	r7, r1
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d14a      	bne.n	800037a <__udivmoddi4+0xa6>
 80002e4:	428a      	cmp	r2, r1
 80002e6:	4694      	mov	ip, r2
 80002e8:	d965      	bls.n	80003b6 <__udivmoddi4+0xe2>
 80002ea:	fab2 f382 	clz	r3, r2
 80002ee:	b143      	cbz	r3, 8000302 <__udivmoddi4+0x2e>
 80002f0:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f4:	f1c3 0220 	rsb	r2, r3, #32
 80002f8:	409f      	lsls	r7, r3
 80002fa:	fa20 f202 	lsr.w	r2, r0, r2
 80002fe:	4317      	orrs	r7, r2
 8000300:	409c      	lsls	r4, r3
 8000302:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000306:	fa1f f58c 	uxth.w	r5, ip
 800030a:	fbb7 f1fe 	udiv	r1, r7, lr
 800030e:	0c22      	lsrs	r2, r4, #16
 8000310:	fb0e 7711 	mls	r7, lr, r1, r7
 8000314:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000318:	fb01 f005 	mul.w	r0, r1, r5
 800031c:	4290      	cmp	r0, r2
 800031e:	d90a      	bls.n	8000336 <__udivmoddi4+0x62>
 8000320:	eb1c 0202 	adds.w	r2, ip, r2
 8000324:	f101 37ff 	add.w	r7, r1, #4294967295
 8000328:	f080 811c 	bcs.w	8000564 <__udivmoddi4+0x290>
 800032c:	4290      	cmp	r0, r2
 800032e:	f240 8119 	bls.w	8000564 <__udivmoddi4+0x290>
 8000332:	3902      	subs	r1, #2
 8000334:	4462      	add	r2, ip
 8000336:	1a12      	subs	r2, r2, r0
 8000338:	b2a4      	uxth	r4, r4
 800033a:	fbb2 f0fe 	udiv	r0, r2, lr
 800033e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000342:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000346:	fb00 f505 	mul.w	r5, r0, r5
 800034a:	42a5      	cmp	r5, r4
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x90>
 800034e:	eb1c 0404 	adds.w	r4, ip, r4
 8000352:	f100 32ff 	add.w	r2, r0, #4294967295
 8000356:	f080 8107 	bcs.w	8000568 <__udivmoddi4+0x294>
 800035a:	42a5      	cmp	r5, r4
 800035c:	f240 8104 	bls.w	8000568 <__udivmoddi4+0x294>
 8000360:	4464      	add	r4, ip
 8000362:	3802      	subs	r0, #2
 8000364:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000368:	1b64      	subs	r4, r4, r5
 800036a:	2100      	movs	r1, #0
 800036c:	b11e      	cbz	r6, 8000376 <__udivmoddi4+0xa2>
 800036e:	40dc      	lsrs	r4, r3
 8000370:	2300      	movs	r3, #0
 8000372:	e9c6 4300 	strd	r4, r3, [r6]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0xbc>
 800037e:	2e00      	cmp	r6, #0
 8000380:	f000 80ed 	beq.w	800055e <__udivmoddi4+0x28a>
 8000384:	2100      	movs	r1, #0
 8000386:	e9c6 0500 	strd	r0, r5, [r6]
 800038a:	4608      	mov	r0, r1
 800038c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000390:	fab3 f183 	clz	r1, r3
 8000394:	2900      	cmp	r1, #0
 8000396:	d149      	bne.n	800042c <__udivmoddi4+0x158>
 8000398:	42ab      	cmp	r3, r5
 800039a:	d302      	bcc.n	80003a2 <__udivmoddi4+0xce>
 800039c:	4282      	cmp	r2, r0
 800039e:	f200 80f8 	bhi.w	8000592 <__udivmoddi4+0x2be>
 80003a2:	1a84      	subs	r4, r0, r2
 80003a4:	eb65 0203 	sbc.w	r2, r5, r3
 80003a8:	2001      	movs	r0, #1
 80003aa:	4617      	mov	r7, r2
 80003ac:	2e00      	cmp	r6, #0
 80003ae:	d0e2      	beq.n	8000376 <__udivmoddi4+0xa2>
 80003b0:	e9c6 4700 	strd	r4, r7, [r6]
 80003b4:	e7df      	b.n	8000376 <__udivmoddi4+0xa2>
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xe6>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f382 	clz	r3, r2
 80003be:	2b00      	cmp	r3, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x210>
 80003c4:	1a8a      	subs	r2, r1, r2
 80003c6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ca:	fa1f fe8c 	uxth.w	lr, ip
 80003ce:	2101      	movs	r1, #1
 80003d0:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d4:	fb07 2015 	mls	r0, r7, r5, r2
 80003d8:	0c22      	lsrs	r2, r4, #16
 80003da:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003de:	fb0e f005 	mul.w	r0, lr, r5
 80003e2:	4290      	cmp	r0, r2
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x124>
 80003e6:	eb1c 0202 	adds.w	r2, ip, r2
 80003ea:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x122>
 80003f0:	4290      	cmp	r0, r2
 80003f2:	f200 80cb 	bhi.w	800058c <__udivmoddi4+0x2b8>
 80003f6:	4645      	mov	r5, r8
 80003f8:	1a12      	subs	r2, r2, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000400:	fb07 2210 	mls	r2, r7, r0, r2
 8000404:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000408:	fb0e fe00 	mul.w	lr, lr, r0
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x14e>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f100 32ff 	add.w	r2, r0, #4294967295
 8000418:	d202      	bcs.n	8000420 <__udivmoddi4+0x14c>
 800041a:	45a6      	cmp	lr, r4
 800041c:	f200 80bb 	bhi.w	8000596 <__udivmoddi4+0x2c2>
 8000420:	4610      	mov	r0, r2
 8000422:	eba4 040e 	sub.w	r4, r4, lr
 8000426:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800042a:	e79f      	b.n	800036c <__udivmoddi4+0x98>
 800042c:	f1c1 0720 	rsb	r7, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 fc07 	lsr.w	ip, r2, r7
 8000436:	ea4c 0c03 	orr.w	ip, ip, r3
 800043a:	fa05 f401 	lsl.w	r4, r5, r1
 800043e:	fa20 f307 	lsr.w	r3, r0, r7
 8000442:	40fd      	lsrs	r5, r7
 8000444:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fbb5 f8f9 	udiv	r8, r5, r9
 800044e:	fa1f fe8c 	uxth.w	lr, ip
 8000452:	fb09 5518 	mls	r5, r9, r8, r5
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800045c:	fb08 f50e 	mul.w	r5, r8, lr
 8000460:	42a5      	cmp	r5, r4
 8000462:	fa02 f201 	lsl.w	r2, r2, r1
 8000466:	fa00 f001 	lsl.w	r0, r0, r1
 800046a:	d90b      	bls.n	8000484 <__udivmoddi4+0x1b0>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f108 3aff 	add.w	sl, r8, #4294967295
 8000474:	f080 8088 	bcs.w	8000588 <__udivmoddi4+0x2b4>
 8000478:	42a5      	cmp	r5, r4
 800047a:	f240 8085 	bls.w	8000588 <__udivmoddi4+0x2b4>
 800047e:	f1a8 0802 	sub.w	r8, r8, #2
 8000482:	4464      	add	r4, ip
 8000484:	1b64      	subs	r4, r4, r5
 8000486:	b29d      	uxth	r5, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000494:	fb03 fe0e 	mul.w	lr, r3, lr
 8000498:	45a6      	cmp	lr, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1da>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f103 35ff 	add.w	r5, r3, #4294967295
 80004a4:	d26c      	bcs.n	8000580 <__udivmoddi4+0x2ac>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	d96a      	bls.n	8000580 <__udivmoddi4+0x2ac>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	4464      	add	r4, ip
 80004ae:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004b2:	fba3 9502 	umull	r9, r5, r3, r2
 80004b6:	eba4 040e 	sub.w	r4, r4, lr
 80004ba:	42ac      	cmp	r4, r5
 80004bc:	46c8      	mov	r8, r9
 80004be:	46ae      	mov	lr, r5
 80004c0:	d356      	bcc.n	8000570 <__udivmoddi4+0x29c>
 80004c2:	d053      	beq.n	800056c <__udivmoddi4+0x298>
 80004c4:	b156      	cbz	r6, 80004dc <__udivmoddi4+0x208>
 80004c6:	ebb0 0208 	subs.w	r2, r0, r8
 80004ca:	eb64 040e 	sbc.w	r4, r4, lr
 80004ce:	fa04 f707 	lsl.w	r7, r4, r7
 80004d2:	40ca      	lsrs	r2, r1
 80004d4:	40cc      	lsrs	r4, r1
 80004d6:	4317      	orrs	r7, r2
 80004d8:	e9c6 7400 	strd	r7, r4, [r6]
 80004dc:	4618      	mov	r0, r3
 80004de:	2100      	movs	r1, #0
 80004e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e4:	f1c3 0120 	rsb	r1, r3, #32
 80004e8:	fa02 fc03 	lsl.w	ip, r2, r3
 80004ec:	fa20 f201 	lsr.w	r2, r0, r1
 80004f0:	fa25 f101 	lsr.w	r1, r5, r1
 80004f4:	409d      	lsls	r5, r3
 80004f6:	432a      	orrs	r2, r5
 80004f8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004fc:	fa1f fe8c 	uxth.w	lr, ip
 8000500:	fbb1 f0f7 	udiv	r0, r1, r7
 8000504:	fb07 1510 	mls	r5, r7, r0, r1
 8000508:	0c11      	lsrs	r1, r2, #16
 800050a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050e:	fb00 f50e 	mul.w	r5, r0, lr
 8000512:	428d      	cmp	r5, r1
 8000514:	fa04 f403 	lsl.w	r4, r4, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x258>
 800051a:	eb1c 0101 	adds.w	r1, ip, r1
 800051e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000522:	d22f      	bcs.n	8000584 <__udivmoddi4+0x2b0>
 8000524:	428d      	cmp	r5, r1
 8000526:	d92d      	bls.n	8000584 <__udivmoddi4+0x2b0>
 8000528:	3802      	subs	r0, #2
 800052a:	4461      	add	r1, ip
 800052c:	1b49      	subs	r1, r1, r5
 800052e:	b292      	uxth	r2, r2
 8000530:	fbb1 f5f7 	udiv	r5, r1, r7
 8000534:	fb07 1115 	mls	r1, r7, r5, r1
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	fb05 f10e 	mul.w	r1, r5, lr
 8000540:	4291      	cmp	r1, r2
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x282>
 8000544:	eb1c 0202 	adds.w	r2, ip, r2
 8000548:	f105 38ff 	add.w	r8, r5, #4294967295
 800054c:	d216      	bcs.n	800057c <__udivmoddi4+0x2a8>
 800054e:	4291      	cmp	r1, r2
 8000550:	d914      	bls.n	800057c <__udivmoddi4+0x2a8>
 8000552:	3d02      	subs	r5, #2
 8000554:	4462      	add	r2, ip
 8000556:	1a52      	subs	r2, r2, r1
 8000558:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800055c:	e738      	b.n	80003d0 <__udivmoddi4+0xfc>
 800055e:	4631      	mov	r1, r6
 8000560:	4630      	mov	r0, r6
 8000562:	e708      	b.n	8000376 <__udivmoddi4+0xa2>
 8000564:	4639      	mov	r1, r7
 8000566:	e6e6      	b.n	8000336 <__udivmoddi4+0x62>
 8000568:	4610      	mov	r0, r2
 800056a:	e6fb      	b.n	8000364 <__udivmoddi4+0x90>
 800056c:	4548      	cmp	r0, r9
 800056e:	d2a9      	bcs.n	80004c4 <__udivmoddi4+0x1f0>
 8000570:	ebb9 0802 	subs.w	r8, r9, r2
 8000574:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000578:	3b01      	subs	r3, #1
 800057a:	e7a3      	b.n	80004c4 <__udivmoddi4+0x1f0>
 800057c:	4645      	mov	r5, r8
 800057e:	e7ea      	b.n	8000556 <__udivmoddi4+0x282>
 8000580:	462b      	mov	r3, r5
 8000582:	e794      	b.n	80004ae <__udivmoddi4+0x1da>
 8000584:	4640      	mov	r0, r8
 8000586:	e7d1      	b.n	800052c <__udivmoddi4+0x258>
 8000588:	46d0      	mov	r8, sl
 800058a:	e77b      	b.n	8000484 <__udivmoddi4+0x1b0>
 800058c:	3d02      	subs	r5, #2
 800058e:	4462      	add	r2, ip
 8000590:	e732      	b.n	80003f8 <__udivmoddi4+0x124>
 8000592:	4608      	mov	r0, r1
 8000594:	e70a      	b.n	80003ac <__udivmoddi4+0xd8>
 8000596:	4464      	add	r4, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e742      	b.n	8000422 <__udivmoddi4+0x14e>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <greenLedTask_handler>:
extern  void SEGGER_UART_init(uint32_t);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void greenLedTask_handler(void *parameters) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b086      	sub	sp, #24
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
	//char msg[100];
	int count = 1;
 80005a8:	2301      	movs	r3, #1
 80005aa:	617b      	str	r3, [r7, #20]
	int count2 = 0;
 80005ac:	2300      	movs	r3, #0
 80005ae:	613b      	str	r3, [r7, #16]

	TickType_t prevWakeTime = xTaskGetTickCount();
 80005b0:	f002 fdc4 	bl	800313c <xTaskGetTickCount>
 80005b4:	4603      	mov	r3, r0
 80005b6:	60bb      	str	r3, [r7, #8]
	TickType_t frequency = 200;
 80005b8:	23c8      	movs	r3, #200	; 0xc8
 80005ba:	60fb      	str	r3, [r7, #12]

	while(1) {
		//snprintf(msg,100,"%s\n", (char*)parameters);
		//SEGGER_SYSVIEW_PrintfTarget(msg);
		if (count == 6) {
 80005bc:	697b      	ldr	r3, [r7, #20]
 80005be:	2b06      	cmp	r3, #6
 80005c0:	d101      	bne.n	80005c6 <greenLedTask_handler+0x26>
			count = 1;
 80005c2:	2301      	movs	r3, #1
 80005c4:	617b      	str	r3, [r7, #20]
		}

		count2 = count;
 80005c6:	697b      	ldr	r3, [r7, #20]
 80005c8:	613b      	str	r3, [r7, #16]
		while (count2 > 0) {
 80005ca:	e016      	b.n	80005fa <greenLedTask_handler+0x5a>
			HAL_GPIO_TogglePin(GPIOA, greenLed);
 80005cc:	2120      	movs	r1, #32
 80005ce:	4817      	ldr	r0, [pc, #92]	; (800062c <greenLedTask_handler+0x8c>)
 80005d0:	f000 fd67 	bl	80010a2 <HAL_GPIO_TogglePin>

			// using fixed delay span
			// vTaskDelay(pdMS_TO_TICKS(200));

			// using fixed task wake up
			vTaskDelayUntil(&prevWakeTime, frequency);
 80005d4:	f107 0308 	add.w	r3, r7, #8
 80005d8:	68f9      	ldr	r1, [r7, #12]
 80005da:	4618      	mov	r0, r3
 80005dc:	f002 fbbc 	bl	8002d58 <xTaskDelayUntil>

			HAL_GPIO_TogglePin(GPIOA, greenLed);
 80005e0:	2120      	movs	r1, #32
 80005e2:	4812      	ldr	r0, [pc, #72]	; (800062c <greenLedTask_handler+0x8c>)
 80005e4:	f000 fd5d 	bl	80010a2 <HAL_GPIO_TogglePin>

			// using fixed delay span
		    // vTaskDelay(pdMS_TO_TICKS(200));

			// using fixed task wake up
			vTaskDelayUntil(&prevWakeTime, frequency);
 80005e8:	f107 0308 	add.w	r3, r7, #8
 80005ec:	68f9      	ldr	r1, [r7, #12]
 80005ee:	4618      	mov	r0, r3
 80005f0:	f002 fbb2 	bl	8002d58 <xTaskDelayUntil>
			count2--;
 80005f4:	693b      	ldr	r3, [r7, #16]
 80005f6:	3b01      	subs	r3, #1
 80005f8:	613b      	str	r3, [r7, #16]
		while (count2 > 0) {
 80005fa:	693b      	ldr	r3, [r7, #16]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	dce5      	bgt.n	80005cc <greenLedTask_handler+0x2c>
		}
		count++;
 8000600:	697b      	ldr	r3, [r7, #20]
 8000602:	3301      	adds	r3, #1
 8000604:	617b      	str	r3, [r7, #20]
		// HAL_GPIO_TogglePin(GPIOA, greenLed);
		HAL_GPIO_WritePin(GPIOA, greenLed, 0u);
 8000606:	2200      	movs	r2, #0
 8000608:	2120      	movs	r1, #32
 800060a:	4808      	ldr	r0, [pc, #32]	; (800062c <greenLedTask_handler+0x8c>)
 800060c:	f000 fd30 	bl	8001070 <HAL_GPIO_WritePin>
		//vTaskDelay(pdMS_TO_TICKS(2000));
		vTaskDelayUntil(&prevWakeTime, (frequency*10u));
 8000610:	68fa      	ldr	r2, [r7, #12]
 8000612:	4613      	mov	r3, r2
 8000614:	009b      	lsls	r3, r3, #2
 8000616:	4413      	add	r3, r2
 8000618:	005b      	lsls	r3, r3, #1
 800061a:	461a      	mov	r2, r3
 800061c:	f107 0308 	add.w	r3, r7, #8
 8000620:	4611      	mov	r1, r2
 8000622:	4618      	mov	r0, r3
 8000624:	f002 fb98 	bl	8002d58 <xTaskDelayUntil>
		if (count == 6) {
 8000628:	e7c8      	b.n	80005bc <greenLedTask_handler+0x1c>
 800062a:	bf00      	nop
 800062c:	40020000 	.word	0x40020000

08000630 <tickCountingTask_handler>:
		// printf("%s\n", (char *)parameters);
		// taskYIELD();
	}
}

static void tickCountingTask_handler(void *parameters) {
 8000630:	b480      	push	{r7}
 8000632:	b09d      	sub	sp, #116	; 0x74
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
	char msg[100];
	while(1) {
 8000638:	e7fe      	b.n	8000638 <tickCountingTask_handler+0x8>
	...

0800063c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b088      	sub	sp, #32
 8000640:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000642:	f000 fa5d 	bl	8000b00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000646:	f000 f853 	bl	80006f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064a:	f000 f8c3 	bl	80007d4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  // enable cycle counter register to have proper time stamps in SysVIew
  DWT_CTRL_CNT |= (1 << 0);
 800064e:	4b20      	ldr	r3, [pc, #128]	; (80006d0 <main+0x94>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4a1f      	ldr	r2, [pc, #124]	; (80006d0 <main+0x94>)
 8000654:	f043 0301 	orr.w	r3, r3, #1
 8000658:	6013      	str	r3, [r2, #0]

  SEGGER_UART_init(500000);
 800065a:	481e      	ldr	r0, [pc, #120]	; (80006d4 <main+0x98>)
 800065c:	f004 fb3e 	bl	8004cdc <SEGGER_UART_init>

  // configure and call sysview apis to record
  SEGGER_SYSVIEW_Conf();
 8000660:	f004 f966 	bl	8004930 <SEGGER_SYSVIEW_Conf>
  // SEGGER_SYSVIEW_Start();


  // create tasks
  status = xTaskCreate(greenLedTask_handler, "greenLedTask", 200, "Hello from greenLedTask", 2, &greenLedTaskHandle);
 8000664:	f107 0308 	add.w	r3, r7, #8
 8000668:	9301      	str	r3, [sp, #4]
 800066a:	2302      	movs	r3, #2
 800066c:	9300      	str	r3, [sp, #0]
 800066e:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <main+0x9c>)
 8000670:	22c8      	movs	r2, #200	; 0xc8
 8000672:	491a      	ldr	r1, [pc, #104]	; (80006dc <main+0xa0>)
 8000674:	481a      	ldr	r0, [pc, #104]	; (80006e0 <main+0xa4>)
 8000676:	f002 f9e7 	bl	8002a48 <xTaskCreate>
 800067a:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 800067c:	697b      	ldr	r3, [r7, #20]
 800067e:	2b01      	cmp	r3, #1
 8000680:	d00a      	beq.n	8000698 <main+0x5c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000686:	f383 8811 	msr	BASEPRI, r3
 800068a:	f3bf 8f6f 	isb	sy
 800068e:	f3bf 8f4f 	dsb	sy
 8000692:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000694:	bf00      	nop
 8000696:	e7fe      	b.n	8000696 <main+0x5a>
  status = xTaskCreate(tickCountingTask_handler, "tickCountingTask", 200, "Hello from tickCountingTask", 2, &tickCountingTaskHandle);
 8000698:	1d3b      	adds	r3, r7, #4
 800069a:	9301      	str	r3, [sp, #4]
 800069c:	2302      	movs	r3, #2
 800069e:	9300      	str	r3, [sp, #0]
 80006a0:	4b10      	ldr	r3, [pc, #64]	; (80006e4 <main+0xa8>)
 80006a2:	22c8      	movs	r2, #200	; 0xc8
 80006a4:	4910      	ldr	r1, [pc, #64]	; (80006e8 <main+0xac>)
 80006a6:	4811      	ldr	r0, [pc, #68]	; (80006ec <main+0xb0>)
 80006a8:	f002 f9ce 	bl	8002a48 <xTaskCreate>
 80006ac:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 80006ae:	697b      	ldr	r3, [r7, #20]
 80006b0:	2b01      	cmp	r3, #1
 80006b2:	d00a      	beq.n	80006ca <main+0x8e>
        __asm volatile
 80006b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006b8:	f383 8811 	msr	BASEPRI, r3
 80006bc:	f3bf 8f6f 	isb	sy
 80006c0:	f3bf 8f4f 	dsb	sy
 80006c4:	60fb      	str	r3, [r7, #12]
    }
 80006c6:	bf00      	nop
 80006c8:	e7fe      	b.n	80006c8 <main+0x8c>

  // start scheduler to run tasks
  vTaskStartScheduler();
 80006ca:	f002 fbc7 	bl	8002e5c <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006ce:	e7fe      	b.n	80006ce <main+0x92>
 80006d0:	e0001000 	.word	0xe0001000
 80006d4:	0007a120 	.word	0x0007a120
 80006d8:	08006a24 	.word	0x08006a24
 80006dc:	08006a3c 	.word	0x08006a3c
 80006e0:	080005a1 	.word	0x080005a1
 80006e4:	08006a4c 	.word	0x08006a4c
 80006e8:	08006a68 	.word	0x08006a68
 80006ec:	08000631 	.word	0x08000631

080006f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b094      	sub	sp, #80	; 0x50
 80006f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f6:	f107 031c 	add.w	r3, r7, #28
 80006fa:	2234      	movs	r2, #52	; 0x34
 80006fc:	2100      	movs	r1, #0
 80006fe:	4618      	mov	r0, r3
 8000700:	f006 f94a 	bl	8006998 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000704:	f107 0308 	add.w	r3, r7, #8
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	60da      	str	r2, [r3, #12]
 8000712:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000714:	2300      	movs	r3, #0
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	4b2c      	ldr	r3, [pc, #176]	; (80007cc <SystemClock_Config+0xdc>)
 800071a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071c:	4a2b      	ldr	r2, [pc, #172]	; (80007cc <SystemClock_Config+0xdc>)
 800071e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000722:	6413      	str	r3, [r2, #64]	; 0x40
 8000724:	4b29      	ldr	r3, [pc, #164]	; (80007cc <SystemClock_Config+0xdc>)
 8000726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000728:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000730:	2300      	movs	r3, #0
 8000732:	603b      	str	r3, [r7, #0]
 8000734:	4b26      	ldr	r3, [pc, #152]	; (80007d0 <SystemClock_Config+0xe0>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a25      	ldr	r2, [pc, #148]	; (80007d0 <SystemClock_Config+0xe0>)
 800073a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800073e:	6013      	str	r3, [r2, #0]
 8000740:	4b23      	ldr	r3, [pc, #140]	; (80007d0 <SystemClock_Config+0xe0>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000748:	603b      	str	r3, [r7, #0]
 800074a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800074c:	2302      	movs	r3, #2
 800074e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000750:	2301      	movs	r3, #1
 8000752:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000754:	2310      	movs	r3, #16
 8000756:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000758:	2302      	movs	r3, #2
 800075a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800075c:	2300      	movs	r3, #0
 800075e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000760:	2308      	movs	r3, #8
 8000762:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000764:	23b4      	movs	r3, #180	; 0xb4
 8000766:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000768:	2302      	movs	r3, #2
 800076a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800076c:	2302      	movs	r3, #2
 800076e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000770:	2302      	movs	r3, #2
 8000772:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000774:	f107 031c 	add.w	r3, r7, #28
 8000778:	4618      	mov	r0, r3
 800077a:	f001 f865 	bl	8001848 <HAL_RCC_OscConfig>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000784:	f000 f8b6 	bl	80008f4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000788:	f000 fca6 	bl	80010d8 <HAL_PWREx_EnableOverDrive>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000792:	f000 f8af 	bl	80008f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000796:	230f      	movs	r3, #15
 8000798:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800079a:	2302      	movs	r3, #2
 800079c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800079e:	2300      	movs	r3, #0
 80007a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007a2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ac:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007ae:	f107 0308 	add.w	r3, r7, #8
 80007b2:	2105      	movs	r1, #5
 80007b4:	4618      	mov	r0, r3
 80007b6:	f000 fcdf 	bl	8001178 <HAL_RCC_ClockConfig>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80007c0:	f000 f898 	bl	80008f4 <Error_Handler>
  }
}
 80007c4:	bf00      	nop
 80007c6:	3750      	adds	r7, #80	; 0x50
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40023800 	.word	0x40023800
 80007d0:	40007000 	.word	0x40007000

080007d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b08a      	sub	sp, #40	; 0x28
 80007d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007da:	f107 0314 	add.w	r3, r7, #20
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
 80007e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	613b      	str	r3, [r7, #16]
 80007ee:	4b35      	ldr	r3, [pc, #212]	; (80008c4 <MX_GPIO_Init+0xf0>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a34      	ldr	r2, [pc, #208]	; (80008c4 <MX_GPIO_Init+0xf0>)
 80007f4:	f043 0304 	orr.w	r3, r3, #4
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b32      	ldr	r3, [pc, #200]	; (80008c4 <MX_GPIO_Init+0xf0>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0304 	and.w	r3, r3, #4
 8000802:	613b      	str	r3, [r7, #16]
 8000804:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	60fb      	str	r3, [r7, #12]
 800080a:	4b2e      	ldr	r3, [pc, #184]	; (80008c4 <MX_GPIO_Init+0xf0>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a2d      	ldr	r2, [pc, #180]	; (80008c4 <MX_GPIO_Init+0xf0>)
 8000810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b2b      	ldr	r3, [pc, #172]	; (80008c4 <MX_GPIO_Init+0xf0>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800081e:	60fb      	str	r3, [r7, #12]
 8000820:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	60bb      	str	r3, [r7, #8]
 8000826:	4b27      	ldr	r3, [pc, #156]	; (80008c4 <MX_GPIO_Init+0xf0>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a26      	ldr	r2, [pc, #152]	; (80008c4 <MX_GPIO_Init+0xf0>)
 800082c:	f043 0301 	orr.w	r3, r3, #1
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b24      	ldr	r3, [pc, #144]	; (80008c4 <MX_GPIO_Init+0xf0>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0301 	and.w	r3, r3, #1
 800083a:	60bb      	str	r3, [r7, #8]
 800083c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	607b      	str	r3, [r7, #4]
 8000842:	4b20      	ldr	r3, [pc, #128]	; (80008c4 <MX_GPIO_Init+0xf0>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a1f      	ldr	r2, [pc, #124]	; (80008c4 <MX_GPIO_Init+0xf0>)
 8000848:	f043 0302 	orr.w	r3, r3, #2
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b1d      	ldr	r3, [pc, #116]	; (80008c4 <MX_GPIO_Init+0xf0>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0302 	and.w	r3, r3, #2
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800085a:	2200      	movs	r2, #0
 800085c:	2120      	movs	r1, #32
 800085e:	481a      	ldr	r0, [pc, #104]	; (80008c8 <MX_GPIO_Init+0xf4>)
 8000860:	f000 fc06 	bl	8001070 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000864:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000868:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800086a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800086e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000874:	f107 0314 	add.w	r3, r7, #20
 8000878:	4619      	mov	r1, r3
 800087a:	4814      	ldr	r0, [pc, #80]	; (80008cc <MX_GPIO_Init+0xf8>)
 800087c:	f000 fa64 	bl	8000d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000880:	230c      	movs	r3, #12
 8000882:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000884:	2302      	movs	r3, #2
 8000886:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800088c:	2303      	movs	r3, #3
 800088e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000890:	2307      	movs	r3, #7
 8000892:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000894:	f107 0314 	add.w	r3, r7, #20
 8000898:	4619      	mov	r1, r3
 800089a:	480b      	ldr	r0, [pc, #44]	; (80008c8 <MX_GPIO_Init+0xf4>)
 800089c:	f000 fa54 	bl	8000d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008a0:	2320      	movs	r3, #32
 80008a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a4:	2301      	movs	r3, #1
 80008a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ac:	2300      	movs	r3, #0
 80008ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	4619      	mov	r1, r3
 80008b6:	4804      	ldr	r0, [pc, #16]	; (80008c8 <MX_GPIO_Init+0xf4>)
 80008b8:	f000 fa46 	bl	8000d48 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008bc:	bf00      	nop
 80008be:	3728      	adds	r7, #40	; 0x28
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40023800 	.word	0x40023800
 80008c8:	40020000 	.word	0x40020000
 80008cc:	40020800 	.word	0x40020800

080008d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a04      	ldr	r2, [pc, #16]	; (80008f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d101      	bne.n	80008e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008e2:	f000 f92f 	bl	8000b44 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008e6:	bf00      	nop
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40001000 	.word	0x40001000

080008f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f8:	b672      	cpsid	i
}
 80008fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008fc:	e7fe      	b.n	80008fc <Error_Handler+0x8>
	...

08000900 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	607b      	str	r3, [r7, #4]
 800090a:	4b10      	ldr	r3, [pc, #64]	; (800094c <HAL_MspInit+0x4c>)
 800090c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800090e:	4a0f      	ldr	r2, [pc, #60]	; (800094c <HAL_MspInit+0x4c>)
 8000910:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000914:	6453      	str	r3, [r2, #68]	; 0x44
 8000916:	4b0d      	ldr	r3, [pc, #52]	; (800094c <HAL_MspInit+0x4c>)
 8000918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800091a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	603b      	str	r3, [r7, #0]
 8000926:	4b09      	ldr	r3, [pc, #36]	; (800094c <HAL_MspInit+0x4c>)
 8000928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092a:	4a08      	ldr	r2, [pc, #32]	; (800094c <HAL_MspInit+0x4c>)
 800092c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000930:	6413      	str	r3, [r2, #64]	; 0x40
 8000932:	4b06      	ldr	r3, [pc, #24]	; (800094c <HAL_MspInit+0x4c>)
 8000934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800093a:	603b      	str	r3, [r7, #0]
 800093c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 800093e:	f003 fc73 	bl	8004228 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000942:	bf00      	nop
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40023800 	.word	0x40023800

08000950 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b08e      	sub	sp, #56	; 0x38
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000958:	2300      	movs	r3, #0
 800095a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800095c:	2300      	movs	r3, #0
 800095e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000960:	2300      	movs	r3, #0
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	4b33      	ldr	r3, [pc, #204]	; (8000a34 <HAL_InitTick+0xe4>)
 8000966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000968:	4a32      	ldr	r2, [pc, #200]	; (8000a34 <HAL_InitTick+0xe4>)
 800096a:	f043 0310 	orr.w	r3, r3, #16
 800096e:	6413      	str	r3, [r2, #64]	; 0x40
 8000970:	4b30      	ldr	r3, [pc, #192]	; (8000a34 <HAL_InitTick+0xe4>)
 8000972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000974:	f003 0310 	and.w	r3, r3, #16
 8000978:	60fb      	str	r3, [r7, #12]
 800097a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800097c:	f107 0210 	add.w	r2, r7, #16
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	4611      	mov	r1, r2
 8000986:	4618      	mov	r0, r3
 8000988:	f000 fcfc 	bl	8001384 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800098c:	6a3b      	ldr	r3, [r7, #32]
 800098e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000992:	2b00      	cmp	r3, #0
 8000994:	d103      	bne.n	800099e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000996:	f000 fce1 	bl	800135c <HAL_RCC_GetPCLK1Freq>
 800099a:	6378      	str	r0, [r7, #52]	; 0x34
 800099c:	e004      	b.n	80009a8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800099e:	f000 fcdd 	bl	800135c <HAL_RCC_GetPCLK1Freq>
 80009a2:	4603      	mov	r3, r0
 80009a4:	005b      	lsls	r3, r3, #1
 80009a6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009aa:	4a23      	ldr	r2, [pc, #140]	; (8000a38 <HAL_InitTick+0xe8>)
 80009ac:	fba2 2303 	umull	r2, r3, r2, r3
 80009b0:	0c9b      	lsrs	r3, r3, #18
 80009b2:	3b01      	subs	r3, #1
 80009b4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80009b6:	4b21      	ldr	r3, [pc, #132]	; (8000a3c <HAL_InitTick+0xec>)
 80009b8:	4a21      	ldr	r2, [pc, #132]	; (8000a40 <HAL_InitTick+0xf0>)
 80009ba:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80009bc:	4b1f      	ldr	r3, [pc, #124]	; (8000a3c <HAL_InitTick+0xec>)
 80009be:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009c2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80009c4:	4a1d      	ldr	r2, [pc, #116]	; (8000a3c <HAL_InitTick+0xec>)
 80009c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009c8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80009ca:	4b1c      	ldr	r3, [pc, #112]	; (8000a3c <HAL_InitTick+0xec>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009d0:	4b1a      	ldr	r3, [pc, #104]	; (8000a3c <HAL_InitTick+0xec>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009d6:	4b19      	ldr	r3, [pc, #100]	; (8000a3c <HAL_InitTick+0xec>)
 80009d8:	2200      	movs	r2, #0
 80009da:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80009dc:	4817      	ldr	r0, [pc, #92]	; (8000a3c <HAL_InitTick+0xec>)
 80009de:	f001 f9d1 	bl	8001d84 <HAL_TIM_Base_Init>
 80009e2:	4603      	mov	r3, r0
 80009e4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80009e8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d11b      	bne.n	8000a28 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80009f0:	4812      	ldr	r0, [pc, #72]	; (8000a3c <HAL_InitTick+0xec>)
 80009f2:	f001 fa21 	bl	8001e38 <HAL_TIM_Base_Start_IT>
 80009f6:	4603      	mov	r3, r0
 80009f8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80009fc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d111      	bne.n	8000a28 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a04:	2036      	movs	r0, #54	; 0x36
 8000a06:	f000 f991 	bl	8000d2c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	2b0f      	cmp	r3, #15
 8000a0e:	d808      	bhi.n	8000a22 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000a10:	2200      	movs	r2, #0
 8000a12:	6879      	ldr	r1, [r7, #4]
 8000a14:	2036      	movs	r0, #54	; 0x36
 8000a16:	f000 f96d 	bl	8000cf4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a1a:	4a0a      	ldr	r2, [pc, #40]	; (8000a44 <HAL_InitTick+0xf4>)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	6013      	str	r3, [r2, #0]
 8000a20:	e002      	b.n	8000a28 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000a22:	2301      	movs	r3, #1
 8000a24:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a28:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3738      	adds	r7, #56	; 0x38
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	40023800 	.word	0x40023800
 8000a38:	431bde83 	.word	0x431bde83
 8000a3c:	20000038 	.word	0x20000038
 8000a40:	40001000 	.word	0x40001000
 8000a44:	20000004 	.word	0x20000004

08000a48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a4c:	e7fe      	b.n	8000a4c <NMI_Handler+0x4>

08000a4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a52:	e7fe      	b.n	8000a52 <HardFault_Handler+0x4>

08000a54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <MemManage_Handler+0x4>

08000a5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a5e:	e7fe      	b.n	8000a5e <BusFault_Handler+0x4>

08000a60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a64:	e7fe      	b.n	8000a64 <UsageFault_Handler+0x4>

08000a66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr

08000a74 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a78:	4802      	ldr	r0, [pc, #8]	; (8000a84 <TIM6_DAC_IRQHandler+0x10>)
 8000a7a:	f001 fa4d 	bl	8001f18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20000038 	.word	0x20000038

08000a88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a8c:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <SystemInit+0x20>)
 8000a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a92:	4a05      	ldr	r2, [pc, #20]	; (8000aa8 <SystemInit+0x20>)
 8000a94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	e000ed00 	.word	0xe000ed00

08000aac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000aac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ae4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ab0:	f7ff ffea 	bl	8000a88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ab4:	480c      	ldr	r0, [pc, #48]	; (8000ae8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ab6:	490d      	ldr	r1, [pc, #52]	; (8000aec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ab8:	4a0d      	ldr	r2, [pc, #52]	; (8000af0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000aba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000abc:	e002      	b.n	8000ac4 <LoopCopyDataInit>

08000abe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000abe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ac0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ac2:	3304      	adds	r3, #4

08000ac4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ac4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ac6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ac8:	d3f9      	bcc.n	8000abe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aca:	4a0a      	ldr	r2, [pc, #40]	; (8000af4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000acc:	4c0a      	ldr	r4, [pc, #40]	; (8000af8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ace:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ad0:	e001      	b.n	8000ad6 <LoopFillZerobss>

08000ad2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ad2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ad4:	3204      	adds	r2, #4

08000ad6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ad6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ad8:	d3fb      	bcc.n	8000ad2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000ada:	f005 ff65 	bl	80069a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ade:	f7ff fdad 	bl	800063c <main>
  bx  lr    
 8000ae2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ae4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ae8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aec:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000af0:	08006b98 	.word	0x08006b98
  ldr r2, =_sbss
 8000af4:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000af8:	200144a8 	.word	0x200144a8

08000afc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000afc:	e7fe      	b.n	8000afc <ADC_IRQHandler>
	...

08000b00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b04:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <HAL_Init+0x40>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a0d      	ldr	r2, [pc, #52]	; (8000b40 <HAL_Init+0x40>)
 8000b0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b10:	4b0b      	ldr	r3, [pc, #44]	; (8000b40 <HAL_Init+0x40>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a0a      	ldr	r2, [pc, #40]	; (8000b40 <HAL_Init+0x40>)
 8000b16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b1c:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <HAL_Init+0x40>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a07      	ldr	r2, [pc, #28]	; (8000b40 <HAL_Init+0x40>)
 8000b22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b28:	2003      	movs	r0, #3
 8000b2a:	f000 f8d8 	bl	8000cde <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b2e:	2000      	movs	r0, #0
 8000b30:	f7ff ff0e 	bl	8000950 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b34:	f7ff fee4 	bl	8000900 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b38:	2300      	movs	r3, #0
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40023c00 	.word	0x40023c00

08000b44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b48:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <HAL_IncTick+0x20>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <HAL_IncTick+0x24>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4413      	add	r3, r2
 8000b54:	4a04      	ldr	r2, [pc, #16]	; (8000b68 <HAL_IncTick+0x24>)
 8000b56:	6013      	str	r3, [r2, #0]
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	20000008 	.word	0x20000008
 8000b68:	20000080 	.word	0x20000080

08000b6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b70:	4b03      	ldr	r3, [pc, #12]	; (8000b80 <HAL_GetTick+0x14>)
 8000b72:	681b      	ldr	r3, [r3, #0]
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	20000080 	.word	0x20000080

08000b84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	f003 0307 	and.w	r3, r3, #7
 8000b92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b94:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000b96:	68db      	ldr	r3, [r3, #12]
 8000b98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b9a:	68ba      	ldr	r2, [r7, #8]
 8000b9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bb6:	4a04      	ldr	r2, [pc, #16]	; (8000bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	60d3      	str	r3, [r2, #12]
}
 8000bbc:	bf00      	nop
 8000bbe:	3714      	adds	r7, #20
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bd0:	4b04      	ldr	r3, [pc, #16]	; (8000be4 <__NVIC_GetPriorityGrouping+0x18>)
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	0a1b      	lsrs	r3, r3, #8
 8000bd6:	f003 0307 	and.w	r3, r3, #7
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	db0b      	blt.n	8000c12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	f003 021f 	and.w	r2, r3, #31
 8000c00:	4907      	ldr	r1, [pc, #28]	; (8000c20 <__NVIC_EnableIRQ+0x38>)
 8000c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c06:	095b      	lsrs	r3, r3, #5
 8000c08:	2001      	movs	r0, #1
 8000c0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c12:	bf00      	nop
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	e000e100 	.word	0xe000e100

08000c24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	6039      	str	r1, [r7, #0]
 8000c2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	db0a      	blt.n	8000c4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	b2da      	uxtb	r2, r3
 8000c3c:	490c      	ldr	r1, [pc, #48]	; (8000c70 <__NVIC_SetPriority+0x4c>)
 8000c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c42:	0112      	lsls	r2, r2, #4
 8000c44:	b2d2      	uxtb	r2, r2
 8000c46:	440b      	add	r3, r1
 8000c48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c4c:	e00a      	b.n	8000c64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	b2da      	uxtb	r2, r3
 8000c52:	4908      	ldr	r1, [pc, #32]	; (8000c74 <__NVIC_SetPriority+0x50>)
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	f003 030f 	and.w	r3, r3, #15
 8000c5a:	3b04      	subs	r3, #4
 8000c5c:	0112      	lsls	r2, r2, #4
 8000c5e:	b2d2      	uxtb	r2, r2
 8000c60:	440b      	add	r3, r1
 8000c62:	761a      	strb	r2, [r3, #24]
}
 8000c64:	bf00      	nop
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr
 8000c70:	e000e100 	.word	0xe000e100
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b089      	sub	sp, #36	; 0x24
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	60f8      	str	r0, [r7, #12]
 8000c80:	60b9      	str	r1, [r7, #8]
 8000c82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	f003 0307 	and.w	r3, r3, #7
 8000c8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c8c:	69fb      	ldr	r3, [r7, #28]
 8000c8e:	f1c3 0307 	rsb	r3, r3, #7
 8000c92:	2b04      	cmp	r3, #4
 8000c94:	bf28      	it	cs
 8000c96:	2304      	movcs	r3, #4
 8000c98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	3304      	adds	r3, #4
 8000c9e:	2b06      	cmp	r3, #6
 8000ca0:	d902      	bls.n	8000ca8 <NVIC_EncodePriority+0x30>
 8000ca2:	69fb      	ldr	r3, [r7, #28]
 8000ca4:	3b03      	subs	r3, #3
 8000ca6:	e000      	b.n	8000caa <NVIC_EncodePriority+0x32>
 8000ca8:	2300      	movs	r3, #0
 8000caa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cac:	f04f 32ff 	mov.w	r2, #4294967295
 8000cb0:	69bb      	ldr	r3, [r7, #24]
 8000cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb6:	43da      	mvns	r2, r3
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	401a      	ands	r2, r3
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cca:	43d9      	mvns	r1, r3
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd0:	4313      	orrs	r3, r2
         );
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3724      	adds	r7, #36	; 0x24
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr

08000cde <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	b082      	sub	sp, #8
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ce6:	6878      	ldr	r0, [r7, #4]
 8000ce8:	f7ff ff4c 	bl	8000b84 <__NVIC_SetPriorityGrouping>
}
 8000cec:	bf00      	nop
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	60b9      	str	r1, [r7, #8]
 8000cfe:	607a      	str	r2, [r7, #4]
 8000d00:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d02:	2300      	movs	r3, #0
 8000d04:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d06:	f7ff ff61 	bl	8000bcc <__NVIC_GetPriorityGrouping>
 8000d0a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d0c:	687a      	ldr	r2, [r7, #4]
 8000d0e:	68b9      	ldr	r1, [r7, #8]
 8000d10:	6978      	ldr	r0, [r7, #20]
 8000d12:	f7ff ffb1 	bl	8000c78 <NVIC_EncodePriority>
 8000d16:	4602      	mov	r2, r0
 8000d18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d1c:	4611      	mov	r1, r2
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff ff80 	bl	8000c24 <__NVIC_SetPriority>
}
 8000d24:	bf00      	nop
 8000d26:	3718      	adds	r7, #24
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff ff54 	bl	8000be8 <__NVIC_EnableIRQ>
}
 8000d40:	bf00      	nop
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b089      	sub	sp, #36	; 0x24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d52:	2300      	movs	r3, #0
 8000d54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d56:	2300      	movs	r3, #0
 8000d58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61fb      	str	r3, [r7, #28]
 8000d62:	e165      	b.n	8001030 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d64:	2201      	movs	r2, #1
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	697a      	ldr	r2, [r7, #20]
 8000d74:	4013      	ands	r3, r2
 8000d76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d78:	693a      	ldr	r2, [r7, #16]
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f040 8154 	bne.w	800102a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	f003 0303 	and.w	r3, r3, #3
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d005      	beq.n	8000d9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d96:	2b02      	cmp	r3, #2
 8000d98:	d130      	bne.n	8000dfc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	689b      	ldr	r3, [r3, #8]
 8000d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	2203      	movs	r2, #3
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	43db      	mvns	r3, r3
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	4013      	ands	r3, r2
 8000db0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	68da      	ldr	r2, [r3, #12]
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbe:	69ba      	ldr	r2, [r7, #24]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	69ba      	ldr	r2, [r7, #24]
 8000dc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	43db      	mvns	r3, r3
 8000dda:	69ba      	ldr	r2, [r7, #24]
 8000ddc:	4013      	ands	r3, r2
 8000dde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	091b      	lsrs	r3, r3, #4
 8000de6:	f003 0201 	and.w	r2, r3, #1
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	4313      	orrs	r3, r2
 8000df4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	69ba      	ldr	r2, [r7, #24]
 8000dfa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f003 0303 	and.w	r3, r3, #3
 8000e04:	2b03      	cmp	r3, #3
 8000e06:	d017      	beq.n	8000e38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	2203      	movs	r2, #3
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	69ba      	ldr	r2, [r7, #24]
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	689a      	ldr	r2, [r3, #8]
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f003 0303 	and.w	r3, r3, #3
 8000e40:	2b02      	cmp	r3, #2
 8000e42:	d123      	bne.n	8000e8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	08da      	lsrs	r2, r3, #3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	3208      	adds	r2, #8
 8000e4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	f003 0307 	and.w	r3, r3, #7
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	220f      	movs	r2, #15
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	43db      	mvns	r3, r3
 8000e62:	69ba      	ldr	r2, [r7, #24]
 8000e64:	4013      	ands	r3, r2
 8000e66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	691a      	ldr	r2, [r3, #16]
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	f003 0307 	and.w	r3, r3, #7
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	08da      	lsrs	r2, r3, #3
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	3208      	adds	r2, #8
 8000e86:	69b9      	ldr	r1, [r7, #24]
 8000e88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	2203      	movs	r2, #3
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f003 0203 	and.w	r2, r3, #3
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	f000 80ae 	beq.w	800102a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60fb      	str	r3, [r7, #12]
 8000ed2:	4b5d      	ldr	r3, [pc, #372]	; (8001048 <HAL_GPIO_Init+0x300>)
 8000ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed6:	4a5c      	ldr	r2, [pc, #368]	; (8001048 <HAL_GPIO_Init+0x300>)
 8000ed8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000edc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ede:	4b5a      	ldr	r3, [pc, #360]	; (8001048 <HAL_GPIO_Init+0x300>)
 8000ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000eea:	4a58      	ldr	r2, [pc, #352]	; (800104c <HAL_GPIO_Init+0x304>)
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	089b      	lsrs	r3, r3, #2
 8000ef0:	3302      	adds	r3, #2
 8000ef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	f003 0303 	and.w	r3, r3, #3
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	220f      	movs	r2, #15
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	43db      	mvns	r3, r3
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a4f      	ldr	r2, [pc, #316]	; (8001050 <HAL_GPIO_Init+0x308>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d025      	beq.n	8000f62 <HAL_GPIO_Init+0x21a>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a4e      	ldr	r2, [pc, #312]	; (8001054 <HAL_GPIO_Init+0x30c>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d01f      	beq.n	8000f5e <HAL_GPIO_Init+0x216>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a4d      	ldr	r2, [pc, #308]	; (8001058 <HAL_GPIO_Init+0x310>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d019      	beq.n	8000f5a <HAL_GPIO_Init+0x212>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a4c      	ldr	r2, [pc, #304]	; (800105c <HAL_GPIO_Init+0x314>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d013      	beq.n	8000f56 <HAL_GPIO_Init+0x20e>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a4b      	ldr	r2, [pc, #300]	; (8001060 <HAL_GPIO_Init+0x318>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d00d      	beq.n	8000f52 <HAL_GPIO_Init+0x20a>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a4a      	ldr	r2, [pc, #296]	; (8001064 <HAL_GPIO_Init+0x31c>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d007      	beq.n	8000f4e <HAL_GPIO_Init+0x206>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a49      	ldr	r2, [pc, #292]	; (8001068 <HAL_GPIO_Init+0x320>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d101      	bne.n	8000f4a <HAL_GPIO_Init+0x202>
 8000f46:	2306      	movs	r3, #6
 8000f48:	e00c      	b.n	8000f64 <HAL_GPIO_Init+0x21c>
 8000f4a:	2307      	movs	r3, #7
 8000f4c:	e00a      	b.n	8000f64 <HAL_GPIO_Init+0x21c>
 8000f4e:	2305      	movs	r3, #5
 8000f50:	e008      	b.n	8000f64 <HAL_GPIO_Init+0x21c>
 8000f52:	2304      	movs	r3, #4
 8000f54:	e006      	b.n	8000f64 <HAL_GPIO_Init+0x21c>
 8000f56:	2303      	movs	r3, #3
 8000f58:	e004      	b.n	8000f64 <HAL_GPIO_Init+0x21c>
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	e002      	b.n	8000f64 <HAL_GPIO_Init+0x21c>
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e000      	b.n	8000f64 <HAL_GPIO_Init+0x21c>
 8000f62:	2300      	movs	r3, #0
 8000f64:	69fa      	ldr	r2, [r7, #28]
 8000f66:	f002 0203 	and.w	r2, r2, #3
 8000f6a:	0092      	lsls	r2, r2, #2
 8000f6c:	4093      	lsls	r3, r2
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f74:	4935      	ldr	r1, [pc, #212]	; (800104c <HAL_GPIO_Init+0x304>)
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	089b      	lsrs	r3, r3, #2
 8000f7a:	3302      	adds	r3, #2
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f82:	4b3a      	ldr	r3, [pc, #232]	; (800106c <HAL_GPIO_Init+0x324>)
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	43db      	mvns	r3, r3
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d003      	beq.n	8000fa6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fa6:	4a31      	ldr	r2, [pc, #196]	; (800106c <HAL_GPIO_Init+0x324>)
 8000fa8:	69bb      	ldr	r3, [r7, #24]
 8000faa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fac:	4b2f      	ldr	r3, [pc, #188]	; (800106c <HAL_GPIO_Init+0x324>)
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d003      	beq.n	8000fd0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fd0:	4a26      	ldr	r2, [pc, #152]	; (800106c <HAL_GPIO_Init+0x324>)
 8000fd2:	69bb      	ldr	r3, [r7, #24]
 8000fd4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fd6:	4b25      	ldr	r3, [pc, #148]	; (800106c <HAL_GPIO_Init+0x324>)
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d003      	beq.n	8000ffa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ffa:	4a1c      	ldr	r2, [pc, #112]	; (800106c <HAL_GPIO_Init+0x324>)
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001000:	4b1a      	ldr	r3, [pc, #104]	; (800106c <HAL_GPIO_Init+0x324>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	43db      	mvns	r3, r3
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4013      	ands	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001018:	2b00      	cmp	r3, #0
 800101a:	d003      	beq.n	8001024 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	4313      	orrs	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001024:	4a11      	ldr	r2, [pc, #68]	; (800106c <HAL_GPIO_Init+0x324>)
 8001026:	69bb      	ldr	r3, [r7, #24]
 8001028:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	3301      	adds	r3, #1
 800102e:	61fb      	str	r3, [r7, #28]
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	2b0f      	cmp	r3, #15
 8001034:	f67f ae96 	bls.w	8000d64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001038:	bf00      	nop
 800103a:	bf00      	nop
 800103c:	3724      	adds	r7, #36	; 0x24
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	40023800 	.word	0x40023800
 800104c:	40013800 	.word	0x40013800
 8001050:	40020000 	.word	0x40020000
 8001054:	40020400 	.word	0x40020400
 8001058:	40020800 	.word	0x40020800
 800105c:	40020c00 	.word	0x40020c00
 8001060:	40021000 	.word	0x40021000
 8001064:	40021400 	.word	0x40021400
 8001068:	40021800 	.word	0x40021800
 800106c:	40013c00 	.word	0x40013c00

08001070 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	460b      	mov	r3, r1
 800107a:	807b      	strh	r3, [r7, #2]
 800107c:	4613      	mov	r3, r2
 800107e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001080:	787b      	ldrb	r3, [r7, #1]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d003      	beq.n	800108e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001086:	887a      	ldrh	r2, [r7, #2]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800108c:	e003      	b.n	8001096 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800108e:	887b      	ldrh	r3, [r7, #2]
 8001090:	041a      	lsls	r2, r3, #16
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	619a      	str	r2, [r3, #24]
}
 8001096:	bf00      	nop
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr

080010a2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010a2:	b480      	push	{r7}
 80010a4:	b085      	sub	sp, #20
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
 80010aa:	460b      	mov	r3, r1
 80010ac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	695b      	ldr	r3, [r3, #20]
 80010b2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010b4:	887a      	ldrh	r2, [r7, #2]
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	4013      	ands	r3, r2
 80010ba:	041a      	lsls	r2, r3, #16
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	43d9      	mvns	r1, r3
 80010c0:	887b      	ldrh	r3, [r7, #2]
 80010c2:	400b      	ands	r3, r1
 80010c4:	431a      	orrs	r2, r3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	619a      	str	r2, [r3, #24]
}
 80010ca:	bf00      	nop
 80010cc:	3714      	adds	r7, #20
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
	...

080010d8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80010de:	2300      	movs	r3, #0
 80010e0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	603b      	str	r3, [r7, #0]
 80010e6:	4b20      	ldr	r3, [pc, #128]	; (8001168 <HAL_PWREx_EnableOverDrive+0x90>)
 80010e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ea:	4a1f      	ldr	r2, [pc, #124]	; (8001168 <HAL_PWREx_EnableOverDrive+0x90>)
 80010ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010f0:	6413      	str	r3, [r2, #64]	; 0x40
 80010f2:	4b1d      	ldr	r3, [pc, #116]	; (8001168 <HAL_PWREx_EnableOverDrive+0x90>)
 80010f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010fa:	603b      	str	r3, [r7, #0]
 80010fc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80010fe:	4b1b      	ldr	r3, [pc, #108]	; (800116c <HAL_PWREx_EnableOverDrive+0x94>)
 8001100:	2201      	movs	r2, #1
 8001102:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001104:	f7ff fd32 	bl	8000b6c <HAL_GetTick>
 8001108:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800110a:	e009      	b.n	8001120 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800110c:	f7ff fd2e 	bl	8000b6c <HAL_GetTick>
 8001110:	4602      	mov	r2, r0
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800111a:	d901      	bls.n	8001120 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800111c:	2303      	movs	r3, #3
 800111e:	e01f      	b.n	8001160 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001120:	4b13      	ldr	r3, [pc, #76]	; (8001170 <HAL_PWREx_EnableOverDrive+0x98>)
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001128:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800112c:	d1ee      	bne.n	800110c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800112e:	4b11      	ldr	r3, [pc, #68]	; (8001174 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001130:	2201      	movs	r2, #1
 8001132:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001134:	f7ff fd1a 	bl	8000b6c <HAL_GetTick>
 8001138:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800113a:	e009      	b.n	8001150 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800113c:	f7ff fd16 	bl	8000b6c <HAL_GetTick>
 8001140:	4602      	mov	r2, r0
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800114a:	d901      	bls.n	8001150 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800114c:	2303      	movs	r3, #3
 800114e:	e007      	b.n	8001160 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001150:	4b07      	ldr	r3, [pc, #28]	; (8001170 <HAL_PWREx_EnableOverDrive+0x98>)
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001158:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800115c:	d1ee      	bne.n	800113c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800115e:	2300      	movs	r3, #0
}
 8001160:	4618      	mov	r0, r3
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	40023800 	.word	0x40023800
 800116c:	420e0040 	.word	0x420e0040
 8001170:	40007000 	.word	0x40007000
 8001174:	420e0044 	.word	0x420e0044

08001178 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d101      	bne.n	800118c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001188:	2301      	movs	r3, #1
 800118a:	e0cc      	b.n	8001326 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800118c:	4b68      	ldr	r3, [pc, #416]	; (8001330 <HAL_RCC_ClockConfig+0x1b8>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f003 030f 	and.w	r3, r3, #15
 8001194:	683a      	ldr	r2, [r7, #0]
 8001196:	429a      	cmp	r2, r3
 8001198:	d90c      	bls.n	80011b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800119a:	4b65      	ldr	r3, [pc, #404]	; (8001330 <HAL_RCC_ClockConfig+0x1b8>)
 800119c:	683a      	ldr	r2, [r7, #0]
 800119e:	b2d2      	uxtb	r2, r2
 80011a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011a2:	4b63      	ldr	r3, [pc, #396]	; (8001330 <HAL_RCC_ClockConfig+0x1b8>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 030f 	and.w	r3, r3, #15
 80011aa:	683a      	ldr	r2, [r7, #0]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d001      	beq.n	80011b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80011b0:	2301      	movs	r3, #1
 80011b2:	e0b8      	b.n	8001326 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f003 0302 	and.w	r3, r3, #2
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d020      	beq.n	8001202 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f003 0304 	and.w	r3, r3, #4
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d005      	beq.n	80011d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011cc:	4b59      	ldr	r3, [pc, #356]	; (8001334 <HAL_RCC_ClockConfig+0x1bc>)
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	4a58      	ldr	r2, [pc, #352]	; (8001334 <HAL_RCC_ClockConfig+0x1bc>)
 80011d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80011d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f003 0308 	and.w	r3, r3, #8
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d005      	beq.n	80011f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011e4:	4b53      	ldr	r3, [pc, #332]	; (8001334 <HAL_RCC_ClockConfig+0x1bc>)
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	4a52      	ldr	r2, [pc, #328]	; (8001334 <HAL_RCC_ClockConfig+0x1bc>)
 80011ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80011ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011f0:	4b50      	ldr	r3, [pc, #320]	; (8001334 <HAL_RCC_ClockConfig+0x1bc>)
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	494d      	ldr	r1, [pc, #308]	; (8001334 <HAL_RCC_ClockConfig+0x1bc>)
 80011fe:	4313      	orrs	r3, r2
 8001200:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	2b00      	cmp	r3, #0
 800120c:	d044      	beq.n	8001298 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	2b01      	cmp	r3, #1
 8001214:	d107      	bne.n	8001226 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001216:	4b47      	ldr	r3, [pc, #284]	; (8001334 <HAL_RCC_ClockConfig+0x1bc>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d119      	bne.n	8001256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e07f      	b.n	8001326 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	2b02      	cmp	r3, #2
 800122c:	d003      	beq.n	8001236 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001232:	2b03      	cmp	r3, #3
 8001234:	d107      	bne.n	8001246 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001236:	4b3f      	ldr	r3, [pc, #252]	; (8001334 <HAL_RCC_ClockConfig+0x1bc>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800123e:	2b00      	cmp	r3, #0
 8001240:	d109      	bne.n	8001256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e06f      	b.n	8001326 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001246:	4b3b      	ldr	r3, [pc, #236]	; (8001334 <HAL_RCC_ClockConfig+0x1bc>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 0302 	and.w	r3, r3, #2
 800124e:	2b00      	cmp	r3, #0
 8001250:	d101      	bne.n	8001256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e067      	b.n	8001326 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001256:	4b37      	ldr	r3, [pc, #220]	; (8001334 <HAL_RCC_ClockConfig+0x1bc>)
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	f023 0203 	bic.w	r2, r3, #3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	4934      	ldr	r1, [pc, #208]	; (8001334 <HAL_RCC_ClockConfig+0x1bc>)
 8001264:	4313      	orrs	r3, r2
 8001266:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001268:	f7ff fc80 	bl	8000b6c <HAL_GetTick>
 800126c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800126e:	e00a      	b.n	8001286 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001270:	f7ff fc7c 	bl	8000b6c <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	f241 3288 	movw	r2, #5000	; 0x1388
 800127e:	4293      	cmp	r3, r2
 8001280:	d901      	bls.n	8001286 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001282:	2303      	movs	r3, #3
 8001284:	e04f      	b.n	8001326 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001286:	4b2b      	ldr	r3, [pc, #172]	; (8001334 <HAL_RCC_ClockConfig+0x1bc>)
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	f003 020c 	and.w	r2, r3, #12
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	429a      	cmp	r2, r3
 8001296:	d1eb      	bne.n	8001270 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001298:	4b25      	ldr	r3, [pc, #148]	; (8001330 <HAL_RCC_ClockConfig+0x1b8>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f003 030f 	and.w	r3, r3, #15
 80012a0:	683a      	ldr	r2, [r7, #0]
 80012a2:	429a      	cmp	r2, r3
 80012a4:	d20c      	bcs.n	80012c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012a6:	4b22      	ldr	r3, [pc, #136]	; (8001330 <HAL_RCC_ClockConfig+0x1b8>)
 80012a8:	683a      	ldr	r2, [r7, #0]
 80012aa:	b2d2      	uxtb	r2, r2
 80012ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012ae:	4b20      	ldr	r3, [pc, #128]	; (8001330 <HAL_RCC_ClockConfig+0x1b8>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 030f 	and.w	r3, r3, #15
 80012b6:	683a      	ldr	r2, [r7, #0]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d001      	beq.n	80012c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	e032      	b.n	8001326 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f003 0304 	and.w	r3, r3, #4
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d008      	beq.n	80012de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012cc:	4b19      	ldr	r3, [pc, #100]	; (8001334 <HAL_RCC_ClockConfig+0x1bc>)
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	4916      	ldr	r1, [pc, #88]	; (8001334 <HAL_RCC_ClockConfig+0x1bc>)
 80012da:	4313      	orrs	r3, r2
 80012dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0308 	and.w	r3, r3, #8
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d009      	beq.n	80012fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80012ea:	4b12      	ldr	r3, [pc, #72]	; (8001334 <HAL_RCC_ClockConfig+0x1bc>)
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	691b      	ldr	r3, [r3, #16]
 80012f6:	00db      	lsls	r3, r3, #3
 80012f8:	490e      	ldr	r1, [pc, #56]	; (8001334 <HAL_RCC_ClockConfig+0x1bc>)
 80012fa:	4313      	orrs	r3, r2
 80012fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80012fe:	f000 f873 	bl	80013e8 <HAL_RCC_GetSysClockFreq>
 8001302:	4602      	mov	r2, r0
 8001304:	4b0b      	ldr	r3, [pc, #44]	; (8001334 <HAL_RCC_ClockConfig+0x1bc>)
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	091b      	lsrs	r3, r3, #4
 800130a:	f003 030f 	and.w	r3, r3, #15
 800130e:	490a      	ldr	r1, [pc, #40]	; (8001338 <HAL_RCC_ClockConfig+0x1c0>)
 8001310:	5ccb      	ldrb	r3, [r1, r3]
 8001312:	fa22 f303 	lsr.w	r3, r2, r3
 8001316:	4a09      	ldr	r2, [pc, #36]	; (800133c <HAL_RCC_ClockConfig+0x1c4>)
 8001318:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800131a:	4b09      	ldr	r3, [pc, #36]	; (8001340 <HAL_RCC_ClockConfig+0x1c8>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff fb16 	bl	8000950 <HAL_InitTick>

  return HAL_OK;
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40023c00 	.word	0x40023c00
 8001334:	40023800 	.word	0x40023800
 8001338:	08006b58 	.word	0x08006b58
 800133c:	20000000 	.word	0x20000000
 8001340:	20000004 	.word	0x20000004

08001344 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001348:	4b03      	ldr	r3, [pc, #12]	; (8001358 <HAL_RCC_GetHCLKFreq+0x14>)
 800134a:	681b      	ldr	r3, [r3, #0]
}
 800134c:	4618      	mov	r0, r3
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	20000000 	.word	0x20000000

0800135c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001360:	f7ff fff0 	bl	8001344 <HAL_RCC_GetHCLKFreq>
 8001364:	4602      	mov	r2, r0
 8001366:	4b05      	ldr	r3, [pc, #20]	; (800137c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	0a9b      	lsrs	r3, r3, #10
 800136c:	f003 0307 	and.w	r3, r3, #7
 8001370:	4903      	ldr	r1, [pc, #12]	; (8001380 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001372:	5ccb      	ldrb	r3, [r1, r3]
 8001374:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001378:	4618      	mov	r0, r3
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40023800 	.word	0x40023800
 8001380:	08006b68 	.word	0x08006b68

08001384 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	220f      	movs	r2, #15
 8001392:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001394:	4b12      	ldr	r3, [pc, #72]	; (80013e0 <HAL_RCC_GetClockConfig+0x5c>)
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	f003 0203 	and.w	r2, r3, #3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80013a0:	4b0f      	ldr	r3, [pc, #60]	; (80013e0 <HAL_RCC_GetClockConfig+0x5c>)
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80013ac:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <HAL_RCC_GetClockConfig+0x5c>)
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80013b8:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <HAL_RCC_GetClockConfig+0x5c>)
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	08db      	lsrs	r3, r3, #3
 80013be:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80013c6:	4b07      	ldr	r3, [pc, #28]	; (80013e4 <HAL_RCC_GetClockConfig+0x60>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 020f 	and.w	r2, r3, #15
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	601a      	str	r2, [r3, #0]
}
 80013d2:	bf00      	nop
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	40023800 	.word	0x40023800
 80013e4:	40023c00 	.word	0x40023c00

080013e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013ec:	b0ae      	sub	sp, #184	; 0xb8
 80013ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80013f0:	2300      	movs	r3, #0
 80013f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80013f6:	2300      	movs	r3, #0
 80013f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80013fc:	2300      	movs	r3, #0
 80013fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001402:	2300      	movs	r3, #0
 8001404:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001408:	2300      	movs	r3, #0
 800140a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800140e:	4bcb      	ldr	r3, [pc, #812]	; (800173c <HAL_RCC_GetSysClockFreq+0x354>)
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	f003 030c 	and.w	r3, r3, #12
 8001416:	2b0c      	cmp	r3, #12
 8001418:	f200 8206 	bhi.w	8001828 <HAL_RCC_GetSysClockFreq+0x440>
 800141c:	a201      	add	r2, pc, #4	; (adr r2, 8001424 <HAL_RCC_GetSysClockFreq+0x3c>)
 800141e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001422:	bf00      	nop
 8001424:	08001459 	.word	0x08001459
 8001428:	08001829 	.word	0x08001829
 800142c:	08001829 	.word	0x08001829
 8001430:	08001829 	.word	0x08001829
 8001434:	08001461 	.word	0x08001461
 8001438:	08001829 	.word	0x08001829
 800143c:	08001829 	.word	0x08001829
 8001440:	08001829 	.word	0x08001829
 8001444:	08001469 	.word	0x08001469
 8001448:	08001829 	.word	0x08001829
 800144c:	08001829 	.word	0x08001829
 8001450:	08001829 	.word	0x08001829
 8001454:	08001659 	.word	0x08001659
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001458:	4bb9      	ldr	r3, [pc, #740]	; (8001740 <HAL_RCC_GetSysClockFreq+0x358>)
 800145a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800145e:	e1e7      	b.n	8001830 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001460:	4bb8      	ldr	r3, [pc, #736]	; (8001744 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001462:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001466:	e1e3      	b.n	8001830 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001468:	4bb4      	ldr	r3, [pc, #720]	; (800173c <HAL_RCC_GetSysClockFreq+0x354>)
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001470:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001474:	4bb1      	ldr	r3, [pc, #708]	; (800173c <HAL_RCC_GetSysClockFreq+0x354>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d071      	beq.n	8001564 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001480:	4bae      	ldr	r3, [pc, #696]	; (800173c <HAL_RCC_GetSysClockFreq+0x354>)
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	099b      	lsrs	r3, r3, #6
 8001486:	2200      	movs	r2, #0
 8001488:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800148c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001490:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001494:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001498:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800149c:	2300      	movs	r3, #0
 800149e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80014a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80014a6:	4622      	mov	r2, r4
 80014a8:	462b      	mov	r3, r5
 80014aa:	f04f 0000 	mov.w	r0, #0
 80014ae:	f04f 0100 	mov.w	r1, #0
 80014b2:	0159      	lsls	r1, r3, #5
 80014b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80014b8:	0150      	lsls	r0, r2, #5
 80014ba:	4602      	mov	r2, r0
 80014bc:	460b      	mov	r3, r1
 80014be:	4621      	mov	r1, r4
 80014c0:	1a51      	subs	r1, r2, r1
 80014c2:	6439      	str	r1, [r7, #64]	; 0x40
 80014c4:	4629      	mov	r1, r5
 80014c6:	eb63 0301 	sbc.w	r3, r3, r1
 80014ca:	647b      	str	r3, [r7, #68]	; 0x44
 80014cc:	f04f 0200 	mov.w	r2, #0
 80014d0:	f04f 0300 	mov.w	r3, #0
 80014d4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80014d8:	4649      	mov	r1, r9
 80014da:	018b      	lsls	r3, r1, #6
 80014dc:	4641      	mov	r1, r8
 80014de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80014e2:	4641      	mov	r1, r8
 80014e4:	018a      	lsls	r2, r1, #6
 80014e6:	4641      	mov	r1, r8
 80014e8:	1a51      	subs	r1, r2, r1
 80014ea:	63b9      	str	r1, [r7, #56]	; 0x38
 80014ec:	4649      	mov	r1, r9
 80014ee:	eb63 0301 	sbc.w	r3, r3, r1
 80014f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80014f4:	f04f 0200 	mov.w	r2, #0
 80014f8:	f04f 0300 	mov.w	r3, #0
 80014fc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001500:	4649      	mov	r1, r9
 8001502:	00cb      	lsls	r3, r1, #3
 8001504:	4641      	mov	r1, r8
 8001506:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800150a:	4641      	mov	r1, r8
 800150c:	00ca      	lsls	r2, r1, #3
 800150e:	4610      	mov	r0, r2
 8001510:	4619      	mov	r1, r3
 8001512:	4603      	mov	r3, r0
 8001514:	4622      	mov	r2, r4
 8001516:	189b      	adds	r3, r3, r2
 8001518:	633b      	str	r3, [r7, #48]	; 0x30
 800151a:	462b      	mov	r3, r5
 800151c:	460a      	mov	r2, r1
 800151e:	eb42 0303 	adc.w	r3, r2, r3
 8001522:	637b      	str	r3, [r7, #52]	; 0x34
 8001524:	f04f 0200 	mov.w	r2, #0
 8001528:	f04f 0300 	mov.w	r3, #0
 800152c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001530:	4629      	mov	r1, r5
 8001532:	024b      	lsls	r3, r1, #9
 8001534:	4621      	mov	r1, r4
 8001536:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800153a:	4621      	mov	r1, r4
 800153c:	024a      	lsls	r2, r1, #9
 800153e:	4610      	mov	r0, r2
 8001540:	4619      	mov	r1, r3
 8001542:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001546:	2200      	movs	r2, #0
 8001548:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800154c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001550:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001554:	f7fe fea6 	bl	80002a4 <__aeabi_uldivmod>
 8001558:	4602      	mov	r2, r0
 800155a:	460b      	mov	r3, r1
 800155c:	4613      	mov	r3, r2
 800155e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001562:	e067      	b.n	8001634 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001564:	4b75      	ldr	r3, [pc, #468]	; (800173c <HAL_RCC_GetSysClockFreq+0x354>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	099b      	lsrs	r3, r3, #6
 800156a:	2200      	movs	r2, #0
 800156c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001570:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001574:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001578:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800157c:	67bb      	str	r3, [r7, #120]	; 0x78
 800157e:	2300      	movs	r3, #0
 8001580:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001582:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001586:	4622      	mov	r2, r4
 8001588:	462b      	mov	r3, r5
 800158a:	f04f 0000 	mov.w	r0, #0
 800158e:	f04f 0100 	mov.w	r1, #0
 8001592:	0159      	lsls	r1, r3, #5
 8001594:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001598:	0150      	lsls	r0, r2, #5
 800159a:	4602      	mov	r2, r0
 800159c:	460b      	mov	r3, r1
 800159e:	4621      	mov	r1, r4
 80015a0:	1a51      	subs	r1, r2, r1
 80015a2:	62b9      	str	r1, [r7, #40]	; 0x28
 80015a4:	4629      	mov	r1, r5
 80015a6:	eb63 0301 	sbc.w	r3, r3, r1
 80015aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015ac:	f04f 0200 	mov.w	r2, #0
 80015b0:	f04f 0300 	mov.w	r3, #0
 80015b4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80015b8:	4649      	mov	r1, r9
 80015ba:	018b      	lsls	r3, r1, #6
 80015bc:	4641      	mov	r1, r8
 80015be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80015c2:	4641      	mov	r1, r8
 80015c4:	018a      	lsls	r2, r1, #6
 80015c6:	4641      	mov	r1, r8
 80015c8:	ebb2 0a01 	subs.w	sl, r2, r1
 80015cc:	4649      	mov	r1, r9
 80015ce:	eb63 0b01 	sbc.w	fp, r3, r1
 80015d2:	f04f 0200 	mov.w	r2, #0
 80015d6:	f04f 0300 	mov.w	r3, #0
 80015da:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80015de:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80015e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80015e6:	4692      	mov	sl, r2
 80015e8:	469b      	mov	fp, r3
 80015ea:	4623      	mov	r3, r4
 80015ec:	eb1a 0303 	adds.w	r3, sl, r3
 80015f0:	623b      	str	r3, [r7, #32]
 80015f2:	462b      	mov	r3, r5
 80015f4:	eb4b 0303 	adc.w	r3, fp, r3
 80015f8:	627b      	str	r3, [r7, #36]	; 0x24
 80015fa:	f04f 0200 	mov.w	r2, #0
 80015fe:	f04f 0300 	mov.w	r3, #0
 8001602:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001606:	4629      	mov	r1, r5
 8001608:	028b      	lsls	r3, r1, #10
 800160a:	4621      	mov	r1, r4
 800160c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001610:	4621      	mov	r1, r4
 8001612:	028a      	lsls	r2, r1, #10
 8001614:	4610      	mov	r0, r2
 8001616:	4619      	mov	r1, r3
 8001618:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800161c:	2200      	movs	r2, #0
 800161e:	673b      	str	r3, [r7, #112]	; 0x70
 8001620:	677a      	str	r2, [r7, #116]	; 0x74
 8001622:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001626:	f7fe fe3d 	bl	80002a4 <__aeabi_uldivmod>
 800162a:	4602      	mov	r2, r0
 800162c:	460b      	mov	r3, r1
 800162e:	4613      	mov	r3, r2
 8001630:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001634:	4b41      	ldr	r3, [pc, #260]	; (800173c <HAL_RCC_GetSysClockFreq+0x354>)
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	0c1b      	lsrs	r3, r3, #16
 800163a:	f003 0303 	and.w	r3, r3, #3
 800163e:	3301      	adds	r3, #1
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001646:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800164a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800164e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001652:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001656:	e0eb      	b.n	8001830 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001658:	4b38      	ldr	r3, [pc, #224]	; (800173c <HAL_RCC_GetSysClockFreq+0x354>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001660:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001664:	4b35      	ldr	r3, [pc, #212]	; (800173c <HAL_RCC_GetSysClockFreq+0x354>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d06b      	beq.n	8001748 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001670:	4b32      	ldr	r3, [pc, #200]	; (800173c <HAL_RCC_GetSysClockFreq+0x354>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	099b      	lsrs	r3, r3, #6
 8001676:	2200      	movs	r2, #0
 8001678:	66bb      	str	r3, [r7, #104]	; 0x68
 800167a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800167c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800167e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001682:	663b      	str	r3, [r7, #96]	; 0x60
 8001684:	2300      	movs	r3, #0
 8001686:	667b      	str	r3, [r7, #100]	; 0x64
 8001688:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800168c:	4622      	mov	r2, r4
 800168e:	462b      	mov	r3, r5
 8001690:	f04f 0000 	mov.w	r0, #0
 8001694:	f04f 0100 	mov.w	r1, #0
 8001698:	0159      	lsls	r1, r3, #5
 800169a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800169e:	0150      	lsls	r0, r2, #5
 80016a0:	4602      	mov	r2, r0
 80016a2:	460b      	mov	r3, r1
 80016a4:	4621      	mov	r1, r4
 80016a6:	1a51      	subs	r1, r2, r1
 80016a8:	61b9      	str	r1, [r7, #24]
 80016aa:	4629      	mov	r1, r5
 80016ac:	eb63 0301 	sbc.w	r3, r3, r1
 80016b0:	61fb      	str	r3, [r7, #28]
 80016b2:	f04f 0200 	mov.w	r2, #0
 80016b6:	f04f 0300 	mov.w	r3, #0
 80016ba:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80016be:	4659      	mov	r1, fp
 80016c0:	018b      	lsls	r3, r1, #6
 80016c2:	4651      	mov	r1, sl
 80016c4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016c8:	4651      	mov	r1, sl
 80016ca:	018a      	lsls	r2, r1, #6
 80016cc:	4651      	mov	r1, sl
 80016ce:	ebb2 0801 	subs.w	r8, r2, r1
 80016d2:	4659      	mov	r1, fp
 80016d4:	eb63 0901 	sbc.w	r9, r3, r1
 80016d8:	f04f 0200 	mov.w	r2, #0
 80016dc:	f04f 0300 	mov.w	r3, #0
 80016e0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80016e4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80016e8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80016ec:	4690      	mov	r8, r2
 80016ee:	4699      	mov	r9, r3
 80016f0:	4623      	mov	r3, r4
 80016f2:	eb18 0303 	adds.w	r3, r8, r3
 80016f6:	613b      	str	r3, [r7, #16]
 80016f8:	462b      	mov	r3, r5
 80016fa:	eb49 0303 	adc.w	r3, r9, r3
 80016fe:	617b      	str	r3, [r7, #20]
 8001700:	f04f 0200 	mov.w	r2, #0
 8001704:	f04f 0300 	mov.w	r3, #0
 8001708:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800170c:	4629      	mov	r1, r5
 800170e:	024b      	lsls	r3, r1, #9
 8001710:	4621      	mov	r1, r4
 8001712:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001716:	4621      	mov	r1, r4
 8001718:	024a      	lsls	r2, r1, #9
 800171a:	4610      	mov	r0, r2
 800171c:	4619      	mov	r1, r3
 800171e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001722:	2200      	movs	r2, #0
 8001724:	65bb      	str	r3, [r7, #88]	; 0x58
 8001726:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001728:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800172c:	f7fe fdba 	bl	80002a4 <__aeabi_uldivmod>
 8001730:	4602      	mov	r2, r0
 8001732:	460b      	mov	r3, r1
 8001734:	4613      	mov	r3, r2
 8001736:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800173a:	e065      	b.n	8001808 <HAL_RCC_GetSysClockFreq+0x420>
 800173c:	40023800 	.word	0x40023800
 8001740:	00f42400 	.word	0x00f42400
 8001744:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001748:	4b3d      	ldr	r3, [pc, #244]	; (8001840 <HAL_RCC_GetSysClockFreq+0x458>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	099b      	lsrs	r3, r3, #6
 800174e:	2200      	movs	r2, #0
 8001750:	4618      	mov	r0, r3
 8001752:	4611      	mov	r1, r2
 8001754:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001758:	653b      	str	r3, [r7, #80]	; 0x50
 800175a:	2300      	movs	r3, #0
 800175c:	657b      	str	r3, [r7, #84]	; 0x54
 800175e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001762:	4642      	mov	r2, r8
 8001764:	464b      	mov	r3, r9
 8001766:	f04f 0000 	mov.w	r0, #0
 800176a:	f04f 0100 	mov.w	r1, #0
 800176e:	0159      	lsls	r1, r3, #5
 8001770:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001774:	0150      	lsls	r0, r2, #5
 8001776:	4602      	mov	r2, r0
 8001778:	460b      	mov	r3, r1
 800177a:	4641      	mov	r1, r8
 800177c:	1a51      	subs	r1, r2, r1
 800177e:	60b9      	str	r1, [r7, #8]
 8001780:	4649      	mov	r1, r9
 8001782:	eb63 0301 	sbc.w	r3, r3, r1
 8001786:	60fb      	str	r3, [r7, #12]
 8001788:	f04f 0200 	mov.w	r2, #0
 800178c:	f04f 0300 	mov.w	r3, #0
 8001790:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001794:	4659      	mov	r1, fp
 8001796:	018b      	lsls	r3, r1, #6
 8001798:	4651      	mov	r1, sl
 800179a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800179e:	4651      	mov	r1, sl
 80017a0:	018a      	lsls	r2, r1, #6
 80017a2:	4651      	mov	r1, sl
 80017a4:	1a54      	subs	r4, r2, r1
 80017a6:	4659      	mov	r1, fp
 80017a8:	eb63 0501 	sbc.w	r5, r3, r1
 80017ac:	f04f 0200 	mov.w	r2, #0
 80017b0:	f04f 0300 	mov.w	r3, #0
 80017b4:	00eb      	lsls	r3, r5, #3
 80017b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017ba:	00e2      	lsls	r2, r4, #3
 80017bc:	4614      	mov	r4, r2
 80017be:	461d      	mov	r5, r3
 80017c0:	4643      	mov	r3, r8
 80017c2:	18e3      	adds	r3, r4, r3
 80017c4:	603b      	str	r3, [r7, #0]
 80017c6:	464b      	mov	r3, r9
 80017c8:	eb45 0303 	adc.w	r3, r5, r3
 80017cc:	607b      	str	r3, [r7, #4]
 80017ce:	f04f 0200 	mov.w	r2, #0
 80017d2:	f04f 0300 	mov.w	r3, #0
 80017d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80017da:	4629      	mov	r1, r5
 80017dc:	028b      	lsls	r3, r1, #10
 80017de:	4621      	mov	r1, r4
 80017e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017e4:	4621      	mov	r1, r4
 80017e6:	028a      	lsls	r2, r1, #10
 80017e8:	4610      	mov	r0, r2
 80017ea:	4619      	mov	r1, r3
 80017ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80017f0:	2200      	movs	r2, #0
 80017f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80017f4:	64fa      	str	r2, [r7, #76]	; 0x4c
 80017f6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80017fa:	f7fe fd53 	bl	80002a4 <__aeabi_uldivmod>
 80017fe:	4602      	mov	r2, r0
 8001800:	460b      	mov	r3, r1
 8001802:	4613      	mov	r3, r2
 8001804:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001808:	4b0d      	ldr	r3, [pc, #52]	; (8001840 <HAL_RCC_GetSysClockFreq+0x458>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	0f1b      	lsrs	r3, r3, #28
 800180e:	f003 0307 	and.w	r3, r3, #7
 8001812:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001816:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800181a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800181e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001822:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001826:	e003      	b.n	8001830 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001828:	4b06      	ldr	r3, [pc, #24]	; (8001844 <HAL_RCC_GetSysClockFreq+0x45c>)
 800182a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800182e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001830:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001834:	4618      	mov	r0, r3
 8001836:	37b8      	adds	r7, #184	; 0xb8
 8001838:	46bd      	mov	sp, r7
 800183a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800183e:	bf00      	nop
 8001840:	40023800 	.word	0x40023800
 8001844:	00f42400 	.word	0x00f42400

08001848 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d101      	bne.n	800185a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e28d      	b.n	8001d76 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	2b00      	cmp	r3, #0
 8001864:	f000 8083 	beq.w	800196e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001868:	4b94      	ldr	r3, [pc, #592]	; (8001abc <HAL_RCC_OscConfig+0x274>)
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	f003 030c 	and.w	r3, r3, #12
 8001870:	2b04      	cmp	r3, #4
 8001872:	d019      	beq.n	80018a8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001874:	4b91      	ldr	r3, [pc, #580]	; (8001abc <HAL_RCC_OscConfig+0x274>)
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800187c:	2b08      	cmp	r3, #8
 800187e:	d106      	bne.n	800188e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001880:	4b8e      	ldr	r3, [pc, #568]	; (8001abc <HAL_RCC_OscConfig+0x274>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001888:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800188c:	d00c      	beq.n	80018a8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800188e:	4b8b      	ldr	r3, [pc, #556]	; (8001abc <HAL_RCC_OscConfig+0x274>)
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001896:	2b0c      	cmp	r3, #12
 8001898:	d112      	bne.n	80018c0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800189a:	4b88      	ldr	r3, [pc, #544]	; (8001abc <HAL_RCC_OscConfig+0x274>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018a6:	d10b      	bne.n	80018c0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018a8:	4b84      	ldr	r3, [pc, #528]	; (8001abc <HAL_RCC_OscConfig+0x274>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d05b      	beq.n	800196c <HAL_RCC_OscConfig+0x124>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d157      	bne.n	800196c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e25a      	b.n	8001d76 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018c8:	d106      	bne.n	80018d8 <HAL_RCC_OscConfig+0x90>
 80018ca:	4b7c      	ldr	r3, [pc, #496]	; (8001abc <HAL_RCC_OscConfig+0x274>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a7b      	ldr	r2, [pc, #492]	; (8001abc <HAL_RCC_OscConfig+0x274>)
 80018d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018d4:	6013      	str	r3, [r2, #0]
 80018d6:	e01d      	b.n	8001914 <HAL_RCC_OscConfig+0xcc>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018e0:	d10c      	bne.n	80018fc <HAL_RCC_OscConfig+0xb4>
 80018e2:	4b76      	ldr	r3, [pc, #472]	; (8001abc <HAL_RCC_OscConfig+0x274>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a75      	ldr	r2, [pc, #468]	; (8001abc <HAL_RCC_OscConfig+0x274>)
 80018e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018ec:	6013      	str	r3, [r2, #0]
 80018ee:	4b73      	ldr	r3, [pc, #460]	; (8001abc <HAL_RCC_OscConfig+0x274>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a72      	ldr	r2, [pc, #456]	; (8001abc <HAL_RCC_OscConfig+0x274>)
 80018f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018f8:	6013      	str	r3, [r2, #0]
 80018fa:	e00b      	b.n	8001914 <HAL_RCC_OscConfig+0xcc>
 80018fc:	4b6f      	ldr	r3, [pc, #444]	; (8001abc <HAL_RCC_OscConfig+0x274>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a6e      	ldr	r2, [pc, #440]	; (8001abc <HAL_RCC_OscConfig+0x274>)
 8001902:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001906:	6013      	str	r3, [r2, #0]
 8001908:	4b6c      	ldr	r3, [pc, #432]	; (8001abc <HAL_RCC_OscConfig+0x274>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a6b      	ldr	r2, [pc, #428]	; (8001abc <HAL_RCC_OscConfig+0x274>)
 800190e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001912:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d013      	beq.n	8001944 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800191c:	f7ff f926 	bl	8000b6c <HAL_GetTick>
 8001920:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001922:	e008      	b.n	8001936 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001924:	f7ff f922 	bl	8000b6c <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b64      	cmp	r3, #100	; 0x64
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e21f      	b.n	8001d76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001936:	4b61      	ldr	r3, [pc, #388]	; (8001abc <HAL_RCC_OscConfig+0x274>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d0f0      	beq.n	8001924 <HAL_RCC_OscConfig+0xdc>
 8001942:	e014      	b.n	800196e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001944:	f7ff f912 	bl	8000b6c <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800194c:	f7ff f90e 	bl	8000b6c <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b64      	cmp	r3, #100	; 0x64
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e20b      	b.n	8001d76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800195e:	4b57      	ldr	r3, [pc, #348]	; (8001abc <HAL_RCC_OscConfig+0x274>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1f0      	bne.n	800194c <HAL_RCC_OscConfig+0x104>
 800196a:	e000      	b.n	800196e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800196c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	2b00      	cmp	r3, #0
 8001978:	d06f      	beq.n	8001a5a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800197a:	4b50      	ldr	r3, [pc, #320]	; (8001abc <HAL_RCC_OscConfig+0x274>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f003 030c 	and.w	r3, r3, #12
 8001982:	2b00      	cmp	r3, #0
 8001984:	d017      	beq.n	80019b6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001986:	4b4d      	ldr	r3, [pc, #308]	; (8001abc <HAL_RCC_OscConfig+0x274>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800198e:	2b08      	cmp	r3, #8
 8001990:	d105      	bne.n	800199e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001992:	4b4a      	ldr	r3, [pc, #296]	; (8001abc <HAL_RCC_OscConfig+0x274>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d00b      	beq.n	80019b6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800199e:	4b47      	ldr	r3, [pc, #284]	; (8001abc <HAL_RCC_OscConfig+0x274>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80019a6:	2b0c      	cmp	r3, #12
 80019a8:	d11c      	bne.n	80019e4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019aa:	4b44      	ldr	r3, [pc, #272]	; (8001abc <HAL_RCC_OscConfig+0x274>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d116      	bne.n	80019e4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019b6:	4b41      	ldr	r3, [pc, #260]	; (8001abc <HAL_RCC_OscConfig+0x274>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d005      	beq.n	80019ce <HAL_RCC_OscConfig+0x186>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d001      	beq.n	80019ce <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e1d3      	b.n	8001d76 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ce:	4b3b      	ldr	r3, [pc, #236]	; (8001abc <HAL_RCC_OscConfig+0x274>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	691b      	ldr	r3, [r3, #16]
 80019da:	00db      	lsls	r3, r3, #3
 80019dc:	4937      	ldr	r1, [pc, #220]	; (8001abc <HAL_RCC_OscConfig+0x274>)
 80019de:	4313      	orrs	r3, r2
 80019e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019e2:	e03a      	b.n	8001a5a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d020      	beq.n	8001a2e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019ec:	4b34      	ldr	r3, [pc, #208]	; (8001ac0 <HAL_RCC_OscConfig+0x278>)
 80019ee:	2201      	movs	r2, #1
 80019f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f2:	f7ff f8bb 	bl	8000b6c <HAL_GetTick>
 80019f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019f8:	e008      	b.n	8001a0c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019fa:	f7ff f8b7 	bl	8000b6c <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d901      	bls.n	8001a0c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e1b4      	b.n	8001d76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a0c:	4b2b      	ldr	r3, [pc, #172]	; (8001abc <HAL_RCC_OscConfig+0x274>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0302 	and.w	r3, r3, #2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d0f0      	beq.n	80019fa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a18:	4b28      	ldr	r3, [pc, #160]	; (8001abc <HAL_RCC_OscConfig+0x274>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	691b      	ldr	r3, [r3, #16]
 8001a24:	00db      	lsls	r3, r3, #3
 8001a26:	4925      	ldr	r1, [pc, #148]	; (8001abc <HAL_RCC_OscConfig+0x274>)
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	600b      	str	r3, [r1, #0]
 8001a2c:	e015      	b.n	8001a5a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a2e:	4b24      	ldr	r3, [pc, #144]	; (8001ac0 <HAL_RCC_OscConfig+0x278>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a34:	f7ff f89a 	bl	8000b6c <HAL_GetTick>
 8001a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a3a:	e008      	b.n	8001a4e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a3c:	f7ff f896 	bl	8000b6c <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e193      	b.n	8001d76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a4e:	4b1b      	ldr	r3, [pc, #108]	; (8001abc <HAL_RCC_OscConfig+0x274>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d1f0      	bne.n	8001a3c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0308 	and.w	r3, r3, #8
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d036      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	695b      	ldr	r3, [r3, #20]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d016      	beq.n	8001a9c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a6e:	4b15      	ldr	r3, [pc, #84]	; (8001ac4 <HAL_RCC_OscConfig+0x27c>)
 8001a70:	2201      	movs	r2, #1
 8001a72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a74:	f7ff f87a 	bl	8000b6c <HAL_GetTick>
 8001a78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a7a:	e008      	b.n	8001a8e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a7c:	f7ff f876 	bl	8000b6c <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e173      	b.n	8001d76 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a8e:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <HAL_RCC_OscConfig+0x274>)
 8001a90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d0f0      	beq.n	8001a7c <HAL_RCC_OscConfig+0x234>
 8001a9a:	e01b      	b.n	8001ad4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a9c:	4b09      	ldr	r3, [pc, #36]	; (8001ac4 <HAL_RCC_OscConfig+0x27c>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aa2:	f7ff f863 	bl	8000b6c <HAL_GetTick>
 8001aa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aa8:	e00e      	b.n	8001ac8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001aaa:	f7ff f85f 	bl	8000b6c <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d907      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e15c      	b.n	8001d76 <HAL_RCC_OscConfig+0x52e>
 8001abc:	40023800 	.word	0x40023800
 8001ac0:	42470000 	.word	0x42470000
 8001ac4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ac8:	4b8a      	ldr	r3, [pc, #552]	; (8001cf4 <HAL_RCC_OscConfig+0x4ac>)
 8001aca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001acc:	f003 0302 	and.w	r3, r3, #2
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d1ea      	bne.n	8001aaa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0304 	and.w	r3, r3, #4
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	f000 8097 	beq.w	8001c10 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ae6:	4b83      	ldr	r3, [pc, #524]	; (8001cf4 <HAL_RCC_OscConfig+0x4ac>)
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d10f      	bne.n	8001b12 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	60bb      	str	r3, [r7, #8]
 8001af6:	4b7f      	ldr	r3, [pc, #508]	; (8001cf4 <HAL_RCC_OscConfig+0x4ac>)
 8001af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afa:	4a7e      	ldr	r2, [pc, #504]	; (8001cf4 <HAL_RCC_OscConfig+0x4ac>)
 8001afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b00:	6413      	str	r3, [r2, #64]	; 0x40
 8001b02:	4b7c      	ldr	r3, [pc, #496]	; (8001cf4 <HAL_RCC_OscConfig+0x4ac>)
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0a:	60bb      	str	r3, [r7, #8]
 8001b0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b12:	4b79      	ldr	r3, [pc, #484]	; (8001cf8 <HAL_RCC_OscConfig+0x4b0>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d118      	bne.n	8001b50 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b1e:	4b76      	ldr	r3, [pc, #472]	; (8001cf8 <HAL_RCC_OscConfig+0x4b0>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a75      	ldr	r2, [pc, #468]	; (8001cf8 <HAL_RCC_OscConfig+0x4b0>)
 8001b24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b2a:	f7ff f81f 	bl	8000b6c <HAL_GetTick>
 8001b2e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b30:	e008      	b.n	8001b44 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b32:	f7ff f81b 	bl	8000b6c <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d901      	bls.n	8001b44 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e118      	b.n	8001d76 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b44:	4b6c      	ldr	r3, [pc, #432]	; (8001cf8 <HAL_RCC_OscConfig+0x4b0>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d0f0      	beq.n	8001b32 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d106      	bne.n	8001b66 <HAL_RCC_OscConfig+0x31e>
 8001b58:	4b66      	ldr	r3, [pc, #408]	; (8001cf4 <HAL_RCC_OscConfig+0x4ac>)
 8001b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b5c:	4a65      	ldr	r2, [pc, #404]	; (8001cf4 <HAL_RCC_OscConfig+0x4ac>)
 8001b5e:	f043 0301 	orr.w	r3, r3, #1
 8001b62:	6713      	str	r3, [r2, #112]	; 0x70
 8001b64:	e01c      	b.n	8001ba0 <HAL_RCC_OscConfig+0x358>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	2b05      	cmp	r3, #5
 8001b6c:	d10c      	bne.n	8001b88 <HAL_RCC_OscConfig+0x340>
 8001b6e:	4b61      	ldr	r3, [pc, #388]	; (8001cf4 <HAL_RCC_OscConfig+0x4ac>)
 8001b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b72:	4a60      	ldr	r2, [pc, #384]	; (8001cf4 <HAL_RCC_OscConfig+0x4ac>)
 8001b74:	f043 0304 	orr.w	r3, r3, #4
 8001b78:	6713      	str	r3, [r2, #112]	; 0x70
 8001b7a:	4b5e      	ldr	r3, [pc, #376]	; (8001cf4 <HAL_RCC_OscConfig+0x4ac>)
 8001b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b7e:	4a5d      	ldr	r2, [pc, #372]	; (8001cf4 <HAL_RCC_OscConfig+0x4ac>)
 8001b80:	f043 0301 	orr.w	r3, r3, #1
 8001b84:	6713      	str	r3, [r2, #112]	; 0x70
 8001b86:	e00b      	b.n	8001ba0 <HAL_RCC_OscConfig+0x358>
 8001b88:	4b5a      	ldr	r3, [pc, #360]	; (8001cf4 <HAL_RCC_OscConfig+0x4ac>)
 8001b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b8c:	4a59      	ldr	r2, [pc, #356]	; (8001cf4 <HAL_RCC_OscConfig+0x4ac>)
 8001b8e:	f023 0301 	bic.w	r3, r3, #1
 8001b92:	6713      	str	r3, [r2, #112]	; 0x70
 8001b94:	4b57      	ldr	r3, [pc, #348]	; (8001cf4 <HAL_RCC_OscConfig+0x4ac>)
 8001b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b98:	4a56      	ldr	r2, [pc, #344]	; (8001cf4 <HAL_RCC_OscConfig+0x4ac>)
 8001b9a:	f023 0304 	bic.w	r3, r3, #4
 8001b9e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d015      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ba8:	f7fe ffe0 	bl	8000b6c <HAL_GetTick>
 8001bac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bae:	e00a      	b.n	8001bc6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bb0:	f7fe ffdc 	bl	8000b6c <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e0d7      	b.n	8001d76 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bc6:	4b4b      	ldr	r3, [pc, #300]	; (8001cf4 <HAL_RCC_OscConfig+0x4ac>)
 8001bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d0ee      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x368>
 8001bd2:	e014      	b.n	8001bfe <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bd4:	f7fe ffca 	bl	8000b6c <HAL_GetTick>
 8001bd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bda:	e00a      	b.n	8001bf2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bdc:	f7fe ffc6 	bl	8000b6c <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e0c1      	b.n	8001d76 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bf2:	4b40      	ldr	r3, [pc, #256]	; (8001cf4 <HAL_RCC_OscConfig+0x4ac>)
 8001bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d1ee      	bne.n	8001bdc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bfe:	7dfb      	ldrb	r3, [r7, #23]
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d105      	bne.n	8001c10 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c04:	4b3b      	ldr	r3, [pc, #236]	; (8001cf4 <HAL_RCC_OscConfig+0x4ac>)
 8001c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c08:	4a3a      	ldr	r2, [pc, #232]	; (8001cf4 <HAL_RCC_OscConfig+0x4ac>)
 8001c0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c0e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	f000 80ad 	beq.w	8001d74 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c1a:	4b36      	ldr	r3, [pc, #216]	; (8001cf4 <HAL_RCC_OscConfig+0x4ac>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f003 030c 	and.w	r3, r3, #12
 8001c22:	2b08      	cmp	r3, #8
 8001c24:	d060      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	699b      	ldr	r3, [r3, #24]
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d145      	bne.n	8001cba <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c2e:	4b33      	ldr	r3, [pc, #204]	; (8001cfc <HAL_RCC_OscConfig+0x4b4>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c34:	f7fe ff9a 	bl	8000b6c <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c3c:	f7fe ff96 	bl	8000b6c <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e093      	b.n	8001d76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c4e:	4b29      	ldr	r3, [pc, #164]	; (8001cf4 <HAL_RCC_OscConfig+0x4ac>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d1f0      	bne.n	8001c3c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	69da      	ldr	r2, [r3, #28]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6a1b      	ldr	r3, [r3, #32]
 8001c62:	431a      	orrs	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c68:	019b      	lsls	r3, r3, #6
 8001c6a:	431a      	orrs	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c70:	085b      	lsrs	r3, r3, #1
 8001c72:	3b01      	subs	r3, #1
 8001c74:	041b      	lsls	r3, r3, #16
 8001c76:	431a      	orrs	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c7c:	061b      	lsls	r3, r3, #24
 8001c7e:	431a      	orrs	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c84:	071b      	lsls	r3, r3, #28
 8001c86:	491b      	ldr	r1, [pc, #108]	; (8001cf4 <HAL_RCC_OscConfig+0x4ac>)
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c8c:	4b1b      	ldr	r3, [pc, #108]	; (8001cfc <HAL_RCC_OscConfig+0x4b4>)
 8001c8e:	2201      	movs	r2, #1
 8001c90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c92:	f7fe ff6b 	bl	8000b6c <HAL_GetTick>
 8001c96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c98:	e008      	b.n	8001cac <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c9a:	f7fe ff67 	bl	8000b6c <HAL_GetTick>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d901      	bls.n	8001cac <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e064      	b.n	8001d76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cac:	4b11      	ldr	r3, [pc, #68]	; (8001cf4 <HAL_RCC_OscConfig+0x4ac>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d0f0      	beq.n	8001c9a <HAL_RCC_OscConfig+0x452>
 8001cb8:	e05c      	b.n	8001d74 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cba:	4b10      	ldr	r3, [pc, #64]	; (8001cfc <HAL_RCC_OscConfig+0x4b4>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc0:	f7fe ff54 	bl	8000b6c <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cc8:	f7fe ff50 	bl	8000b6c <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e04d      	b.n	8001d76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cda:	4b06      	ldr	r3, [pc, #24]	; (8001cf4 <HAL_RCC_OscConfig+0x4ac>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d1f0      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x480>
 8001ce6:	e045      	b.n	8001d74 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	699b      	ldr	r3, [r3, #24]
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d107      	bne.n	8001d00 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e040      	b.n	8001d76 <HAL_RCC_OscConfig+0x52e>
 8001cf4:	40023800 	.word	0x40023800
 8001cf8:	40007000 	.word	0x40007000
 8001cfc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d00:	4b1f      	ldr	r3, [pc, #124]	; (8001d80 <HAL_RCC_OscConfig+0x538>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	699b      	ldr	r3, [r3, #24]
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d030      	beq.n	8001d70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d129      	bne.n	8001d70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d122      	bne.n	8001d70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d2a:	68fa      	ldr	r2, [r7, #12]
 8001d2c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d30:	4013      	ands	r3, r2
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d36:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d119      	bne.n	8001d70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d46:	085b      	lsrs	r3, r3, #1
 8001d48:	3b01      	subs	r3, #1
 8001d4a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d10f      	bne.n	8001d70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d5a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d107      	bne.n	8001d70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d001      	beq.n	8001d74 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e000      	b.n	8001d76 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3718      	adds	r7, #24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40023800 	.word	0x40023800

08001d84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d101      	bne.n	8001d96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e041      	b.n	8001e1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d106      	bne.n	8001db0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 f839 	bl	8001e22 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2202      	movs	r2, #2
 8001db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	3304      	adds	r3, #4
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4610      	mov	r0, r2
 8001dc4:	f000 f9c0 	bl	8002148 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e22:	b480      	push	{r7}
 8001e24:	b083      	sub	sp, #12
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
	...

08001e38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d001      	beq.n	8001e50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e04e      	b.n	8001eee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2202      	movs	r2, #2
 8001e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	68da      	ldr	r2, [r3, #12]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f042 0201 	orr.w	r2, r2, #1
 8001e66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a23      	ldr	r2, [pc, #140]	; (8001efc <HAL_TIM_Base_Start_IT+0xc4>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d022      	beq.n	8001eb8 <HAL_TIM_Base_Start_IT+0x80>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e7a:	d01d      	beq.n	8001eb8 <HAL_TIM_Base_Start_IT+0x80>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a1f      	ldr	r2, [pc, #124]	; (8001f00 <HAL_TIM_Base_Start_IT+0xc8>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d018      	beq.n	8001eb8 <HAL_TIM_Base_Start_IT+0x80>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a1e      	ldr	r2, [pc, #120]	; (8001f04 <HAL_TIM_Base_Start_IT+0xcc>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d013      	beq.n	8001eb8 <HAL_TIM_Base_Start_IT+0x80>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a1c      	ldr	r2, [pc, #112]	; (8001f08 <HAL_TIM_Base_Start_IT+0xd0>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d00e      	beq.n	8001eb8 <HAL_TIM_Base_Start_IT+0x80>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a1b      	ldr	r2, [pc, #108]	; (8001f0c <HAL_TIM_Base_Start_IT+0xd4>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d009      	beq.n	8001eb8 <HAL_TIM_Base_Start_IT+0x80>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a19      	ldr	r2, [pc, #100]	; (8001f10 <HAL_TIM_Base_Start_IT+0xd8>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d004      	beq.n	8001eb8 <HAL_TIM_Base_Start_IT+0x80>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a18      	ldr	r2, [pc, #96]	; (8001f14 <HAL_TIM_Base_Start_IT+0xdc>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d111      	bne.n	8001edc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f003 0307 	and.w	r3, r3, #7
 8001ec2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2b06      	cmp	r3, #6
 8001ec8:	d010      	beq.n	8001eec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f042 0201 	orr.w	r2, r2, #1
 8001ed8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eda:	e007      	b.n	8001eec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f042 0201 	orr.w	r2, r2, #1
 8001eea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3714      	adds	r7, #20
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	40010000 	.word	0x40010000
 8001f00:	40000400 	.word	0x40000400
 8001f04:	40000800 	.word	0x40000800
 8001f08:	40000c00 	.word	0x40000c00
 8001f0c:	40010400 	.word	0x40010400
 8001f10:	40014000 	.word	0x40014000
 8001f14:	40001800 	.word	0x40001800

08001f18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d020      	beq.n	8001f7c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	f003 0302 	and.w	r3, r3, #2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d01b      	beq.n	8001f7c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f06f 0202 	mvn.w	r2, #2
 8001f4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2201      	movs	r2, #1
 8001f52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	699b      	ldr	r3, [r3, #24]
 8001f5a:	f003 0303 	and.w	r3, r3, #3
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d003      	beq.n	8001f6a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 f8d2 	bl	800210c <HAL_TIM_IC_CaptureCallback>
 8001f68:	e005      	b.n	8001f76 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 f8c4 	bl	80020f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f000 f8d5 	bl	8002120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	f003 0304 	and.w	r3, r3, #4
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d020      	beq.n	8001fc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f003 0304 	and.w	r3, r3, #4
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d01b      	beq.n	8001fc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f06f 0204 	mvn.w	r2, #4
 8001f98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2202      	movs	r2, #2
 8001f9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d003      	beq.n	8001fb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 f8ac 	bl	800210c <HAL_TIM_IC_CaptureCallback>
 8001fb4:	e005      	b.n	8001fc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 f89e 	bl	80020f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f000 f8af 	bl	8002120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	f003 0308 	and.w	r3, r3, #8
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d020      	beq.n	8002014 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f003 0308 	and.w	r3, r3, #8
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d01b      	beq.n	8002014 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f06f 0208 	mvn.w	r2, #8
 8001fe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2204      	movs	r2, #4
 8001fea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	69db      	ldr	r3, [r3, #28]
 8001ff2:	f003 0303 	and.w	r3, r3, #3
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d003      	beq.n	8002002 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f000 f886 	bl	800210c <HAL_TIM_IC_CaptureCallback>
 8002000:	e005      	b.n	800200e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 f878 	bl	80020f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f000 f889 	bl	8002120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	f003 0310 	and.w	r3, r3, #16
 800201a:	2b00      	cmp	r3, #0
 800201c:	d020      	beq.n	8002060 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	f003 0310 	and.w	r3, r3, #16
 8002024:	2b00      	cmp	r3, #0
 8002026:	d01b      	beq.n	8002060 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f06f 0210 	mvn.w	r2, #16
 8002030:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2208      	movs	r2, #8
 8002036:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	69db      	ldr	r3, [r3, #28]
 800203e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002042:	2b00      	cmp	r3, #0
 8002044:	d003      	beq.n	800204e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f000 f860 	bl	800210c <HAL_TIM_IC_CaptureCallback>
 800204c:	e005      	b.n	800205a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f000 f852 	bl	80020f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f000 f863 	bl	8002120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	2b00      	cmp	r3, #0
 8002068:	d00c      	beq.n	8002084 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	f003 0301 	and.w	r3, r3, #1
 8002070:	2b00      	cmp	r3, #0
 8002072:	d007      	beq.n	8002084 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f06f 0201 	mvn.w	r2, #1
 800207c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f7fe fc26 	bl	80008d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800208a:	2b00      	cmp	r3, #0
 800208c:	d00c      	beq.n	80020a8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002094:	2b00      	cmp	r3, #0
 8002096:	d007      	beq.n	80020a8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80020a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f000 f906 	bl	80022b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d00c      	beq.n	80020cc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d007      	beq.n	80020cc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80020c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 f834 	bl	8002134 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	f003 0320 	and.w	r3, r3, #32
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d00c      	beq.n	80020f0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f003 0320 	and.w	r3, r3, #32
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d007      	beq.n	80020f0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f06f 0220 	mvn.w	r2, #32
 80020e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f000 f8d8 	bl	80022a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020f0:	bf00      	nop
 80020f2:	3710      	adds	r7, #16
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4a46      	ldr	r2, [pc, #280]	; (8002274 <TIM_Base_SetConfig+0x12c>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d013      	beq.n	8002188 <TIM_Base_SetConfig+0x40>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002166:	d00f      	beq.n	8002188 <TIM_Base_SetConfig+0x40>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4a43      	ldr	r2, [pc, #268]	; (8002278 <TIM_Base_SetConfig+0x130>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d00b      	beq.n	8002188 <TIM_Base_SetConfig+0x40>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a42      	ldr	r2, [pc, #264]	; (800227c <TIM_Base_SetConfig+0x134>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d007      	beq.n	8002188 <TIM_Base_SetConfig+0x40>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a41      	ldr	r2, [pc, #260]	; (8002280 <TIM_Base_SetConfig+0x138>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d003      	beq.n	8002188 <TIM_Base_SetConfig+0x40>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a40      	ldr	r2, [pc, #256]	; (8002284 <TIM_Base_SetConfig+0x13c>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d108      	bne.n	800219a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800218e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	68fa      	ldr	r2, [r7, #12]
 8002196:	4313      	orrs	r3, r2
 8002198:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a35      	ldr	r2, [pc, #212]	; (8002274 <TIM_Base_SetConfig+0x12c>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d02b      	beq.n	80021fa <TIM_Base_SetConfig+0xb2>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021a8:	d027      	beq.n	80021fa <TIM_Base_SetConfig+0xb2>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a32      	ldr	r2, [pc, #200]	; (8002278 <TIM_Base_SetConfig+0x130>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d023      	beq.n	80021fa <TIM_Base_SetConfig+0xb2>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a31      	ldr	r2, [pc, #196]	; (800227c <TIM_Base_SetConfig+0x134>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d01f      	beq.n	80021fa <TIM_Base_SetConfig+0xb2>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a30      	ldr	r2, [pc, #192]	; (8002280 <TIM_Base_SetConfig+0x138>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d01b      	beq.n	80021fa <TIM_Base_SetConfig+0xb2>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a2f      	ldr	r2, [pc, #188]	; (8002284 <TIM_Base_SetConfig+0x13c>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d017      	beq.n	80021fa <TIM_Base_SetConfig+0xb2>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a2e      	ldr	r2, [pc, #184]	; (8002288 <TIM_Base_SetConfig+0x140>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d013      	beq.n	80021fa <TIM_Base_SetConfig+0xb2>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a2d      	ldr	r2, [pc, #180]	; (800228c <TIM_Base_SetConfig+0x144>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d00f      	beq.n	80021fa <TIM_Base_SetConfig+0xb2>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a2c      	ldr	r2, [pc, #176]	; (8002290 <TIM_Base_SetConfig+0x148>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d00b      	beq.n	80021fa <TIM_Base_SetConfig+0xb2>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a2b      	ldr	r2, [pc, #172]	; (8002294 <TIM_Base_SetConfig+0x14c>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d007      	beq.n	80021fa <TIM_Base_SetConfig+0xb2>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a2a      	ldr	r2, [pc, #168]	; (8002298 <TIM_Base_SetConfig+0x150>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d003      	beq.n	80021fa <TIM_Base_SetConfig+0xb2>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a29      	ldr	r2, [pc, #164]	; (800229c <TIM_Base_SetConfig+0x154>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d108      	bne.n	800220c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002200:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	4313      	orrs	r3, r2
 800220a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	4313      	orrs	r3, r2
 8002218:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	68fa      	ldr	r2, [r7, #12]
 800221e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	689a      	ldr	r2, [r3, #8]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	4a10      	ldr	r2, [pc, #64]	; (8002274 <TIM_Base_SetConfig+0x12c>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d003      	beq.n	8002240 <TIM_Base_SetConfig+0xf8>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4a12      	ldr	r2, [pc, #72]	; (8002284 <TIM_Base_SetConfig+0x13c>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d103      	bne.n	8002248 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	691a      	ldr	r2, [r3, #16]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	2b01      	cmp	r3, #1
 8002258:	d105      	bne.n	8002266 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	f023 0201 	bic.w	r2, r3, #1
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	611a      	str	r2, [r3, #16]
  }
}
 8002266:	bf00      	nop
 8002268:	3714      	adds	r7, #20
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	40010000 	.word	0x40010000
 8002278:	40000400 	.word	0x40000400
 800227c:	40000800 	.word	0x40000800
 8002280:	40000c00 	.word	0x40000c00
 8002284:	40010400 	.word	0x40010400
 8002288:	40014000 	.word	0x40014000
 800228c:	40014400 	.word	0x40014400
 8002290:	40014800 	.word	0x40014800
 8002294:	40001800 	.word	0x40001800
 8002298:	40001c00 	.word	0x40001c00
 800229c:	40002000 	.word	0x40002000

080022a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80022a8:	bf00      	nop
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022bc:	bf00      	nop
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f103 0208 	add.w	r2, r3, #8
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f04f 32ff 	mov.w	r2, #4294967295
 80022e0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f103 0208 	add.w	r2, r3, #8
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f103 0208 	add.w	r2, r3, #8
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80022fc:	bf00      	nop
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002316:	bf00      	nop
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr

08002322 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002322:	b480      	push	{r7}
 8002324:	b085      	sub	sp, #20
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
 800232a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002338:	d103      	bne.n	8002342 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	60fb      	str	r3, [r7, #12]
 8002340:	e00c      	b.n	800235c <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	3308      	adds	r3, #8
 8002346:	60fb      	str	r3, [r7, #12]
 8002348:	e002      	b.n	8002350 <vListInsert+0x2e>
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	60fb      	str	r3, [r7, #12]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68ba      	ldr	r2, [r7, #8]
 8002358:	429a      	cmp	r2, r3
 800235a:	d2f6      	bcs.n	800234a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	685a      	ldr	r2, [r3, #4]
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	683a      	ldr	r2, [r7, #0]
 800236a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	683a      	ldr	r2, [r7, #0]
 8002376:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	1c5a      	adds	r2, r3, #1
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	601a      	str	r2, [r3, #0]
}
 8002388:	bf00      	nop
 800238a:	3714      	adds	r7, #20
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002394:	b480      	push	{r7}
 8002396:	b085      	sub	sp, #20
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	691b      	ldr	r3, [r3, #16]
 80023a0:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	6892      	ldr	r2, [r2, #8]
 80023aa:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	6852      	ldr	r2, [r2, #4]
 80023b4:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d103      	bne.n	80023c8 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	689a      	ldr	r2, [r3, #8]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	1e5a      	subs	r2, r3, #1
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3714      	adds	r7, #20
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b086      	sub	sp, #24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80023f2:	2301      	movs	r3, #1
 80023f4:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d10a      	bne.n	8002416 <xQueueGenericReset+0x2e>
        __asm volatile
 8002400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002404:	f383 8811 	msr	BASEPRI, r3
 8002408:	f3bf 8f6f 	isb	sy
 800240c:	f3bf 8f4f 	dsb	sy
 8002410:	60fb      	str	r3, [r7, #12]
    }
 8002412:	bf00      	nop
 8002414:	e7fe      	b.n	8002414 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d05d      	beq.n	80024d8 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8002420:	2b00      	cmp	r3, #0
 8002422:	d059      	beq.n	80024d8 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800242c:	2100      	movs	r1, #0
 800242e:	fba3 2302 	umull	r2, r3, r3, r2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d000      	beq.n	8002438 <xQueueGenericReset+0x50>
 8002436:	2101      	movs	r1, #1
 8002438:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800243a:	2b00      	cmp	r3, #0
 800243c:	d14c      	bne.n	80024d8 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 800243e:	f001 ff71 	bl	8004324 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800244a:	6939      	ldr	r1, [r7, #16]
 800244c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800244e:	fb01 f303 	mul.w	r3, r1, r3
 8002452:	441a      	add	r2, r3
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	2200      	movs	r2, #0
 800245c:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800246e:	3b01      	subs	r3, #1
 8002470:	6939      	ldr	r1, [r7, #16]
 8002472:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002474:	fb01 f303 	mul.w	r3, r1, r3
 8002478:	441a      	add	r2, r3
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	22ff      	movs	r2, #255	; 0xff
 8002482:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	22ff      	movs	r2, #255	; 0xff
 800248a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d114      	bne.n	80024be <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d01a      	beq.n	80024d2 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	3310      	adds	r3, #16
 80024a0:	4618      	mov	r0, r3
 80024a2:	f001 f85d 	bl	8003560 <xTaskRemoveFromEventList>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d012      	beq.n	80024d2 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80024ac:	4b15      	ldr	r3, [pc, #84]	; (8002504 <xQueueGenericReset+0x11c>)
 80024ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	f3bf 8f4f 	dsb	sy
 80024b8:	f3bf 8f6f 	isb	sy
 80024bc:	e009      	b.n	80024d2 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	3310      	adds	r3, #16
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7ff ff00 	bl	80022c8 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	3324      	adds	r3, #36	; 0x24
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7ff fefb 	bl	80022c8 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80024d2:	f001 ff57 	bl	8004384 <vPortExitCritical>
 80024d6:	e001      	b.n	80024dc <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 80024d8:	2300      	movs	r3, #0
 80024da:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d10a      	bne.n	80024f8 <xQueueGenericReset+0x110>
        __asm volatile
 80024e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024e6:	f383 8811 	msr	BASEPRI, r3
 80024ea:	f3bf 8f6f 	isb	sy
 80024ee:	f3bf 8f4f 	dsb	sy
 80024f2:	60bb      	str	r3, [r7, #8]
    }
 80024f4:	bf00      	nop
 80024f6:	e7fe      	b.n	80024f6 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80024f8:	697b      	ldr	r3, [r7, #20]
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3718      	adds	r7, #24
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	e000ed04 	.word	0xe000ed04

08002508 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002508:	b580      	push	{r7, lr}
 800250a:	b08a      	sub	sp, #40	; 0x28
 800250c:	af02      	add	r7, sp, #8
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	60b9      	str	r1, [r7, #8]
 8002512:	4613      	mov	r3, r2
 8002514:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002516:	2300      	movs	r3, #0
 8002518:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d02e      	beq.n	800257e <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002520:	2100      	movs	r1, #0
 8002522:	68ba      	ldr	r2, [r7, #8]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	fba3 2302 	umull	r2, r3, r3, r2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d000      	beq.n	8002530 <xQueueGenericCreate+0x28>
 800252e:	2101      	movs	r1, #1
 8002530:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002532:	2b00      	cmp	r3, #0
 8002534:	d123      	bne.n	800257e <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	68ba      	ldr	r2, [r7, #8]
 800253a:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800253e:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002542:	d81c      	bhi.n	800257e <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	68ba      	ldr	r2, [r7, #8]
 8002548:	fb02 f303 	mul.w	r3, r2, r3
 800254c:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	3350      	adds	r3, #80	; 0x50
 8002552:	4618      	mov	r0, r3
 8002554:	f002 f812 	bl	800457c <pvPortMalloc>
 8002558:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d01c      	beq.n	800259a <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	3350      	adds	r3, #80	; 0x50
 8002568:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800256a:	79fa      	ldrb	r2, [r7, #7]
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	9300      	str	r3, [sp, #0]
 8002570:	4613      	mov	r3, r2
 8002572:	697a      	ldr	r2, [r7, #20]
 8002574:	68b9      	ldr	r1, [r7, #8]
 8002576:	68f8      	ldr	r0, [r7, #12]
 8002578:	f000 f814 	bl	80025a4 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800257c:	e00d      	b.n	800259a <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d10a      	bne.n	800259a <xQueueGenericCreate+0x92>
        __asm volatile
 8002584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002588:	f383 8811 	msr	BASEPRI, r3
 800258c:	f3bf 8f6f 	isb	sy
 8002590:	f3bf 8f4f 	dsb	sy
 8002594:	613b      	str	r3, [r7, #16]
    }
 8002596:	bf00      	nop
 8002598:	e7fe      	b.n	8002598 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800259a:	69fb      	ldr	r3, [r7, #28]
    }
 800259c:	4618      	mov	r0, r3
 800259e:	3720      	adds	r7, #32
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	607a      	str	r2, [r7, #4]
 80025b0:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d103      	bne.n	80025c0 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	601a      	str	r2, [r3, #0]
 80025be:	e002      	b.n	80025c6 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	68ba      	ldr	r2, [r7, #8]
 80025d0:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80025d2:	2101      	movs	r1, #1
 80025d4:	69b8      	ldr	r0, [r7, #24]
 80025d6:	f7ff ff07 	bl	80023e8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	78fa      	ldrb	r2, [r7, #3]
 80025de:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80025e2:	78fb      	ldrb	r3, [r7, #3]
 80025e4:	68ba      	ldr	r2, [r7, #8]
 80025e6:	68f9      	ldr	r1, [r7, #12]
 80025e8:	2073      	movs	r0, #115	; 0x73
 80025ea:	f003 fb21 	bl	8005c30 <SEGGER_SYSVIEW_RecordU32x3>
}
 80025ee:	bf00      	nop
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
	...

080025f8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80025f8:	b590      	push	{r4, r7, lr}
 80025fa:	b08f      	sub	sp, #60	; 0x3c
 80025fc:	af02      	add	r7, sp, #8
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002604:	2300      	movs	r3, #0
 8002606:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800260c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800260e:	2b00      	cmp	r3, #0
 8002610:	d10a      	bne.n	8002628 <xQueueReceive+0x30>
        __asm volatile
 8002612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002616:	f383 8811 	msr	BASEPRI, r3
 800261a:	f3bf 8f6f 	isb	sy
 800261e:	f3bf 8f4f 	dsb	sy
 8002622:	623b      	str	r3, [r7, #32]
    }
 8002624:	bf00      	nop
 8002626:	e7fe      	b.n	8002626 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d103      	bne.n	8002636 <xQueueReceive+0x3e>
 800262e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002632:	2b00      	cmp	r3, #0
 8002634:	d101      	bne.n	800263a <xQueueReceive+0x42>
 8002636:	2301      	movs	r3, #1
 8002638:	e000      	b.n	800263c <xQueueReceive+0x44>
 800263a:	2300      	movs	r3, #0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d10a      	bne.n	8002656 <xQueueReceive+0x5e>
        __asm volatile
 8002640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002644:	f383 8811 	msr	BASEPRI, r3
 8002648:	f3bf 8f6f 	isb	sy
 800264c:	f3bf 8f4f 	dsb	sy
 8002650:	61fb      	str	r3, [r7, #28]
    }
 8002652:	bf00      	nop
 8002654:	e7fe      	b.n	8002654 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002656:	f001 f995 	bl	8003984 <xTaskGetSchedulerState>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d102      	bne.n	8002666 <xQueueReceive+0x6e>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <xQueueReceive+0x72>
 8002666:	2301      	movs	r3, #1
 8002668:	e000      	b.n	800266c <xQueueReceive+0x74>
 800266a:	2300      	movs	r3, #0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d10a      	bne.n	8002686 <xQueueReceive+0x8e>
        __asm volatile
 8002670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002674:	f383 8811 	msr	BASEPRI, r3
 8002678:	f3bf 8f6f 	isb	sy
 800267c:	f3bf 8f4f 	dsb	sy
 8002680:	61bb      	str	r3, [r7, #24]
    }
 8002682:	bf00      	nop
 8002684:	e7fe      	b.n	8002684 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002686:	f001 fe4d 	bl	8004324 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800268a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800268c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800268e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002692:	2b00      	cmp	r3, #0
 8002694:	d02f      	beq.n	80026f6 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002696:	68b9      	ldr	r1, [r7, #8]
 8002698:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800269a:	f000 f8bd 	bl	8002818 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 800269e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a0:	4618      	mov	r0, r3
 80026a2:	f003 fff3 	bl	800668c <SEGGER_SYSVIEW_ShrinkId>
 80026a6:	4604      	mov	r4, r0
 80026a8:	2000      	movs	r0, #0
 80026aa:	f003 ffef 	bl	800668c <SEGGER_SYSVIEW_ShrinkId>
 80026ae:	4602      	mov	r2, r0
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2101      	movs	r1, #1
 80026b4:	9100      	str	r1, [sp, #0]
 80026b6:	4621      	mov	r1, r4
 80026b8:	205c      	movs	r0, #92	; 0x5c
 80026ba:	f003 fb2f 	bl	8005d1c <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80026be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c0:	1e5a      	subs	r2, r3, #1
 80026c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026c4:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80026c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d00f      	beq.n	80026ee <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80026ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d0:	3310      	adds	r3, #16
 80026d2:	4618      	mov	r0, r3
 80026d4:	f000 ff44 	bl	8003560 <xTaskRemoveFromEventList>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d007      	beq.n	80026ee <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80026de:	4b4d      	ldr	r3, [pc, #308]	; (8002814 <xQueueReceive+0x21c>)
 80026e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026e4:	601a      	str	r2, [r3, #0]
 80026e6:	f3bf 8f4f 	dsb	sy
 80026ea:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80026ee:	f001 fe49 	bl	8004384 <vPortExitCritical>
                return pdPASS;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e08a      	b.n	800280c <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d113      	bne.n	8002724 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80026fc:	f001 fe42 	bl	8004384 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002702:	4618      	mov	r0, r3
 8002704:	f003 ffc2 	bl	800668c <SEGGER_SYSVIEW_ShrinkId>
 8002708:	4604      	mov	r4, r0
 800270a:	2000      	movs	r0, #0
 800270c:	f003 ffbe 	bl	800668c <SEGGER_SYSVIEW_ShrinkId>
 8002710:	4602      	mov	r2, r0
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2101      	movs	r1, #1
 8002716:	9100      	str	r1, [sp, #0]
 8002718:	4621      	mov	r1, r4
 800271a:	205c      	movs	r0, #92	; 0x5c
 800271c:	f003 fafe 	bl	8005d1c <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002720:	2300      	movs	r3, #0
 8002722:	e073      	b.n	800280c <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002726:	2b00      	cmp	r3, #0
 8002728:	d106      	bne.n	8002738 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800272a:	f107 0310 	add.w	r3, r7, #16
 800272e:	4618      	mov	r0, r3
 8002730:	f000 ffee 	bl	8003710 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002734:	2301      	movs	r3, #1
 8002736:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002738:	f001 fe24 	bl	8004384 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800273c:	f000 fbf0 	bl	8002f20 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002740:	f001 fdf0 	bl	8004324 <vPortEnterCritical>
 8002744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002746:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800274a:	b25b      	sxtb	r3, r3
 800274c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002750:	d103      	bne.n	800275a <xQueueReceive+0x162>
 8002752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002754:	2200      	movs	r2, #0
 8002756:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800275a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800275c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002760:	b25b      	sxtb	r3, r3
 8002762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002766:	d103      	bne.n	8002770 <xQueueReceive+0x178>
 8002768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800276a:	2200      	movs	r2, #0
 800276c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002770:	f001 fe08 	bl	8004384 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002774:	1d3a      	adds	r2, r7, #4
 8002776:	f107 0310 	add.w	r3, r7, #16
 800277a:	4611      	mov	r1, r2
 800277c:	4618      	mov	r0, r3
 800277e:	f000 ffdd 	bl	800373c <xTaskCheckForTimeOut>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d124      	bne.n	80027d2 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002788:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800278a:	f000 f8bd 	bl	8002908 <prvIsQueueEmpty>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d018      	beq.n	80027c6 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002796:	3324      	adds	r3, #36	; 0x24
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	4611      	mov	r1, r2
 800279c:	4618      	mov	r0, r3
 800279e:	f000 fe73 	bl	8003488 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80027a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80027a4:	f000 f85e 	bl	8002864 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80027a8:	f000 fbc8 	bl	8002f3c <xTaskResumeAll>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	f47f af69 	bne.w	8002686 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80027b4:	4b17      	ldr	r3, [pc, #92]	; (8002814 <xQueueReceive+0x21c>)
 80027b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027ba:	601a      	str	r2, [r3, #0]
 80027bc:	f3bf 8f4f 	dsb	sy
 80027c0:	f3bf 8f6f 	isb	sy
 80027c4:	e75f      	b.n	8002686 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80027c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80027c8:	f000 f84c 	bl	8002864 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80027cc:	f000 fbb6 	bl	8002f3c <xTaskResumeAll>
 80027d0:	e759      	b.n	8002686 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80027d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80027d4:	f000 f846 	bl	8002864 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80027d8:	f000 fbb0 	bl	8002f3c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80027dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80027de:	f000 f893 	bl	8002908 <prvIsQueueEmpty>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f43f af4e 	beq.w	8002686 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 80027ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ec:	4618      	mov	r0, r3
 80027ee:	f003 ff4d 	bl	800668c <SEGGER_SYSVIEW_ShrinkId>
 80027f2:	4604      	mov	r4, r0
 80027f4:	2000      	movs	r0, #0
 80027f6:	f003 ff49 	bl	800668c <SEGGER_SYSVIEW_ShrinkId>
 80027fa:	4602      	mov	r2, r0
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2101      	movs	r1, #1
 8002800:	9100      	str	r1, [sp, #0]
 8002802:	4621      	mov	r1, r4
 8002804:	205c      	movs	r0, #92	; 0x5c
 8002806:	f003 fa89 	bl	8005d1c <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 800280a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800280c:	4618      	mov	r0, r3
 800280e:	3734      	adds	r7, #52	; 0x34
 8002810:	46bd      	mov	sp, r7
 8002812:	bd90      	pop	{r4, r7, pc}
 8002814:	e000ed04 	.word	0xe000ed04

08002818 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	2b00      	cmp	r3, #0
 8002828:	d018      	beq.n	800285c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	68da      	ldr	r2, [r3, #12]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002832:	441a      	add	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	68da      	ldr	r2, [r3, #12]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	429a      	cmp	r2, r3
 8002842:	d303      	bcc.n	800284c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	68d9      	ldr	r1, [r3, #12]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002854:	461a      	mov	r2, r3
 8002856:	6838      	ldr	r0, [r7, #0]
 8002858:	f004 f8ca 	bl	80069f0 <memcpy>
    }
}
 800285c:	bf00      	nop
 800285e:	3708      	adds	r7, #8
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800286c:	f001 fd5a 	bl	8004324 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002876:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002878:	e011      	b.n	800289e <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287e:	2b00      	cmp	r3, #0
 8002880:	d012      	beq.n	80028a8 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	3324      	adds	r3, #36	; 0x24
 8002886:	4618      	mov	r0, r3
 8002888:	f000 fe6a 	bl	8003560 <xTaskRemoveFromEventList>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8002892:	f000 ffb9 	bl	8003808 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002896:	7bfb      	ldrb	r3, [r7, #15]
 8002898:	3b01      	subs	r3, #1
 800289a:	b2db      	uxtb	r3, r3
 800289c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800289e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	dce9      	bgt.n	800287a <prvUnlockQueue+0x16>
 80028a6:	e000      	b.n	80028aa <prvUnlockQueue+0x46>
                    break;
 80028a8:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	22ff      	movs	r2, #255	; 0xff
 80028ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80028b2:	f001 fd67 	bl	8004384 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80028b6:	f001 fd35 	bl	8004324 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80028c0:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80028c2:	e011      	b.n	80028e8 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d012      	beq.n	80028f2 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	3310      	adds	r3, #16
 80028d0:	4618      	mov	r0, r3
 80028d2:	f000 fe45 	bl	8003560 <xTaskRemoveFromEventList>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80028dc:	f000 ff94 	bl	8003808 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80028e0:	7bbb      	ldrb	r3, [r7, #14]
 80028e2:	3b01      	subs	r3, #1
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80028e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	dce9      	bgt.n	80028c4 <prvUnlockQueue+0x60>
 80028f0:	e000      	b.n	80028f4 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80028f2:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	22ff      	movs	r2, #255	; 0xff
 80028f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80028fc:	f001 fd42 	bl	8004384 <vPortExitCritical>
}
 8002900:	bf00      	nop
 8002902:	3710      	adds	r7, #16
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002910:	f001 fd08 	bl	8004324 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002918:	2b00      	cmp	r3, #0
 800291a:	d102      	bne.n	8002922 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800291c:	2301      	movs	r3, #1
 800291e:	60fb      	str	r3, [r7, #12]
 8002920:	e001      	b.n	8002926 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002922:	2300      	movs	r3, #0
 8002924:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002926:	f001 fd2d 	bl	8004384 <vPortExitCritical>

    return xReturn;
 800292a:	68fb      	ldr	r3, [r7, #12]
}
 800292c:	4618      	mov	r0, r3
 800292e:	3710      	adds	r7, #16
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002934:	b580      	push	{r7, lr}
 8002936:	b086      	sub	sp, #24
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800293e:	2300      	movs	r3, #0
 8002940:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d10a      	bne.n	800295e <vQueueAddToRegistry+0x2a>
        __asm volatile
 8002948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800294c:	f383 8811 	msr	BASEPRI, r3
 8002950:	f3bf 8f6f 	isb	sy
 8002954:	f3bf 8f4f 	dsb	sy
 8002958:	60fb      	str	r3, [r7, #12]
    }
 800295a:	bf00      	nop
 800295c:	e7fe      	b.n	800295c <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d024      	beq.n	80029ae <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002964:	2300      	movs	r3, #0
 8002966:	617b      	str	r3, [r7, #20]
 8002968:	e01e      	b.n	80029a8 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800296a:	4a1c      	ldr	r2, [pc, #112]	; (80029dc <vQueueAddToRegistry+0xa8>)
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	4413      	add	r3, r2
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	429a      	cmp	r2, r3
 8002978:	d105      	bne.n	8002986 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	00db      	lsls	r3, r3, #3
 800297e:	4a17      	ldr	r2, [pc, #92]	; (80029dc <vQueueAddToRegistry+0xa8>)
 8002980:	4413      	add	r3, r2
 8002982:	613b      	str	r3, [r7, #16]
                    break;
 8002984:	e013      	b.n	80029ae <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d10a      	bne.n	80029a2 <vQueueAddToRegistry+0x6e>
 800298c:	4a13      	ldr	r2, [pc, #76]	; (80029dc <vQueueAddToRegistry+0xa8>)
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d104      	bne.n	80029a2 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	00db      	lsls	r3, r3, #3
 800299c:	4a0f      	ldr	r2, [pc, #60]	; (80029dc <vQueueAddToRegistry+0xa8>)
 800299e:	4413      	add	r3, r2
 80029a0:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	3301      	adds	r3, #1
 80029a6:	617b      	str	r3, [r7, #20]
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	2b07      	cmp	r3, #7
 80029ac:	d9dd      	bls.n	800296a <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d00f      	beq.n	80029d4 <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	683a      	ldr	r2, [r7, #0]
 80029b8:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f003 fe62 	bl	800668c <SEGGER_SYSVIEW_ShrinkId>
 80029c8:	4601      	mov	r1, r0
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	461a      	mov	r2, r3
 80029ce:	2071      	movs	r0, #113	; 0x71
 80029d0:	f003 f8d4 	bl	8005b7c <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 80029d4:	bf00      	nop
 80029d6:	3718      	adds	r7, #24
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	20000084 	.word	0x20000084

080029e0 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b086      	sub	sp, #24
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80029f0:	f001 fc98 	bl	8004324 <vPortEnterCritical>
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80029fa:	b25b      	sxtb	r3, r3
 80029fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a00:	d103      	bne.n	8002a0a <vQueueWaitForMessageRestricted+0x2a>
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a10:	b25b      	sxtb	r3, r3
 8002a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a16:	d103      	bne.n	8002a20 <vQueueWaitForMessageRestricted+0x40>
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a20:	f001 fcb0 	bl	8004384 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d106      	bne.n	8002a3a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	3324      	adds	r3, #36	; 0x24
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	68b9      	ldr	r1, [r7, #8]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f000 fd4b 	bl	80034d0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002a3a:	6978      	ldr	r0, [r7, #20]
 8002a3c:	f7ff ff12 	bl	8002864 <prvUnlockQueue>
    }
 8002a40:	bf00      	nop
 8002a42:	3718      	adds	r7, #24
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b08c      	sub	sp, #48	; 0x30
 8002a4c:	af04      	add	r7, sp, #16
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	603b      	str	r3, [r7, #0]
 8002a54:	4613      	mov	r3, r2
 8002a56:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002a58:	88fb      	ldrh	r3, [r7, #6]
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f001 fd8d 	bl	800457c <pvPortMalloc>
 8002a62:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d013      	beq.n	8002a92 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002a6a:	2060      	movs	r0, #96	; 0x60
 8002a6c:	f001 fd86 	bl	800457c <pvPortMalloc>
 8002a70:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d008      	beq.n	8002a8a <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002a78:	2260      	movs	r2, #96	; 0x60
 8002a7a:	2100      	movs	r1, #0
 8002a7c:	69f8      	ldr	r0, [r7, #28]
 8002a7e:	f003 ff8b 	bl	8006998 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	697a      	ldr	r2, [r7, #20]
 8002a86:	631a      	str	r2, [r3, #48]	; 0x30
 8002a88:	e005      	b.n	8002a96 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002a8a:	6978      	ldr	r0, [r7, #20]
 8002a8c:	f001 fe30 	bl	80046f0 <vPortFree>
 8002a90:	e001      	b.n	8002a96 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002a92:	2300      	movs	r3, #0
 8002a94:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d013      	beq.n	8002ac4 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002a9c:	88fa      	ldrh	r2, [r7, #6]
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	9303      	str	r3, [sp, #12]
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	9302      	str	r3, [sp, #8]
 8002aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aa8:	9301      	str	r3, [sp, #4]
 8002aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aac:	9300      	str	r3, [sp, #0]
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	68b9      	ldr	r1, [r7, #8]
 8002ab2:	68f8      	ldr	r0, [r7, #12]
 8002ab4:	f000 f80e 	bl	8002ad4 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002ab8:	69f8      	ldr	r0, [r7, #28]
 8002aba:	f000 f899 	bl	8002bf0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	61bb      	str	r3, [r7, #24]
 8002ac2:	e002      	b.n	8002aca <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ac8:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002aca:	69bb      	ldr	r3, [r7, #24]
    }
 8002acc:	4618      	mov	r0, r3
 8002ace:	3720      	adds	r7, #32
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b088      	sub	sp, #32
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	607a      	str	r2, [r7, #4]
 8002ae0:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	461a      	mov	r2, r3
 8002aec:	21a5      	movs	r1, #165	; 0xa5
 8002aee:	f003 ff53 	bl	8006998 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002afc:	3b01      	subs	r3, #1
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	4413      	add	r3, r2
 8002b02:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	f023 0307 	bic.w	r3, r3, #7
 8002b0a:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	f003 0307 	and.w	r3, r3, #7
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00a      	beq.n	8002b2c <prvInitialiseNewTask+0x58>
        __asm volatile
 8002b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b1a:	f383 8811 	msr	BASEPRI, r3
 8002b1e:	f3bf 8f6f 	isb	sy
 8002b22:	f3bf 8f4f 	dsb	sy
 8002b26:	617b      	str	r3, [r7, #20]
    }
 8002b28:	bf00      	nop
 8002b2a:	e7fe      	b.n	8002b2a <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d01e      	beq.n	8002b70 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b32:	2300      	movs	r3, #0
 8002b34:	61fb      	str	r3, [r7, #28]
 8002b36:	e012      	b.n	8002b5e <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002b38:	68ba      	ldr	r2, [r7, #8]
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	4413      	add	r3, r2
 8002b3e:	7819      	ldrb	r1, [r3, #0]
 8002b40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	4413      	add	r3, r2
 8002b46:	3334      	adds	r3, #52	; 0x34
 8002b48:	460a      	mov	r2, r1
 8002b4a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002b4c:	68ba      	ldr	r2, [r7, #8]
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	4413      	add	r3, r2
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d006      	beq.n	8002b66 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	61fb      	str	r3, [r7, #28]
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	2b09      	cmp	r3, #9
 8002b62:	d9e9      	bls.n	8002b38 <prvInitialiseNewTask+0x64>
 8002b64:	e000      	b.n	8002b68 <prvInitialiseNewTask+0x94>
            {
                break;
 8002b66:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b72:	2b04      	cmp	r3, #4
 8002b74:	d90a      	bls.n	8002b8c <prvInitialiseNewTask+0xb8>
        __asm volatile
 8002b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b7a:	f383 8811 	msr	BASEPRI, r3
 8002b7e:	f3bf 8f6f 	isb	sy
 8002b82:	f3bf 8f4f 	dsb	sy
 8002b86:	613b      	str	r3, [r7, #16]
    }
 8002b88:	bf00      	nop
 8002b8a:	e7fe      	b.n	8002b8a <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b8e:	2b04      	cmp	r3, #4
 8002b90:	d901      	bls.n	8002b96 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002b92:	2304      	movs	r3, #4
 8002b94:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b9a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ba0:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba4:	3304      	adds	r3, #4
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7ff fbae 	bl	8002308 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bae:	3318      	adds	r3, #24
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7ff fba9 	bl	8002308 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bba:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bbe:	f1c3 0205 	rsb	r2, r3, #5
 8002bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc4:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bca:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002bcc:	683a      	ldr	r2, [r7, #0]
 8002bce:	68f9      	ldr	r1, [r7, #12]
 8002bd0:	69b8      	ldr	r0, [r7, #24]
 8002bd2:	f001 f9f9 	bl	8003fc8 <pxPortInitialiseStack>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bda:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d002      	beq.n	8002be8 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002be4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002be6:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002be8:	bf00      	nop
 8002bea:	3720      	adds	r7, #32
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002bf0:	b5b0      	push	{r4, r5, r7, lr}
 8002bf2:	b086      	sub	sp, #24
 8002bf4:	af02      	add	r7, sp, #8
 8002bf6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002bf8:	f001 fb94 	bl	8004324 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002bfc:	4b4f      	ldr	r3, [pc, #316]	; (8002d3c <prvAddNewTaskToReadyList+0x14c>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	3301      	adds	r3, #1
 8002c02:	4a4e      	ldr	r2, [pc, #312]	; (8002d3c <prvAddNewTaskToReadyList+0x14c>)
 8002c04:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002c06:	4b4e      	ldr	r3, [pc, #312]	; (8002d40 <prvAddNewTaskToReadyList+0x150>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d109      	bne.n	8002c22 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002c0e:	4a4c      	ldr	r2, [pc, #304]	; (8002d40 <prvAddNewTaskToReadyList+0x150>)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002c14:	4b49      	ldr	r3, [pc, #292]	; (8002d3c <prvAddNewTaskToReadyList+0x14c>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d110      	bne.n	8002c3e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002c1c:	f000 fe18 	bl	8003850 <prvInitialiseTaskLists>
 8002c20:	e00d      	b.n	8002c3e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002c22:	4b48      	ldr	r3, [pc, #288]	; (8002d44 <prvAddNewTaskToReadyList+0x154>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d109      	bne.n	8002c3e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002c2a:	4b45      	ldr	r3, [pc, #276]	; (8002d40 <prvAddNewTaskToReadyList+0x150>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d802      	bhi.n	8002c3e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002c38:	4a41      	ldr	r2, [pc, #260]	; (8002d40 <prvAddNewTaskToReadyList+0x150>)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002c3e:	4b42      	ldr	r3, [pc, #264]	; (8002d48 <prvAddNewTaskToReadyList+0x158>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	3301      	adds	r3, #1
 8002c44:	4a40      	ldr	r2, [pc, #256]	; (8002d48 <prvAddNewTaskToReadyList+0x158>)
 8002c46:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002c48:	4b3f      	ldr	r3, [pc, #252]	; (8002d48 <prvAddNewTaskToReadyList+0x158>)
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d016      	beq.n	8002c84 <prvAddNewTaskToReadyList+0x94>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f003 fc51 	bl	8006500 <SEGGER_SYSVIEW_OnTaskCreate>
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6e:	461d      	mov	r5, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	461c      	mov	r4, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7a:	1ae3      	subs	r3, r4, r3
 8002c7c:	9300      	str	r3, [sp, #0]
 8002c7e:	462b      	mov	r3, r5
 8002c80:	f001 fef8 	bl	8004a74 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f003 fcbe 	bl	8006608 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c90:	2201      	movs	r2, #1
 8002c92:	409a      	lsls	r2, r3
 8002c94:	4b2d      	ldr	r3, [pc, #180]	; (8002d4c <prvAddNewTaskToReadyList+0x15c>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	4a2c      	ldr	r2, [pc, #176]	; (8002d4c <prvAddNewTaskToReadyList+0x15c>)
 8002c9c:	6013      	str	r3, [r2, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ca2:	492b      	ldr	r1, [pc, #172]	; (8002d50 <prvAddNewTaskToReadyList+0x160>)
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	4413      	add	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	440b      	add	r3, r1
 8002cae:	3304      	adds	r3, #4
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	60fb      	str	r3, [r7, #12]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	609a      	str	r2, [r3, #8]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	689a      	ldr	r2, [r3, #8]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	60da      	str	r2, [r3, #12]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	3204      	adds	r2, #4
 8002cca:	605a      	str	r2, [r3, #4]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	1d1a      	adds	r2, r3, #4
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	609a      	str	r2, [r3, #8]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cd8:	4613      	mov	r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	4413      	add	r3, r2
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	4a1b      	ldr	r2, [pc, #108]	; (8002d50 <prvAddNewTaskToReadyList+0x160>)
 8002ce2:	441a      	add	r2, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	615a      	str	r2, [r3, #20]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cec:	4918      	ldr	r1, [pc, #96]	; (8002d50 <prvAddNewTaskToReadyList+0x160>)
 8002cee:	4613      	mov	r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	4413      	add	r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	440b      	add	r3, r1
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	1c59      	adds	r1, r3, #1
 8002cfc:	4814      	ldr	r0, [pc, #80]	; (8002d50 <prvAddNewTaskToReadyList+0x160>)
 8002cfe:	4613      	mov	r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	4413      	add	r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	4403      	add	r3, r0
 8002d08:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002d0a:	f001 fb3b 	bl	8004384 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002d0e:	4b0d      	ldr	r3, [pc, #52]	; (8002d44 <prvAddNewTaskToReadyList+0x154>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d00e      	beq.n	8002d34 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002d16:	4b0a      	ldr	r3, [pc, #40]	; (8002d40 <prvAddNewTaskToReadyList+0x150>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d207      	bcs.n	8002d34 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002d24:	4b0b      	ldr	r3, [pc, #44]	; (8002d54 <prvAddNewTaskToReadyList+0x164>)
 8002d26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d2a:	601a      	str	r2, [r3, #0]
 8002d2c:	f3bf 8f4f 	dsb	sy
 8002d30:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002d34:	bf00      	nop
 8002d36:	3710      	adds	r7, #16
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bdb0      	pop	{r4, r5, r7, pc}
 8002d3c:	2000019c 	.word	0x2000019c
 8002d40:	200000c4 	.word	0x200000c4
 8002d44:	200001a8 	.word	0x200001a8
 8002d48:	200001b8 	.word	0x200001b8
 8002d4c:	200001a4 	.word	0x200001a4
 8002d50:	200000c8 	.word	0x200000c8
 8002d54:	e000ed04 	.word	0xe000ed04

08002d58 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b08a      	sub	sp, #40	; 0x28
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8002d62:	2300      	movs	r3, #0
 8002d64:	627b      	str	r3, [r7, #36]	; 0x24

        configASSERT( pxPreviousWakeTime );
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d10a      	bne.n	8002d82 <xTaskDelayUntil+0x2a>
        __asm volatile
 8002d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d70:	f383 8811 	msr	BASEPRI, r3
 8002d74:	f3bf 8f6f 	isb	sy
 8002d78:	f3bf 8f4f 	dsb	sy
 8002d7c:	617b      	str	r3, [r7, #20]
    }
 8002d7e:	bf00      	nop
 8002d80:	e7fe      	b.n	8002d80 <xTaskDelayUntil+0x28>
        configASSERT( ( xTimeIncrement > 0U ) );
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d10a      	bne.n	8002d9e <xTaskDelayUntil+0x46>
        __asm volatile
 8002d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d8c:	f383 8811 	msr	BASEPRI, r3
 8002d90:	f3bf 8f6f 	isb	sy
 8002d94:	f3bf 8f4f 	dsb	sy
 8002d98:	613b      	str	r3, [r7, #16]
    }
 8002d9a:	bf00      	nop
 8002d9c:	e7fe      	b.n	8002d9c <xTaskDelayUntil+0x44>
        configASSERT( uxSchedulerSuspended == 0 );
 8002d9e:	4b2c      	ldr	r3, [pc, #176]	; (8002e50 <xTaskDelayUntil+0xf8>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00a      	beq.n	8002dbc <xTaskDelayUntil+0x64>
        __asm volatile
 8002da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002daa:	f383 8811 	msr	BASEPRI, r3
 8002dae:	f3bf 8f6f 	isb	sy
 8002db2:	f3bf 8f4f 	dsb	sy
 8002db6:	60fb      	str	r3, [r7, #12]
    }
 8002db8:	bf00      	nop
 8002dba:	e7fe      	b.n	8002dba <xTaskDelayUntil+0x62>

        vTaskSuspendAll();
 8002dbc:	f000 f8b0 	bl	8002f20 <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 8002dc0:	4b24      	ldr	r3, [pc, #144]	; (8002e54 <xTaskDelayUntil+0xfc>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	623b      	str	r3, [r7, #32]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	683a      	ldr	r2, [r7, #0]
 8002dcc:	4413      	add	r3, r2
 8002dce:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	6a3a      	ldr	r2, [r7, #32]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d20b      	bcs.n	8002df2 <xTaskDelayUntil+0x9a>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	69fa      	ldr	r2, [r7, #28]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d211      	bcs.n	8002e08 <xTaskDelayUntil+0xb0>
 8002de4:	69fa      	ldr	r2, [r7, #28]
 8002de6:	6a3b      	ldr	r3, [r7, #32]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d90d      	bls.n	8002e08 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 8002dec:	2301      	movs	r3, #1
 8002dee:	627b      	str	r3, [r7, #36]	; 0x24
 8002df0:	e00a      	b.n	8002e08 <xTaskDelayUntil+0xb0>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	69fa      	ldr	r2, [r7, #28]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d303      	bcc.n	8002e04 <xTaskDelayUntil+0xac>
 8002dfc:	69fa      	ldr	r2, [r7, #28]
 8002dfe:	6a3b      	ldr	r3, [r7, #32]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d901      	bls.n	8002e08 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 8002e04:	2301      	movs	r3, #1
 8002e06:	627b      	str	r3, [r7, #36]	; 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	69fa      	ldr	r2, [r7, #28]
 8002e0c:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 8002e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d009      	beq.n	8002e28 <xTaskDelayUntil+0xd0>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );
 8002e14:	2024      	movs	r0, #36	; 0x24
 8002e16:	f002 fe57 	bl	8005ac8 <SEGGER_SYSVIEW_RecordVoid>

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8002e1a:	69fa      	ldr	r2, [r7, #28]
 8002e1c:	6a3b      	ldr	r3, [r7, #32]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	2100      	movs	r1, #0
 8002e22:	4618      	mov	r0, r3
 8002e24:	f000 fdcc 	bl	80039c0 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8002e28:	f000 f888 	bl	8002f3c <xTaskResumeAll>
 8002e2c:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d107      	bne.n	8002e44 <xTaskDelayUntil+0xec>
        {
            portYIELD_WITHIN_API();
 8002e34:	4b08      	ldr	r3, [pc, #32]	; (8002e58 <xTaskDelayUntil+0x100>)
 8002e36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e3a:	601a      	str	r2, [r3, #0]
 8002e3c:	f3bf 8f4f 	dsb	sy
 8002e40:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 8002e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002e46:	4618      	mov	r0, r3
 8002e48:	3728      	adds	r7, #40	; 0x28
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	200001c4 	.word	0x200001c4
 8002e54:	200001a0 	.word	0x200001a0
 8002e58:	e000ed04 	.word	0xe000ed04

08002e5c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b086      	sub	sp, #24
 8002e60:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8002e62:	4b27      	ldr	r3, [pc, #156]	; (8002f00 <vTaskStartScheduler+0xa4>)
 8002e64:	9301      	str	r3, [sp, #4]
 8002e66:	2300      	movs	r3, #0
 8002e68:	9300      	str	r3, [sp, #0]
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	2282      	movs	r2, #130	; 0x82
 8002e6e:	4925      	ldr	r1, [pc, #148]	; (8002f04 <vTaskStartScheduler+0xa8>)
 8002e70:	4825      	ldr	r0, [pc, #148]	; (8002f08 <vTaskStartScheduler+0xac>)
 8002e72:	f7ff fde9 	bl	8002a48 <xTaskCreate>
 8002e76:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d102      	bne.n	8002e84 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8002e7e:	f000 fe1f 	bl	8003ac0 <xTimerCreateTimerTask>
 8002e82:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d124      	bne.n	8002ed4 <vTaskStartScheduler+0x78>
        __asm volatile
 8002e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e8e:	f383 8811 	msr	BASEPRI, r3
 8002e92:	f3bf 8f6f 	isb	sy
 8002e96:	f3bf 8f4f 	dsb	sy
 8002e9a:	60bb      	str	r3, [r7, #8]
    }
 8002e9c:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002e9e:	4b1b      	ldr	r3, [pc, #108]	; (8002f0c <vTaskStartScheduler+0xb0>)
 8002ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ea4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002ea6:	4b1a      	ldr	r3, [pc, #104]	; (8002f10 <vTaskStartScheduler+0xb4>)
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002eac:	4b19      	ldr	r3, [pc, #100]	; (8002f14 <vTaskStartScheduler+0xb8>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002eb2:	4b19      	ldr	r3, [pc, #100]	; (8002f18 <vTaskStartScheduler+0xbc>)
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	4b12      	ldr	r3, [pc, #72]	; (8002f00 <vTaskStartScheduler+0xa4>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d102      	bne.n	8002ec4 <vTaskStartScheduler+0x68>
 8002ebe:	f003 fb03 	bl	80064c8 <SEGGER_SYSVIEW_OnIdle>
 8002ec2:	e004      	b.n	8002ece <vTaskStartScheduler+0x72>
 8002ec4:	4b14      	ldr	r3, [pc, #80]	; (8002f18 <vTaskStartScheduler+0xbc>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f003 fb5b 	bl	8006584 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8002ece:	f001 f909 	bl	80040e4 <xPortStartScheduler>
 8002ed2:	e00e      	b.n	8002ef2 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eda:	d10a      	bne.n	8002ef2 <vTaskStartScheduler+0x96>
        __asm volatile
 8002edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee0:	f383 8811 	msr	BASEPRI, r3
 8002ee4:	f3bf 8f6f 	isb	sy
 8002ee8:	f3bf 8f4f 	dsb	sy
 8002eec:	607b      	str	r3, [r7, #4]
    }
 8002eee:	bf00      	nop
 8002ef0:	e7fe      	b.n	8002ef0 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002ef2:	4b0a      	ldr	r3, [pc, #40]	; (8002f1c <vTaskStartScheduler+0xc0>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
}
 8002ef6:	bf00      	nop
 8002ef8:	3710      	adds	r7, #16
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	200001c0 	.word	0x200001c0
 8002f04:	08006a7c 	.word	0x08006a7c
 8002f08:	08003821 	.word	0x08003821
 8002f0c:	200001bc 	.word	0x200001bc
 8002f10:	200001a8 	.word	0x200001a8
 8002f14:	200001a0 	.word	0x200001a0
 8002f18:	200000c4 	.word	0x200000c4
 8002f1c:	2000000c 	.word	0x2000000c

08002f20 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002f24:	4b04      	ldr	r3, [pc, #16]	; (8002f38 <vTaskSuspendAll+0x18>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	3301      	adds	r3, #1
 8002f2a:	4a03      	ldr	r2, [pc, #12]	; (8002f38 <vTaskSuspendAll+0x18>)
 8002f2c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002f2e:	bf00      	nop
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr
 8002f38:	200001c4 	.word	0x200001c4

08002f3c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b088      	sub	sp, #32
 8002f40:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002f42:	2300      	movs	r3, #0
 8002f44:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002f46:	2300      	movs	r3, #0
 8002f48:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002f4a:	4b73      	ldr	r3, [pc, #460]	; (8003118 <xTaskResumeAll+0x1dc>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d10a      	bne.n	8002f68 <xTaskResumeAll+0x2c>
        __asm volatile
 8002f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f56:	f383 8811 	msr	BASEPRI, r3
 8002f5a:	f3bf 8f6f 	isb	sy
 8002f5e:	f3bf 8f4f 	dsb	sy
 8002f62:	607b      	str	r3, [r7, #4]
    }
 8002f64:	bf00      	nop
 8002f66:	e7fe      	b.n	8002f66 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002f68:	f001 f9dc 	bl	8004324 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002f6c:	4b6a      	ldr	r3, [pc, #424]	; (8003118 <xTaskResumeAll+0x1dc>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	3b01      	subs	r3, #1
 8002f72:	4a69      	ldr	r2, [pc, #420]	; (8003118 <xTaskResumeAll+0x1dc>)
 8002f74:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f76:	4b68      	ldr	r3, [pc, #416]	; (8003118 <xTaskResumeAll+0x1dc>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	f040 80c4 	bne.w	8003108 <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002f80:	4b66      	ldr	r3, [pc, #408]	; (800311c <xTaskResumeAll+0x1e0>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	f000 80bf 	beq.w	8003108 <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f8a:	e08e      	b.n	80030aa <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f8c:	4b64      	ldr	r3, [pc, #400]	; (8003120 <xTaskResumeAll+0x1e4>)
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f98:	613b      	str	r3, [r7, #16]
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	69db      	ldr	r3, [r3, #28]
 8002f9e:	69fa      	ldr	r2, [r7, #28]
 8002fa0:	6a12      	ldr	r2, [r2, #32]
 8002fa2:	609a      	str	r2, [r3, #8]
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	6a1b      	ldr	r3, [r3, #32]
 8002fa8:	69fa      	ldr	r2, [r7, #28]
 8002faa:	69d2      	ldr	r2, [r2, #28]
 8002fac:	605a      	str	r2, [r3, #4]
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	685a      	ldr	r2, [r3, #4]
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	3318      	adds	r3, #24
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d103      	bne.n	8002fc2 <xTaskResumeAll+0x86>
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	6a1a      	ldr	r2, [r3, #32]
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	605a      	str	r2, [r3, #4]
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	629a      	str	r2, [r3, #40]	; 0x28
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	1e5a      	subs	r2, r3, #1
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	60fb      	str	r3, [r7, #12]
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	69fa      	ldr	r2, [r7, #28]
 8002fde:	68d2      	ldr	r2, [r2, #12]
 8002fe0:	609a      	str	r2, [r3, #8]
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	69fa      	ldr	r2, [r7, #28]
 8002fe8:	6892      	ldr	r2, [r2, #8]
 8002fea:	605a      	str	r2, [r3, #4]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	685a      	ldr	r2, [r3, #4]
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	3304      	adds	r3, #4
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d103      	bne.n	8003000 <xTaskResumeAll+0xc4>
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	68da      	ldr	r2, [r3, #12]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	605a      	str	r2, [r3, #4]
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	2200      	movs	r2, #0
 8003004:	615a      	str	r2, [r3, #20]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	1e5a      	subs	r2, r3, #1
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	4618      	mov	r0, r3
 8003014:	f003 faf8 	bl	8006608 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301c:	2201      	movs	r2, #1
 800301e:	409a      	lsls	r2, r3
 8003020:	4b40      	ldr	r3, [pc, #256]	; (8003124 <xTaskResumeAll+0x1e8>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4313      	orrs	r3, r2
 8003026:	4a3f      	ldr	r2, [pc, #252]	; (8003124 <xTaskResumeAll+0x1e8>)
 8003028:	6013      	str	r3, [r2, #0]
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800302e:	493e      	ldr	r1, [pc, #248]	; (8003128 <xTaskResumeAll+0x1ec>)
 8003030:	4613      	mov	r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	4413      	add	r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	440b      	add	r3, r1
 800303a:	3304      	adds	r3, #4
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	60bb      	str	r3, [r7, #8]
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	68ba      	ldr	r2, [r7, #8]
 8003044:	609a      	str	r2, [r3, #8]
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	689a      	ldr	r2, [r3, #8]
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	60da      	str	r2, [r3, #12]
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	69fa      	ldr	r2, [r7, #28]
 8003054:	3204      	adds	r2, #4
 8003056:	605a      	str	r2, [r3, #4]
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	1d1a      	adds	r2, r3, #4
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	609a      	str	r2, [r3, #8]
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003064:	4613      	mov	r3, r2
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	4413      	add	r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	4a2e      	ldr	r2, [pc, #184]	; (8003128 <xTaskResumeAll+0x1ec>)
 800306e:	441a      	add	r2, r3
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	615a      	str	r2, [r3, #20]
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003078:	492b      	ldr	r1, [pc, #172]	; (8003128 <xTaskResumeAll+0x1ec>)
 800307a:	4613      	mov	r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	4413      	add	r3, r2
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	440b      	add	r3, r1
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	1c59      	adds	r1, r3, #1
 8003088:	4827      	ldr	r0, [pc, #156]	; (8003128 <xTaskResumeAll+0x1ec>)
 800308a:	4613      	mov	r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	4413      	add	r3, r2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	4403      	add	r3, r0
 8003094:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800309a:	4b24      	ldr	r3, [pc, #144]	; (800312c <xTaskResumeAll+0x1f0>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d302      	bcc.n	80030aa <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 80030a4:	4b22      	ldr	r3, [pc, #136]	; (8003130 <xTaskResumeAll+0x1f4>)
 80030a6:	2201      	movs	r2, #1
 80030a8:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80030aa:	4b1d      	ldr	r3, [pc, #116]	; (8003120 <xTaskResumeAll+0x1e4>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	f47f af6c 	bne.w	8002f8c <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80030ba:	f000 fc47 	bl	800394c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80030be:	4b1d      	ldr	r3, [pc, #116]	; (8003134 <xTaskResumeAll+0x1f8>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d010      	beq.n	80030ec <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80030ca:	f000 f859 	bl	8003180 <xTaskIncrementTick>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d002      	beq.n	80030da <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 80030d4:	4b16      	ldr	r3, [pc, #88]	; (8003130 <xTaskResumeAll+0x1f4>)
 80030d6:	2201      	movs	r2, #1
 80030d8:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	3b01      	subs	r3, #1
 80030de:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1f1      	bne.n	80030ca <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 80030e6:	4b13      	ldr	r3, [pc, #76]	; (8003134 <xTaskResumeAll+0x1f8>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80030ec:	4b10      	ldr	r3, [pc, #64]	; (8003130 <xTaskResumeAll+0x1f4>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d009      	beq.n	8003108 <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 80030f4:	2301      	movs	r3, #1
 80030f6:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80030f8:	4b0f      	ldr	r3, [pc, #60]	; (8003138 <xTaskResumeAll+0x1fc>)
 80030fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030fe:	601a      	str	r2, [r3, #0]
 8003100:	f3bf 8f4f 	dsb	sy
 8003104:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003108:	f001 f93c 	bl	8004384 <vPortExitCritical>

    return xAlreadyYielded;
 800310c:	69bb      	ldr	r3, [r7, #24]
}
 800310e:	4618      	mov	r0, r3
 8003110:	3720      	adds	r7, #32
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	200001c4 	.word	0x200001c4
 800311c:	2000019c 	.word	0x2000019c
 8003120:	2000015c 	.word	0x2000015c
 8003124:	200001a4 	.word	0x200001a4
 8003128:	200000c8 	.word	0x200000c8
 800312c:	200000c4 	.word	0x200000c4
 8003130:	200001b0 	.word	0x200001b0
 8003134:	200001ac 	.word	0x200001ac
 8003138:	e000ed04 	.word	0xe000ed04

0800313c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003142:	4b05      	ldr	r3, [pc, #20]	; (8003158 <xTaskGetTickCount+0x1c>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003148:	687b      	ldr	r3, [r7, #4]
}
 800314a:	4618      	mov	r0, r3
 800314c:	370c      	adds	r7, #12
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	200001a0 	.word	0x200001a0

0800315c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003162:	f001 f9cb 	bl	80044fc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003166:	2300      	movs	r3, #0
 8003168:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800316a:	4b04      	ldr	r3, [pc, #16]	; (800317c <xTaskGetTickCountFromISR+0x20>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003170:	683b      	ldr	r3, [r7, #0]
}
 8003172:	4618      	mov	r0, r3
 8003174:	3708      	adds	r7, #8
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	200001a0 	.word	0x200001a0

08003180 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b08a      	sub	sp, #40	; 0x28
 8003184:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003186:	2300      	movs	r3, #0
 8003188:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800318a:	4b7f      	ldr	r3, [pc, #508]	; (8003388 <xTaskIncrementTick+0x208>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2b00      	cmp	r3, #0
 8003190:	f040 80f0 	bne.w	8003374 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003194:	4b7d      	ldr	r3, [pc, #500]	; (800338c <xTaskIncrementTick+0x20c>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	3301      	adds	r3, #1
 800319a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800319c:	4a7b      	ldr	r2, [pc, #492]	; (800338c <xTaskIncrementTick+0x20c>)
 800319e:	6a3b      	ldr	r3, [r7, #32]
 80031a0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80031a2:	6a3b      	ldr	r3, [r7, #32]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d120      	bne.n	80031ea <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80031a8:	4b79      	ldr	r3, [pc, #484]	; (8003390 <xTaskIncrementTick+0x210>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d00a      	beq.n	80031c8 <xTaskIncrementTick+0x48>
        __asm volatile
 80031b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031b6:	f383 8811 	msr	BASEPRI, r3
 80031ba:	f3bf 8f6f 	isb	sy
 80031be:	f3bf 8f4f 	dsb	sy
 80031c2:	607b      	str	r3, [r7, #4]
    }
 80031c4:	bf00      	nop
 80031c6:	e7fe      	b.n	80031c6 <xTaskIncrementTick+0x46>
 80031c8:	4b71      	ldr	r3, [pc, #452]	; (8003390 <xTaskIncrementTick+0x210>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	61fb      	str	r3, [r7, #28]
 80031ce:	4b71      	ldr	r3, [pc, #452]	; (8003394 <xTaskIncrementTick+0x214>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a6f      	ldr	r2, [pc, #444]	; (8003390 <xTaskIncrementTick+0x210>)
 80031d4:	6013      	str	r3, [r2, #0]
 80031d6:	4a6f      	ldr	r2, [pc, #444]	; (8003394 <xTaskIncrementTick+0x214>)
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	6013      	str	r3, [r2, #0]
 80031dc:	4b6e      	ldr	r3, [pc, #440]	; (8003398 <xTaskIncrementTick+0x218>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	3301      	adds	r3, #1
 80031e2:	4a6d      	ldr	r2, [pc, #436]	; (8003398 <xTaskIncrementTick+0x218>)
 80031e4:	6013      	str	r3, [r2, #0]
 80031e6:	f000 fbb1 	bl	800394c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80031ea:	4b6c      	ldr	r3, [pc, #432]	; (800339c <xTaskIncrementTick+0x21c>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	6a3a      	ldr	r2, [r7, #32]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	f0c0 80aa 	bcc.w	800334a <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80031f6:	4b66      	ldr	r3, [pc, #408]	; (8003390 <xTaskIncrementTick+0x210>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d104      	bne.n	800320a <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003200:	4b66      	ldr	r3, [pc, #408]	; (800339c <xTaskIncrementTick+0x21c>)
 8003202:	f04f 32ff 	mov.w	r2, #4294967295
 8003206:	601a      	str	r2, [r3, #0]
                    break;
 8003208:	e09f      	b.n	800334a <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800320a:	4b61      	ldr	r3, [pc, #388]	; (8003390 <xTaskIncrementTick+0x210>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800321a:	6a3a      	ldr	r2, [r7, #32]
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	429a      	cmp	r2, r3
 8003220:	d203      	bcs.n	800322a <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003222:	4a5e      	ldr	r2, [pc, #376]	; (800339c <xTaskIncrementTick+0x21c>)
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8003228:	e08f      	b.n	800334a <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	613b      	str	r3, [r7, #16]
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	69ba      	ldr	r2, [r7, #24]
 8003236:	68d2      	ldr	r2, [r2, #12]
 8003238:	609a      	str	r2, [r3, #8]
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	6892      	ldr	r2, [r2, #8]
 8003242:	605a      	str	r2, [r3, #4]
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	685a      	ldr	r2, [r3, #4]
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	3304      	adds	r3, #4
 800324c:	429a      	cmp	r2, r3
 800324e:	d103      	bne.n	8003258 <xTaskIncrementTick+0xd8>
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	68da      	ldr	r2, [r3, #12]
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	605a      	str	r2, [r3, #4]
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	2200      	movs	r2, #0
 800325c:	615a      	str	r2, [r3, #20]
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	1e5a      	subs	r2, r3, #1
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800326c:	2b00      	cmp	r3, #0
 800326e:	d01e      	beq.n	80032ae <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003274:	60fb      	str	r3, [r7, #12]
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	69db      	ldr	r3, [r3, #28]
 800327a:	69ba      	ldr	r2, [r7, #24]
 800327c:	6a12      	ldr	r2, [r2, #32]
 800327e:	609a      	str	r2, [r3, #8]
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	6a1b      	ldr	r3, [r3, #32]
 8003284:	69ba      	ldr	r2, [r7, #24]
 8003286:	69d2      	ldr	r2, [r2, #28]
 8003288:	605a      	str	r2, [r3, #4]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	685a      	ldr	r2, [r3, #4]
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	3318      	adds	r3, #24
 8003292:	429a      	cmp	r2, r3
 8003294:	d103      	bne.n	800329e <xTaskIncrementTick+0x11e>
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	6a1a      	ldr	r2, [r3, #32]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	605a      	str	r2, [r3, #4]
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	2200      	movs	r2, #0
 80032a2:	629a      	str	r2, [r3, #40]	; 0x28
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	1e5a      	subs	r2, r3, #1
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	4618      	mov	r0, r3
 80032b2:	f003 f9a9 	bl	8006608 <SEGGER_SYSVIEW_OnTaskStartReady>
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ba:	2201      	movs	r2, #1
 80032bc:	409a      	lsls	r2, r3
 80032be:	4b38      	ldr	r3, [pc, #224]	; (80033a0 <xTaskIncrementTick+0x220>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	4a36      	ldr	r2, [pc, #216]	; (80033a0 <xTaskIncrementTick+0x220>)
 80032c6:	6013      	str	r3, [r2, #0]
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032cc:	4935      	ldr	r1, [pc, #212]	; (80033a4 <xTaskIncrementTick+0x224>)
 80032ce:	4613      	mov	r3, r2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	4413      	add	r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	440b      	add	r3, r1
 80032d8:	3304      	adds	r3, #4
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	60bb      	str	r3, [r7, #8]
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	68ba      	ldr	r2, [r7, #8]
 80032e2:	609a      	str	r2, [r3, #8]
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	689a      	ldr	r2, [r3, #8]
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	60da      	str	r2, [r3, #12]
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	69ba      	ldr	r2, [r7, #24]
 80032f2:	3204      	adds	r2, #4
 80032f4:	605a      	str	r2, [r3, #4]
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	1d1a      	adds	r2, r3, #4
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	609a      	str	r2, [r3, #8]
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003302:	4613      	mov	r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	4413      	add	r3, r2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	4a26      	ldr	r2, [pc, #152]	; (80033a4 <xTaskIncrementTick+0x224>)
 800330c:	441a      	add	r2, r3
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	615a      	str	r2, [r3, #20]
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003316:	4923      	ldr	r1, [pc, #140]	; (80033a4 <xTaskIncrementTick+0x224>)
 8003318:	4613      	mov	r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	4413      	add	r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	440b      	add	r3, r1
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	1c59      	adds	r1, r3, #1
 8003326:	481f      	ldr	r0, [pc, #124]	; (80033a4 <xTaskIncrementTick+0x224>)
 8003328:	4613      	mov	r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	4413      	add	r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	4403      	add	r3, r0
 8003332:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003338:	4b1b      	ldr	r3, [pc, #108]	; (80033a8 <xTaskIncrementTick+0x228>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333e:	429a      	cmp	r2, r3
 8003340:	f67f af59 	bls.w	80031f6 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8003344:	2301      	movs	r3, #1
 8003346:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003348:	e755      	b.n	80031f6 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800334a:	4b17      	ldr	r3, [pc, #92]	; (80033a8 <xTaskIncrementTick+0x228>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003350:	4914      	ldr	r1, [pc, #80]	; (80033a4 <xTaskIncrementTick+0x224>)
 8003352:	4613      	mov	r3, r2
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	4413      	add	r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	440b      	add	r3, r1
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2b01      	cmp	r3, #1
 8003360:	d901      	bls.n	8003366 <xTaskIncrementTick+0x1e6>
            {
                xSwitchRequired = pdTRUE;
 8003362:	2301      	movs	r3, #1
 8003364:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8003366:	4b11      	ldr	r3, [pc, #68]	; (80033ac <xTaskIncrementTick+0x22c>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d007      	beq.n	800337e <xTaskIncrementTick+0x1fe>
            {
                xSwitchRequired = pdTRUE;
 800336e:	2301      	movs	r3, #1
 8003370:	627b      	str	r3, [r7, #36]	; 0x24
 8003372:	e004      	b.n	800337e <xTaskIncrementTick+0x1fe>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003374:	4b0e      	ldr	r3, [pc, #56]	; (80033b0 <xTaskIncrementTick+0x230>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	3301      	adds	r3, #1
 800337a:	4a0d      	ldr	r2, [pc, #52]	; (80033b0 <xTaskIncrementTick+0x230>)
 800337c:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800337e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003380:	4618      	mov	r0, r3
 8003382:	3728      	adds	r7, #40	; 0x28
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	200001c4 	.word	0x200001c4
 800338c:	200001a0 	.word	0x200001a0
 8003390:	20000154 	.word	0x20000154
 8003394:	20000158 	.word	0x20000158
 8003398:	200001b4 	.word	0x200001b4
 800339c:	200001bc 	.word	0x200001bc
 80033a0:	200001a4 	.word	0x200001a4
 80033a4:	200000c8 	.word	0x200000c8
 80033a8:	200000c4 	.word	0x200000c4
 80033ac:	200001b0 	.word	0x200001b0
 80033b0:	200001ac 	.word	0x200001ac

080033b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b086      	sub	sp, #24
 80033b8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80033ba:	4b2d      	ldr	r3, [pc, #180]	; (8003470 <vTaskSwitchContext+0xbc>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d003      	beq.n	80033ca <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80033c2:	4b2c      	ldr	r3, [pc, #176]	; (8003474 <vTaskSwitchContext+0xc0>)
 80033c4:	2201      	movs	r2, #1
 80033c6:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80033c8:	e04d      	b.n	8003466 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 80033ca:	4b2a      	ldr	r3, [pc, #168]	; (8003474 <vTaskSwitchContext+0xc0>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033d0:	4b29      	ldr	r3, [pc, #164]	; (8003478 <vTaskSwitchContext+0xc4>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	fab3 f383 	clz	r3, r3
 80033dc:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80033de:	7afb      	ldrb	r3, [r7, #11]
 80033e0:	f1c3 031f 	rsb	r3, r3, #31
 80033e4:	617b      	str	r3, [r7, #20]
 80033e6:	4925      	ldr	r1, [pc, #148]	; (800347c <vTaskSwitchContext+0xc8>)
 80033e8:	697a      	ldr	r2, [r7, #20]
 80033ea:	4613      	mov	r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	4413      	add	r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	440b      	add	r3, r1
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d10a      	bne.n	8003410 <vTaskSwitchContext+0x5c>
        __asm volatile
 80033fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033fe:	f383 8811 	msr	BASEPRI, r3
 8003402:	f3bf 8f6f 	isb	sy
 8003406:	f3bf 8f4f 	dsb	sy
 800340a:	607b      	str	r3, [r7, #4]
    }
 800340c:	bf00      	nop
 800340e:	e7fe      	b.n	800340e <vTaskSwitchContext+0x5a>
 8003410:	697a      	ldr	r2, [r7, #20]
 8003412:	4613      	mov	r3, r2
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	4413      	add	r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	4a18      	ldr	r2, [pc, #96]	; (800347c <vTaskSwitchContext+0xc8>)
 800341c:	4413      	add	r3, r2
 800341e:	613b      	str	r3, [r7, #16]
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	685a      	ldr	r2, [r3, #4]
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	605a      	str	r2, [r3, #4]
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	685a      	ldr	r2, [r3, #4]
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	3308      	adds	r3, #8
 8003432:	429a      	cmp	r2, r3
 8003434:	d104      	bne.n	8003440 <vTaskSwitchContext+0x8c>
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	685a      	ldr	r2, [r3, #4]
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	605a      	str	r2, [r3, #4]
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	4a0e      	ldr	r2, [pc, #56]	; (8003480 <vTaskSwitchContext+0xcc>)
 8003448:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800344a:	4b0d      	ldr	r3, [pc, #52]	; (8003480 <vTaskSwitchContext+0xcc>)
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	4b0d      	ldr	r3, [pc, #52]	; (8003484 <vTaskSwitchContext+0xd0>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	429a      	cmp	r2, r3
 8003454:	d102      	bne.n	800345c <vTaskSwitchContext+0xa8>
 8003456:	f003 f837 	bl	80064c8 <SEGGER_SYSVIEW_OnIdle>
}
 800345a:	e004      	b.n	8003466 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 800345c:	4b08      	ldr	r3, [pc, #32]	; (8003480 <vTaskSwitchContext+0xcc>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4618      	mov	r0, r3
 8003462:	f003 f88f 	bl	8006584 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003466:	bf00      	nop
 8003468:	3718      	adds	r7, #24
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	200001c4 	.word	0x200001c4
 8003474:	200001b0 	.word	0x200001b0
 8003478:	200001a4 	.word	0x200001a4
 800347c:	200000c8 	.word	0x200000c8
 8003480:	200000c4 	.word	0x200000c4
 8003484:	200001c0 	.word	0x200001c0

08003488 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d10a      	bne.n	80034ae <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800349c:	f383 8811 	msr	BASEPRI, r3
 80034a0:	f3bf 8f6f 	isb	sy
 80034a4:	f3bf 8f4f 	dsb	sy
 80034a8:	60fb      	str	r3, [r7, #12]
    }
 80034aa:	bf00      	nop
 80034ac:	e7fe      	b.n	80034ac <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80034ae:	4b07      	ldr	r3, [pc, #28]	; (80034cc <vTaskPlaceOnEventList+0x44>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	3318      	adds	r3, #24
 80034b4:	4619      	mov	r1, r3
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f7fe ff33 	bl	8002322 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80034bc:	2101      	movs	r1, #1
 80034be:	6838      	ldr	r0, [r7, #0]
 80034c0:	f000 fa7e 	bl	80039c0 <prvAddCurrentTaskToDelayedList>
}
 80034c4:	bf00      	nop
 80034c6:	3710      	adds	r7, #16
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	200000c4 	.word	0x200000c4

080034d0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b086      	sub	sp, #24
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d10a      	bne.n	80034f8 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80034e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034e6:	f383 8811 	msr	BASEPRI, r3
 80034ea:	f3bf 8f6f 	isb	sy
 80034ee:	f3bf 8f4f 	dsb	sy
 80034f2:	613b      	str	r3, [r7, #16]
    }
 80034f4:	bf00      	nop
 80034f6:	e7fe      	b.n	80034f6 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	617b      	str	r3, [r7, #20]
 80034fe:	4b17      	ldr	r3, [pc, #92]	; (800355c <vTaskPlaceOnEventListRestricted+0x8c>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	697a      	ldr	r2, [r7, #20]
 8003504:	61da      	str	r2, [r3, #28]
 8003506:	4b15      	ldr	r3, [pc, #84]	; (800355c <vTaskPlaceOnEventListRestricted+0x8c>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	697a      	ldr	r2, [r7, #20]
 800350c:	6892      	ldr	r2, [r2, #8]
 800350e:	621a      	str	r2, [r3, #32]
 8003510:	4b12      	ldr	r3, [pc, #72]	; (800355c <vTaskPlaceOnEventListRestricted+0x8c>)
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	3218      	adds	r2, #24
 800351a:	605a      	str	r2, [r3, #4]
 800351c:	4b0f      	ldr	r3, [pc, #60]	; (800355c <vTaskPlaceOnEventListRestricted+0x8c>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f103 0218 	add.w	r2, r3, #24
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	609a      	str	r2, [r3, #8]
 8003528:	4b0c      	ldr	r3, [pc, #48]	; (800355c <vTaskPlaceOnEventListRestricted+0x8c>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	68fa      	ldr	r2, [r7, #12]
 800352e:	629a      	str	r2, [r3, #40]	; 0x28
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	1c5a      	adds	r2, r3, #1
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d002      	beq.n	8003546 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8003540:	f04f 33ff 	mov.w	r3, #4294967295
 8003544:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003546:	2024      	movs	r0, #36	; 0x24
 8003548:	f002 fabe 	bl	8005ac8 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800354c:	6879      	ldr	r1, [r7, #4]
 800354e:	68b8      	ldr	r0, [r7, #8]
 8003550:	f000 fa36 	bl	80039c0 <prvAddCurrentTaskToDelayedList>
    }
 8003554:	bf00      	nop
 8003556:	3718      	adds	r7, #24
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	200000c4 	.word	0x200000c4

08003560 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b08a      	sub	sp, #40	; 0x28
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003570:	6a3b      	ldr	r3, [r7, #32]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d10a      	bne.n	800358c <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800357a:	f383 8811 	msr	BASEPRI, r3
 800357e:	f3bf 8f6f 	isb	sy
 8003582:	f3bf 8f4f 	dsb	sy
 8003586:	60fb      	str	r3, [r7, #12]
    }
 8003588:	bf00      	nop
 800358a:	e7fe      	b.n	800358a <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800358c:	6a3b      	ldr	r3, [r7, #32]
 800358e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003590:	61fb      	str	r3, [r7, #28]
 8003592:	6a3b      	ldr	r3, [r7, #32]
 8003594:	69db      	ldr	r3, [r3, #28]
 8003596:	6a3a      	ldr	r2, [r7, #32]
 8003598:	6a12      	ldr	r2, [r2, #32]
 800359a:	609a      	str	r2, [r3, #8]
 800359c:	6a3b      	ldr	r3, [r7, #32]
 800359e:	6a1b      	ldr	r3, [r3, #32]
 80035a0:	6a3a      	ldr	r2, [r7, #32]
 80035a2:	69d2      	ldr	r2, [r2, #28]
 80035a4:	605a      	str	r2, [r3, #4]
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	685a      	ldr	r2, [r3, #4]
 80035aa:	6a3b      	ldr	r3, [r7, #32]
 80035ac:	3318      	adds	r3, #24
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d103      	bne.n	80035ba <xTaskRemoveFromEventList+0x5a>
 80035b2:	6a3b      	ldr	r3, [r7, #32]
 80035b4:	6a1a      	ldr	r2, [r3, #32]
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	605a      	str	r2, [r3, #4]
 80035ba:	6a3b      	ldr	r3, [r7, #32]
 80035bc:	2200      	movs	r2, #0
 80035be:	629a      	str	r2, [r3, #40]	; 0x28
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	1e5a      	subs	r2, r3, #1
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035ca:	4b4b      	ldr	r3, [pc, #300]	; (80036f8 <xTaskRemoveFromEventList+0x198>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d162      	bne.n	8003698 <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80035d2:	6a3b      	ldr	r3, [r7, #32]
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	617b      	str	r3, [r7, #20]
 80035d8:	6a3b      	ldr	r3, [r7, #32]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	6a3a      	ldr	r2, [r7, #32]
 80035de:	68d2      	ldr	r2, [r2, #12]
 80035e0:	609a      	str	r2, [r3, #8]
 80035e2:	6a3b      	ldr	r3, [r7, #32]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	6a3a      	ldr	r2, [r7, #32]
 80035e8:	6892      	ldr	r2, [r2, #8]
 80035ea:	605a      	str	r2, [r3, #4]
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	685a      	ldr	r2, [r3, #4]
 80035f0:	6a3b      	ldr	r3, [r7, #32]
 80035f2:	3304      	adds	r3, #4
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d103      	bne.n	8003600 <xTaskRemoveFromEventList+0xa0>
 80035f8:	6a3b      	ldr	r3, [r7, #32]
 80035fa:	68da      	ldr	r2, [r3, #12]
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	605a      	str	r2, [r3, #4]
 8003600:	6a3b      	ldr	r3, [r7, #32]
 8003602:	2200      	movs	r2, #0
 8003604:	615a      	str	r2, [r3, #20]
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	1e5a      	subs	r2, r3, #1
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003610:	6a3b      	ldr	r3, [r7, #32]
 8003612:	4618      	mov	r0, r3
 8003614:	f002 fff8 	bl	8006608 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003618:	6a3b      	ldr	r3, [r7, #32]
 800361a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800361c:	2201      	movs	r2, #1
 800361e:	409a      	lsls	r2, r3
 8003620:	4b36      	ldr	r3, [pc, #216]	; (80036fc <xTaskRemoveFromEventList+0x19c>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4313      	orrs	r3, r2
 8003626:	4a35      	ldr	r2, [pc, #212]	; (80036fc <xTaskRemoveFromEventList+0x19c>)
 8003628:	6013      	str	r3, [r2, #0]
 800362a:	6a3b      	ldr	r3, [r7, #32]
 800362c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800362e:	4934      	ldr	r1, [pc, #208]	; (8003700 <xTaskRemoveFromEventList+0x1a0>)
 8003630:	4613      	mov	r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	4413      	add	r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	440b      	add	r3, r1
 800363a:	3304      	adds	r3, #4
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	613b      	str	r3, [r7, #16]
 8003640:	6a3b      	ldr	r3, [r7, #32]
 8003642:	693a      	ldr	r2, [r7, #16]
 8003644:	609a      	str	r2, [r3, #8]
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	689a      	ldr	r2, [r3, #8]
 800364a:	6a3b      	ldr	r3, [r7, #32]
 800364c:	60da      	str	r2, [r3, #12]
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	6a3a      	ldr	r2, [r7, #32]
 8003654:	3204      	adds	r2, #4
 8003656:	605a      	str	r2, [r3, #4]
 8003658:	6a3b      	ldr	r3, [r7, #32]
 800365a:	1d1a      	adds	r2, r3, #4
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	609a      	str	r2, [r3, #8]
 8003660:	6a3b      	ldr	r3, [r7, #32]
 8003662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003664:	4613      	mov	r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	4413      	add	r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	4a24      	ldr	r2, [pc, #144]	; (8003700 <xTaskRemoveFromEventList+0x1a0>)
 800366e:	441a      	add	r2, r3
 8003670:	6a3b      	ldr	r3, [r7, #32]
 8003672:	615a      	str	r2, [r3, #20]
 8003674:	6a3b      	ldr	r3, [r7, #32]
 8003676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003678:	4921      	ldr	r1, [pc, #132]	; (8003700 <xTaskRemoveFromEventList+0x1a0>)
 800367a:	4613      	mov	r3, r2
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	4413      	add	r3, r2
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	440b      	add	r3, r1
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	1c59      	adds	r1, r3, #1
 8003688:	481d      	ldr	r0, [pc, #116]	; (8003700 <xTaskRemoveFromEventList+0x1a0>)
 800368a:	4613      	mov	r3, r2
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	4413      	add	r3, r2
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	4403      	add	r3, r0
 8003694:	6019      	str	r1, [r3, #0]
 8003696:	e01b      	b.n	80036d0 <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003698:	4b1a      	ldr	r3, [pc, #104]	; (8003704 <xTaskRemoveFromEventList+0x1a4>)
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	61bb      	str	r3, [r7, #24]
 800369e:	6a3b      	ldr	r3, [r7, #32]
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	61da      	str	r2, [r3, #28]
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	689a      	ldr	r2, [r3, #8]
 80036a8:	6a3b      	ldr	r3, [r7, #32]
 80036aa:	621a      	str	r2, [r3, #32]
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	6a3a      	ldr	r2, [r7, #32]
 80036b2:	3218      	adds	r2, #24
 80036b4:	605a      	str	r2, [r3, #4]
 80036b6:	6a3b      	ldr	r3, [r7, #32]
 80036b8:	f103 0218 	add.w	r2, r3, #24
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	609a      	str	r2, [r3, #8]
 80036c0:	6a3b      	ldr	r3, [r7, #32]
 80036c2:	4a10      	ldr	r2, [pc, #64]	; (8003704 <xTaskRemoveFromEventList+0x1a4>)
 80036c4:	629a      	str	r2, [r3, #40]	; 0x28
 80036c6:	4b0f      	ldr	r3, [pc, #60]	; (8003704 <xTaskRemoveFromEventList+0x1a4>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	3301      	adds	r3, #1
 80036cc:	4a0d      	ldr	r2, [pc, #52]	; (8003704 <xTaskRemoveFromEventList+0x1a4>)
 80036ce:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80036d0:	6a3b      	ldr	r3, [r7, #32]
 80036d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036d4:	4b0c      	ldr	r3, [pc, #48]	; (8003708 <xTaskRemoveFromEventList+0x1a8>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036da:	429a      	cmp	r2, r3
 80036dc:	d905      	bls.n	80036ea <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80036de:	2301      	movs	r3, #1
 80036e0:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80036e2:	4b0a      	ldr	r3, [pc, #40]	; (800370c <xTaskRemoveFromEventList+0x1ac>)
 80036e4:	2201      	movs	r2, #1
 80036e6:	601a      	str	r2, [r3, #0]
 80036e8:	e001      	b.n	80036ee <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 80036ea:	2300      	movs	r3, #0
 80036ec:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 80036ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3728      	adds	r7, #40	; 0x28
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	200001c4 	.word	0x200001c4
 80036fc:	200001a4 	.word	0x200001a4
 8003700:	200000c8 	.word	0x200000c8
 8003704:	2000015c 	.word	0x2000015c
 8003708:	200000c4 	.word	0x200000c4
 800370c:	200001b0 	.word	0x200001b0

08003710 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003718:	4b06      	ldr	r3, [pc, #24]	; (8003734 <vTaskInternalSetTimeOutState+0x24>)
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003720:	4b05      	ldr	r3, [pc, #20]	; (8003738 <vTaskInternalSetTimeOutState+0x28>)
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	605a      	str	r2, [r3, #4]
}
 8003728:	bf00      	nop
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr
 8003734:	200001b4 	.word	0x200001b4
 8003738:	200001a0 	.word	0x200001a0

0800373c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b088      	sub	sp, #32
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d10a      	bne.n	8003762 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 800374c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003750:	f383 8811 	msr	BASEPRI, r3
 8003754:	f3bf 8f6f 	isb	sy
 8003758:	f3bf 8f4f 	dsb	sy
 800375c:	613b      	str	r3, [r7, #16]
    }
 800375e:	bf00      	nop
 8003760:	e7fe      	b.n	8003760 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d10a      	bne.n	800377e <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800376c:	f383 8811 	msr	BASEPRI, r3
 8003770:	f3bf 8f6f 	isb	sy
 8003774:	f3bf 8f4f 	dsb	sy
 8003778:	60fb      	str	r3, [r7, #12]
    }
 800377a:	bf00      	nop
 800377c:	e7fe      	b.n	800377c <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800377e:	f000 fdd1 	bl	8004324 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003782:	4b1f      	ldr	r3, [pc, #124]	; (8003800 <xTaskCheckForTimeOut+0xc4>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800379a:	d102      	bne.n	80037a2 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800379c:	2300      	movs	r3, #0
 800379e:	61fb      	str	r3, [r7, #28]
 80037a0:	e026      	b.n	80037f0 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	4b17      	ldr	r3, [pc, #92]	; (8003804 <xTaskCheckForTimeOut+0xc8>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d00a      	beq.n	80037c4 <xTaskCheckForTimeOut+0x88>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	69ba      	ldr	r2, [r7, #24]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d305      	bcc.n	80037c4 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80037b8:	2301      	movs	r3, #1
 80037ba:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	2200      	movs	r2, #0
 80037c0:	601a      	str	r2, [r3, #0]
 80037c2:	e015      	b.n	80037f0 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	697a      	ldr	r2, [r7, #20]
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d20b      	bcs.n	80037e6 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	1ad2      	subs	r2, r2, r3
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f7ff ff98 	bl	8003710 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80037e0:	2300      	movs	r3, #0
 80037e2:	61fb      	str	r3, [r7, #28]
 80037e4:	e004      	b.n	80037f0 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	2200      	movs	r2, #0
 80037ea:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80037ec:	2301      	movs	r3, #1
 80037ee:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80037f0:	f000 fdc8 	bl	8004384 <vPortExitCritical>

    return xReturn;
 80037f4:	69fb      	ldr	r3, [r7, #28]
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3720      	adds	r7, #32
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	200001a0 	.word	0x200001a0
 8003804:	200001b4 	.word	0x200001b4

08003808 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003808:	b480      	push	{r7}
 800380a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800380c:	4b03      	ldr	r3, [pc, #12]	; (800381c <vTaskMissedYield+0x14>)
 800380e:	2201      	movs	r2, #1
 8003810:	601a      	str	r2, [r3, #0]
}
 8003812:	bf00      	nop
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr
 800381c:	200001b0 	.word	0x200001b0

08003820 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003828:	f000 f852 	bl	80038d0 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800382c:	4b06      	ldr	r3, [pc, #24]	; (8003848 <prvIdleTask+0x28>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2b01      	cmp	r3, #1
 8003832:	d9f9      	bls.n	8003828 <prvIdleTask+0x8>
            {
                taskYIELD();
 8003834:	4b05      	ldr	r3, [pc, #20]	; (800384c <prvIdleTask+0x2c>)
 8003836:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800383a:	601a      	str	r2, [r3, #0]
 800383c:	f3bf 8f4f 	dsb	sy
 8003840:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003844:	e7f0      	b.n	8003828 <prvIdleTask+0x8>
 8003846:	bf00      	nop
 8003848:	200000c8 	.word	0x200000c8
 800384c:	e000ed04 	.word	0xe000ed04

08003850 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003856:	2300      	movs	r3, #0
 8003858:	607b      	str	r3, [r7, #4]
 800385a:	e00c      	b.n	8003876 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	4613      	mov	r3, r2
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	4413      	add	r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	4a12      	ldr	r2, [pc, #72]	; (80038b0 <prvInitialiseTaskLists+0x60>)
 8003868:	4413      	add	r3, r2
 800386a:	4618      	mov	r0, r3
 800386c:	f7fe fd2c 	bl	80022c8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	3301      	adds	r3, #1
 8003874:	607b      	str	r3, [r7, #4]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2b04      	cmp	r3, #4
 800387a:	d9ef      	bls.n	800385c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800387c:	480d      	ldr	r0, [pc, #52]	; (80038b4 <prvInitialiseTaskLists+0x64>)
 800387e:	f7fe fd23 	bl	80022c8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003882:	480d      	ldr	r0, [pc, #52]	; (80038b8 <prvInitialiseTaskLists+0x68>)
 8003884:	f7fe fd20 	bl	80022c8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003888:	480c      	ldr	r0, [pc, #48]	; (80038bc <prvInitialiseTaskLists+0x6c>)
 800388a:	f7fe fd1d 	bl	80022c8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800388e:	480c      	ldr	r0, [pc, #48]	; (80038c0 <prvInitialiseTaskLists+0x70>)
 8003890:	f7fe fd1a 	bl	80022c8 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003894:	480b      	ldr	r0, [pc, #44]	; (80038c4 <prvInitialiseTaskLists+0x74>)
 8003896:	f7fe fd17 	bl	80022c8 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800389a:	4b0b      	ldr	r3, [pc, #44]	; (80038c8 <prvInitialiseTaskLists+0x78>)
 800389c:	4a05      	ldr	r2, [pc, #20]	; (80038b4 <prvInitialiseTaskLists+0x64>)
 800389e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80038a0:	4b0a      	ldr	r3, [pc, #40]	; (80038cc <prvInitialiseTaskLists+0x7c>)
 80038a2:	4a05      	ldr	r2, [pc, #20]	; (80038b8 <prvInitialiseTaskLists+0x68>)
 80038a4:	601a      	str	r2, [r3, #0]
}
 80038a6:	bf00      	nop
 80038a8:	3708      	adds	r7, #8
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	200000c8 	.word	0x200000c8
 80038b4:	2000012c 	.word	0x2000012c
 80038b8:	20000140 	.word	0x20000140
 80038bc:	2000015c 	.word	0x2000015c
 80038c0:	20000170 	.word	0x20000170
 80038c4:	20000188 	.word	0x20000188
 80038c8:	20000154 	.word	0x20000154
 80038cc:	20000158 	.word	0x20000158

080038d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80038d6:	e019      	b.n	800390c <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80038d8:	f000 fd24 	bl	8004324 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038dc:	4b10      	ldr	r3, [pc, #64]	; (8003920 <prvCheckTasksWaitingTermination+0x50>)
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	3304      	adds	r3, #4
 80038e8:	4618      	mov	r0, r3
 80038ea:	f7fe fd53 	bl	8002394 <uxListRemove>
                --uxCurrentNumberOfTasks;
 80038ee:	4b0d      	ldr	r3, [pc, #52]	; (8003924 <prvCheckTasksWaitingTermination+0x54>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	3b01      	subs	r3, #1
 80038f4:	4a0b      	ldr	r2, [pc, #44]	; (8003924 <prvCheckTasksWaitingTermination+0x54>)
 80038f6:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80038f8:	4b0b      	ldr	r3, [pc, #44]	; (8003928 <prvCheckTasksWaitingTermination+0x58>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	3b01      	subs	r3, #1
 80038fe:	4a0a      	ldr	r2, [pc, #40]	; (8003928 <prvCheckTasksWaitingTermination+0x58>)
 8003900:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8003902:	f000 fd3f 	bl	8004384 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 f810 	bl	800392c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800390c:	4b06      	ldr	r3, [pc, #24]	; (8003928 <prvCheckTasksWaitingTermination+0x58>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d1e1      	bne.n	80038d8 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003914:	bf00      	nop
 8003916:	bf00      	nop
 8003918:	3708      	adds	r7, #8
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	20000170 	.word	0x20000170
 8003924:	2000019c 	.word	0x2000019c
 8003928:	20000184 	.word	0x20000184

0800392c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003938:	4618      	mov	r0, r3
 800393a:	f000 fed9 	bl	80046f0 <vPortFree>
            vPortFree( pxTCB );
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 fed6 	bl	80046f0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003944:	bf00      	nop
 8003946:	3708      	adds	r7, #8
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800394c:	b480      	push	{r7}
 800394e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003950:	4b0a      	ldr	r3, [pc, #40]	; (800397c <prvResetNextTaskUnblockTime+0x30>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d104      	bne.n	8003964 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800395a:	4b09      	ldr	r3, [pc, #36]	; (8003980 <prvResetNextTaskUnblockTime+0x34>)
 800395c:	f04f 32ff 	mov.w	r2, #4294967295
 8003960:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003962:	e005      	b.n	8003970 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003964:	4b05      	ldr	r3, [pc, #20]	; (800397c <prvResetNextTaskUnblockTime+0x30>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a04      	ldr	r2, [pc, #16]	; (8003980 <prvResetNextTaskUnblockTime+0x34>)
 800396e:	6013      	str	r3, [r2, #0]
}
 8003970:	bf00      	nop
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr
 800397a:	bf00      	nop
 800397c:	20000154 	.word	0x20000154
 8003980:	200001bc 	.word	0x200001bc

08003984 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800398a:	4b0b      	ldr	r3, [pc, #44]	; (80039b8 <xTaskGetSchedulerState+0x34>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d102      	bne.n	8003998 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003992:	2301      	movs	r3, #1
 8003994:	607b      	str	r3, [r7, #4]
 8003996:	e008      	b.n	80039aa <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003998:	4b08      	ldr	r3, [pc, #32]	; (80039bc <xTaskGetSchedulerState+0x38>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d102      	bne.n	80039a6 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80039a0:	2302      	movs	r3, #2
 80039a2:	607b      	str	r3, [r7, #4]
 80039a4:	e001      	b.n	80039aa <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80039a6:	2300      	movs	r3, #0
 80039a8:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80039aa:	687b      	ldr	r3, [r7, #4]
    }
 80039ac:	4618      	mov	r0, r3
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr
 80039b8:	200001a8 	.word	0x200001a8
 80039bc:	200001c4 	.word	0x200001c4

080039c0 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b086      	sub	sp, #24
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80039ca:	4b36      	ldr	r3, [pc, #216]	; (8003aa4 <prvAddCurrentTaskToDelayedList+0xe4>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80039d0:	4b35      	ldr	r3, [pc, #212]	; (8003aa8 <prvAddCurrentTaskToDelayedList+0xe8>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	3304      	adds	r3, #4
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7fe fcdc 	bl	8002394 <uxListRemove>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d10b      	bne.n	80039fa <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80039e2:	4b31      	ldr	r3, [pc, #196]	; (8003aa8 <prvAddCurrentTaskToDelayedList+0xe8>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e8:	2201      	movs	r2, #1
 80039ea:	fa02 f303 	lsl.w	r3, r2, r3
 80039ee:	43da      	mvns	r2, r3
 80039f0:	4b2e      	ldr	r3, [pc, #184]	; (8003aac <prvAddCurrentTaskToDelayedList+0xec>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4013      	ands	r3, r2
 80039f6:	4a2d      	ldr	r2, [pc, #180]	; (8003aac <prvAddCurrentTaskToDelayedList+0xec>)
 80039f8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a00:	d124      	bne.n	8003a4c <prvAddCurrentTaskToDelayedList+0x8c>
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d021      	beq.n	8003a4c <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a08:	4b29      	ldr	r3, [pc, #164]	; (8003ab0 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	613b      	str	r3, [r7, #16]
 8003a0e:	4b26      	ldr	r3, [pc, #152]	; (8003aa8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	693a      	ldr	r2, [r7, #16]
 8003a14:	609a      	str	r2, [r3, #8]
 8003a16:	4b24      	ldr	r3, [pc, #144]	; (8003aa8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	693a      	ldr	r2, [r7, #16]
 8003a1c:	6892      	ldr	r2, [r2, #8]
 8003a1e:	60da      	str	r2, [r3, #12]
 8003a20:	4b21      	ldr	r3, [pc, #132]	; (8003aa8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	3204      	adds	r2, #4
 8003a2a:	605a      	str	r2, [r3, #4]
 8003a2c:	4b1e      	ldr	r3, [pc, #120]	; (8003aa8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	1d1a      	adds	r2, r3, #4
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	609a      	str	r2, [r3, #8]
 8003a36:	4b1c      	ldr	r3, [pc, #112]	; (8003aa8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a1d      	ldr	r2, [pc, #116]	; (8003ab0 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003a3c:	615a      	str	r2, [r3, #20]
 8003a3e:	4b1c      	ldr	r3, [pc, #112]	; (8003ab0 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	3301      	adds	r3, #1
 8003a44:	4a1a      	ldr	r2, [pc, #104]	; (8003ab0 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003a46:	6013      	str	r3, [r2, #0]
 8003a48:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003a4a:	e026      	b.n	8003a9a <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003a4c:	697a      	ldr	r2, [r7, #20]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4413      	add	r3, r2
 8003a52:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003a54:	4b14      	ldr	r3, [pc, #80]	; (8003aa8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003a5c:	68fa      	ldr	r2, [r7, #12]
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d209      	bcs.n	8003a78 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a64:	4b13      	ldr	r3, [pc, #76]	; (8003ab4 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	4b0f      	ldr	r3, [pc, #60]	; (8003aa8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	3304      	adds	r3, #4
 8003a6e:	4619      	mov	r1, r3
 8003a70:	4610      	mov	r0, r2
 8003a72:	f7fe fc56 	bl	8002322 <vListInsert>
}
 8003a76:	e010      	b.n	8003a9a <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a78:	4b0f      	ldr	r3, [pc, #60]	; (8003ab8 <prvAddCurrentTaskToDelayedList+0xf8>)
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	4b0a      	ldr	r3, [pc, #40]	; (8003aa8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	3304      	adds	r3, #4
 8003a82:	4619      	mov	r1, r3
 8003a84:	4610      	mov	r0, r2
 8003a86:	f7fe fc4c 	bl	8002322 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003a8a:	4b0c      	ldr	r3, [pc, #48]	; (8003abc <prvAddCurrentTaskToDelayedList+0xfc>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	68fa      	ldr	r2, [r7, #12]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d202      	bcs.n	8003a9a <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8003a94:	4a09      	ldr	r2, [pc, #36]	; (8003abc <prvAddCurrentTaskToDelayedList+0xfc>)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6013      	str	r3, [r2, #0]
}
 8003a9a:	bf00      	nop
 8003a9c:	3718      	adds	r7, #24
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	200001a0 	.word	0x200001a0
 8003aa8:	200000c4 	.word	0x200000c4
 8003aac:	200001a4 	.word	0x200001a4
 8003ab0:	20000188 	.word	0x20000188
 8003ab4:	20000158 	.word	0x20000158
 8003ab8:	20000154 	.word	0x20000154
 8003abc:	200001bc 	.word	0x200001bc

08003ac0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003aca:	f000 fa47 	bl	8003f5c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003ace:	4b11      	ldr	r3, [pc, #68]	; (8003b14 <xTimerCreateTimerTask+0x54>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00b      	beq.n	8003aee <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8003ad6:	4b10      	ldr	r3, [pc, #64]	; (8003b18 <xTimerCreateTimerTask+0x58>)
 8003ad8:	9301      	str	r3, [sp, #4]
 8003ada:	2302      	movs	r3, #2
 8003adc:	9300      	str	r3, [sp, #0]
 8003ade:	2300      	movs	r3, #0
 8003ae0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003ae4:	490d      	ldr	r1, [pc, #52]	; (8003b1c <xTimerCreateTimerTask+0x5c>)
 8003ae6:	480e      	ldr	r0, [pc, #56]	; (8003b20 <xTimerCreateTimerTask+0x60>)
 8003ae8:	f7fe ffae 	bl	8002a48 <xTaskCreate>
 8003aec:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d10a      	bne.n	8003b0a <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af8:	f383 8811 	msr	BASEPRI, r3
 8003afc:	f3bf 8f6f 	isb	sy
 8003b00:	f3bf 8f4f 	dsb	sy
 8003b04:	603b      	str	r3, [r7, #0]
    }
 8003b06:	bf00      	nop
 8003b08:	e7fe      	b.n	8003b08 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003b0a:	687b      	ldr	r3, [r7, #4]
    }
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3708      	adds	r7, #8
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	200001f8 	.word	0x200001f8
 8003b18:	200001fc 	.word	0x200001fc
 8003b1c:	08006a84 	.word	0x08006a84
 8003b20:	08003bc9 	.word	0x08003bc9

08003b24 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003b30:	e008      	b.n	8003b44 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	68ba      	ldr	r2, [r7, #8]
 8003b38:	4413      	add	r3, r2
 8003b3a:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6a1b      	ldr	r3, [r3, #32]
 8003b40:	68f8      	ldr	r0, [r7, #12]
 8003b42:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	699a      	ldr	r2, [r3, #24]
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	18d1      	adds	r1, r2, r3
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	68f8      	ldr	r0, [r7, #12]
 8003b52:	f000 f8dd 	bl	8003d10 <prvInsertTimerInActiveList>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d1ea      	bne.n	8003b32 <prvReloadTimer+0xe>
        }
    }
 8003b5c:	bf00      	nop
 8003b5e:	bf00      	nop
 8003b60:	3710      	adds	r7, #16
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
	...

08003b68 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b084      	sub	sp, #16
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b72:	4b14      	ldr	r3, [pc, #80]	; (8003bc4 <prvProcessExpiredTimer+0x5c>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	3304      	adds	r3, #4
 8003b80:	4618      	mov	r0, r3
 8003b82:	f7fe fc07 	bl	8002394 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b8c:	f003 0304 	and.w	r3, r3, #4
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d005      	beq.n	8003ba0 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003b94:	683a      	ldr	r2, [r7, #0]
 8003b96:	6879      	ldr	r1, [r7, #4]
 8003b98:	68f8      	ldr	r0, [r7, #12]
 8003b9a:	f7ff ffc3 	bl	8003b24 <prvReloadTimer>
 8003b9e:	e008      	b.n	8003bb2 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ba6:	f023 0301 	bic.w	r3, r3, #1
 8003baa:	b2da      	uxtb	r2, r3
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6a1b      	ldr	r3, [r3, #32]
 8003bb6:	68f8      	ldr	r0, [r7, #12]
 8003bb8:	4798      	blx	r3
    }
 8003bba:	bf00      	nop
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	200001f0 	.word	0x200001f0

08003bc8 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003bd0:	f107 0308 	add.w	r3, r7, #8
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f000 f857 	bl	8003c88 <prvGetNextExpireTime>
 8003bda:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	4619      	mov	r1, r3
 8003be0:	68f8      	ldr	r0, [r7, #12]
 8003be2:	f000 f803 	bl	8003bec <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003be6:	f000 f8d5 	bl	8003d94 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003bea:	e7f1      	b.n	8003bd0 <prvTimerTask+0x8>

08003bec <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003bf6:	f7ff f993 	bl	8002f20 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003bfa:	f107 0308 	add.w	r3, r7, #8
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f000 f866 	bl	8003cd0 <prvSampleTimeNow>
 8003c04:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d130      	bne.n	8003c6e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d10a      	bne.n	8003c28 <prvProcessTimerOrBlockTask+0x3c>
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d806      	bhi.n	8003c28 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003c1a:	f7ff f98f 	bl	8002f3c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003c1e:	68f9      	ldr	r1, [r7, #12]
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f7ff ffa1 	bl	8003b68 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003c26:	e024      	b.n	8003c72 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d008      	beq.n	8003c40 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003c2e:	4b13      	ldr	r3, [pc, #76]	; (8003c7c <prvProcessTimerOrBlockTask+0x90>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d101      	bne.n	8003c3c <prvProcessTimerOrBlockTask+0x50>
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e000      	b.n	8003c3e <prvProcessTimerOrBlockTask+0x52>
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003c40:	4b0f      	ldr	r3, [pc, #60]	; (8003c80 <prvProcessTimerOrBlockTask+0x94>)
 8003c42:	6818      	ldr	r0, [r3, #0]
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	683a      	ldr	r2, [r7, #0]
 8003c4c:	4619      	mov	r1, r3
 8003c4e:	f7fe fec7 	bl	80029e0 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003c52:	f7ff f973 	bl	8002f3c <xTaskResumeAll>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d10a      	bne.n	8003c72 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003c5c:	4b09      	ldr	r3, [pc, #36]	; (8003c84 <prvProcessTimerOrBlockTask+0x98>)
 8003c5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c62:	601a      	str	r2, [r3, #0]
 8003c64:	f3bf 8f4f 	dsb	sy
 8003c68:	f3bf 8f6f 	isb	sy
    }
 8003c6c:	e001      	b.n	8003c72 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003c6e:	f7ff f965 	bl	8002f3c <xTaskResumeAll>
    }
 8003c72:	bf00      	nop
 8003c74:	3710      	adds	r7, #16
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	200001f4 	.word	0x200001f4
 8003c80:	200001f8 	.word	0x200001f8
 8003c84:	e000ed04 	.word	0xe000ed04

08003c88 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003c88:	b480      	push	{r7}
 8003c8a:	b085      	sub	sp, #20
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003c90:	4b0e      	ldr	r3, [pc, #56]	; (8003ccc <prvGetNextExpireTime+0x44>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d101      	bne.n	8003c9e <prvGetNextExpireTime+0x16>
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	e000      	b.n	8003ca0 <prvGetNextExpireTime+0x18>
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d105      	bne.n	8003cb8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003cac:	4b07      	ldr	r3, [pc, #28]	; (8003ccc <prvGetNextExpireTime+0x44>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	60fb      	str	r3, [r7, #12]
 8003cb6:	e001      	b.n	8003cbc <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
    }
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3714      	adds	r7, #20
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop
 8003ccc:	200001f0 	.word	0x200001f0

08003cd0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003cd8:	f7ff fa30 	bl	800313c <xTaskGetTickCount>
 8003cdc:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003cde:	4b0b      	ldr	r3, [pc, #44]	; (8003d0c <prvSampleTimeNow+0x3c>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d205      	bcs.n	8003cf4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003ce8:	f000 f912 	bl	8003f10 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	601a      	str	r2, [r3, #0]
 8003cf2:	e002      	b.n	8003cfa <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003cfa:	4a04      	ldr	r2, [pc, #16]	; (8003d0c <prvSampleTimeNow+0x3c>)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003d00:	68fb      	ldr	r3, [r7, #12]
    }
 8003d02:	4618      	mov	r0, r3
 8003d04:	3710      	adds	r7, #16
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	20000200 	.word	0x20000200

08003d10 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b086      	sub	sp, #24
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	607a      	str	r2, [r7, #4]
 8003d1c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	68ba      	ldr	r2, [r7, #8]
 8003d26:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	68fa      	ldr	r2, [r7, #12]
 8003d2c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003d2e:	68ba      	ldr	r2, [r7, #8]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d812      	bhi.n	8003d5c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	1ad2      	subs	r2, r2, r3
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	699b      	ldr	r3, [r3, #24]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d302      	bcc.n	8003d4a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003d44:	2301      	movs	r3, #1
 8003d46:	617b      	str	r3, [r7, #20]
 8003d48:	e01b      	b.n	8003d82 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003d4a:	4b10      	ldr	r3, [pc, #64]	; (8003d8c <prvInsertTimerInActiveList+0x7c>)
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	3304      	adds	r3, #4
 8003d52:	4619      	mov	r1, r3
 8003d54:	4610      	mov	r0, r2
 8003d56:	f7fe fae4 	bl	8002322 <vListInsert>
 8003d5a:	e012      	b.n	8003d82 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d206      	bcs.n	8003d72 <prvInsertTimerInActiveList+0x62>
 8003d64:	68ba      	ldr	r2, [r7, #8]
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d302      	bcc.n	8003d72 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	617b      	str	r3, [r7, #20]
 8003d70:	e007      	b.n	8003d82 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003d72:	4b07      	ldr	r3, [pc, #28]	; (8003d90 <prvInsertTimerInActiveList+0x80>)
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	3304      	adds	r3, #4
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	4610      	mov	r0, r2
 8003d7e:	f7fe fad0 	bl	8002322 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003d82:	697b      	ldr	r3, [r7, #20]
    }
 8003d84:	4618      	mov	r0, r3
 8003d86:	3718      	adds	r7, #24
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	200001f4 	.word	0x200001f4
 8003d90:	200001f0 	.word	0x200001f0

08003d94 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b088      	sub	sp, #32
 8003d98:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003d9a:	e0a6      	b.n	8003eea <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	f2c0 80a3 	blt.w	8003eea <prvProcessReceivedCommands+0x156>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	695b      	ldr	r3, [r3, #20]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d004      	beq.n	8003dba <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	3304      	adds	r3, #4
 8003db4:	4618      	mov	r0, r3
 8003db6:	f7fe faed 	bl	8002394 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003dba:	1d3b      	adds	r3, r7, #4
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f7ff ff87 	bl	8003cd0 <prvSampleTimeNow>
 8003dc2:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	3b01      	subs	r3, #1
 8003dc8:	2b08      	cmp	r3, #8
 8003dca:	f200 808d 	bhi.w	8003ee8 <prvProcessReceivedCommands+0x154>
 8003dce:	a201      	add	r2, pc, #4	; (adr r2, 8003dd4 <prvProcessReceivedCommands+0x40>)
 8003dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dd4:	08003df9 	.word	0x08003df9
 8003dd8:	08003df9 	.word	0x08003df9
 8003ddc:	08003e61 	.word	0x08003e61
 8003de0:	08003e75 	.word	0x08003e75
 8003de4:	08003ebf 	.word	0x08003ebf
 8003de8:	08003df9 	.word	0x08003df9
 8003dec:	08003df9 	.word	0x08003df9
 8003df0:	08003e61 	.word	0x08003e61
 8003df4:	08003e75 	.word	0x08003e75
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003dfe:	f043 0301 	orr.w	r3, r3, #1
 8003e02:	b2da      	uxtb	r2, r3
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	699b      	ldr	r3, [r3, #24]
 8003e10:	18d1      	adds	r1, r2, r3
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	69ba      	ldr	r2, [r7, #24]
 8003e16:	69f8      	ldr	r0, [r7, #28]
 8003e18:	f7ff ff7a 	bl	8003d10 <prvInsertTimerInActiveList>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d063      	beq.n	8003eea <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e28:	f003 0304 	and.w	r3, r3, #4
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d009      	beq.n	8003e44 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003e30:	68fa      	ldr	r2, [r7, #12]
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	4413      	add	r3, r2
 8003e38:	69ba      	ldr	r2, [r7, #24]
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	69f8      	ldr	r0, [r7, #28]
 8003e3e:	f7ff fe71 	bl	8003b24 <prvReloadTimer>
 8003e42:	e008      	b.n	8003e56 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e4a:	f023 0301 	bic.w	r3, r3, #1
 8003e4e:	b2da      	uxtb	r2, r3
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	6a1b      	ldr	r3, [r3, #32]
 8003e5a:	69f8      	ldr	r0, [r7, #28]
 8003e5c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003e5e:	e044      	b.n	8003eea <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e66:	f023 0301 	bic.w	r3, r3, #1
 8003e6a:	b2da      	uxtb	r2, r3
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003e72:	e03a      	b.n	8003eea <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e7a:	f043 0301 	orr.w	r3, r3, #1
 8003e7e:	b2da      	uxtb	r2, r3
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003e86:	68fa      	ldr	r2, [r7, #12]
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	699b      	ldr	r3, [r3, #24]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d10a      	bne.n	8003eaa <prvProcessReceivedCommands+0x116>
        __asm volatile
 8003e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e98:	f383 8811 	msr	BASEPRI, r3
 8003e9c:	f3bf 8f6f 	isb	sy
 8003ea0:	f3bf 8f4f 	dsb	sy
 8003ea4:	617b      	str	r3, [r7, #20]
    }
 8003ea6:	bf00      	nop
 8003ea8:	e7fe      	b.n	8003ea8 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	699a      	ldr	r2, [r3, #24]
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	18d1      	adds	r1, r2, r3
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	69ba      	ldr	r2, [r7, #24]
 8003eb6:	69f8      	ldr	r0, [r7, #28]
 8003eb8:	f7ff ff2a 	bl	8003d10 <prvInsertTimerInActiveList>
                        break;
 8003ebc:	e015      	b.n	8003eea <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ec4:	f003 0302 	and.w	r3, r3, #2
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d103      	bne.n	8003ed4 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8003ecc:	69f8      	ldr	r0, [r7, #28]
 8003ece:	f000 fc0f 	bl	80046f0 <vPortFree>
 8003ed2:	e00a      	b.n	8003eea <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003eda:	f023 0301 	bic.w	r3, r3, #1
 8003ede:	b2da      	uxtb	r2, r3
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003ee6:	e000      	b.n	8003eea <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
 8003ee8:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003eea:	4b08      	ldr	r3, [pc, #32]	; (8003f0c <prvProcessReceivedCommands+0x178>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f107 0108 	add.w	r1, r7, #8
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f7fe fb7f 	bl	80025f8 <xQueueReceive>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	f47f af4d 	bne.w	8003d9c <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8003f02:	bf00      	nop
 8003f04:	bf00      	nop
 8003f06:	3720      	adds	r7, #32
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	200001f8 	.word	0x200001f8

08003f10 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003f16:	e009      	b.n	8003f2c <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f18:	4b0e      	ldr	r3, [pc, #56]	; (8003f54 <prvSwitchTimerLists+0x44>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003f22:	f04f 31ff 	mov.w	r1, #4294967295
 8003f26:	6838      	ldr	r0, [r7, #0]
 8003f28:	f7ff fe1e 	bl	8003b68 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003f2c:	4b09      	ldr	r3, [pc, #36]	; (8003f54 <prvSwitchTimerLists+0x44>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d1f0      	bne.n	8003f18 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003f36:	4b07      	ldr	r3, [pc, #28]	; (8003f54 <prvSwitchTimerLists+0x44>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003f3c:	4b06      	ldr	r3, [pc, #24]	; (8003f58 <prvSwitchTimerLists+0x48>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a04      	ldr	r2, [pc, #16]	; (8003f54 <prvSwitchTimerLists+0x44>)
 8003f42:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003f44:	4a04      	ldr	r2, [pc, #16]	; (8003f58 <prvSwitchTimerLists+0x48>)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6013      	str	r3, [r2, #0]
    }
 8003f4a:	bf00      	nop
 8003f4c:	3708      	adds	r7, #8
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	200001f0 	.word	0x200001f0
 8003f58:	200001f4 	.word	0x200001f4

08003f5c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003f60:	f000 f9e0 	bl	8004324 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003f64:	4b12      	ldr	r3, [pc, #72]	; (8003fb0 <prvCheckForValidListAndQueue+0x54>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d11d      	bne.n	8003fa8 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003f6c:	4811      	ldr	r0, [pc, #68]	; (8003fb4 <prvCheckForValidListAndQueue+0x58>)
 8003f6e:	f7fe f9ab 	bl	80022c8 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003f72:	4811      	ldr	r0, [pc, #68]	; (8003fb8 <prvCheckForValidListAndQueue+0x5c>)
 8003f74:	f7fe f9a8 	bl	80022c8 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003f78:	4b10      	ldr	r3, [pc, #64]	; (8003fbc <prvCheckForValidListAndQueue+0x60>)
 8003f7a:	4a0e      	ldr	r2, [pc, #56]	; (8003fb4 <prvCheckForValidListAndQueue+0x58>)
 8003f7c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003f7e:	4b10      	ldr	r3, [pc, #64]	; (8003fc0 <prvCheckForValidListAndQueue+0x64>)
 8003f80:	4a0d      	ldr	r2, [pc, #52]	; (8003fb8 <prvCheckForValidListAndQueue+0x5c>)
 8003f82:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003f84:	2200      	movs	r2, #0
 8003f86:	210c      	movs	r1, #12
 8003f88:	200a      	movs	r0, #10
 8003f8a:	f7fe fabd 	bl	8002508 <xQueueGenericCreate>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	4a07      	ldr	r2, [pc, #28]	; (8003fb0 <prvCheckForValidListAndQueue+0x54>)
 8003f92:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8003f94:	4b06      	ldr	r3, [pc, #24]	; (8003fb0 <prvCheckForValidListAndQueue+0x54>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d005      	beq.n	8003fa8 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003f9c:	4b04      	ldr	r3, [pc, #16]	; (8003fb0 <prvCheckForValidListAndQueue+0x54>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4908      	ldr	r1, [pc, #32]	; (8003fc4 <prvCheckForValidListAndQueue+0x68>)
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f7fe fcc6 	bl	8002934 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003fa8:	f000 f9ec 	bl	8004384 <vPortExitCritical>
    }
 8003fac:	bf00      	nop
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	200001f8 	.word	0x200001f8
 8003fb4:	200001c8 	.word	0x200001c8
 8003fb8:	200001dc 	.word	0x200001dc
 8003fbc:	200001f0 	.word	0x200001f0
 8003fc0:	200001f4 	.word	0x200001f4
 8003fc4:	08006a8c 	.word	0x08006a8c

08003fc8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b085      	sub	sp, #20
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	60b9      	str	r1, [r7, #8]
 8003fd2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	3b04      	subs	r3, #4
 8003fd8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003fe0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	3b04      	subs	r3, #4
 8003fe6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	f023 0201 	bic.w	r2, r3, #1
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	3b04      	subs	r3, #4
 8003ff6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003ff8:	4a0c      	ldr	r2, [pc, #48]	; (800402c <pxPortInitialiseStack+0x64>)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	3b14      	subs	r3, #20
 8004002:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	3b04      	subs	r3, #4
 800400e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f06f 0202 	mvn.w	r2, #2
 8004016:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	3b20      	subs	r3, #32
 800401c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800401e:	68fb      	ldr	r3, [r7, #12]
}
 8004020:	4618      	mov	r0, r3
 8004022:	3714      	adds	r7, #20
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr
 800402c:	08004031 	.word	0x08004031

08004030 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004030:	b480      	push	{r7}
 8004032:	b085      	sub	sp, #20
 8004034:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004036:	2300      	movs	r3, #0
 8004038:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800403a:	4b12      	ldr	r3, [pc, #72]	; (8004084 <prvTaskExitError+0x54>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004042:	d00a      	beq.n	800405a <prvTaskExitError+0x2a>
        __asm volatile
 8004044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004048:	f383 8811 	msr	BASEPRI, r3
 800404c:	f3bf 8f6f 	isb	sy
 8004050:	f3bf 8f4f 	dsb	sy
 8004054:	60fb      	str	r3, [r7, #12]
    }
 8004056:	bf00      	nop
 8004058:	e7fe      	b.n	8004058 <prvTaskExitError+0x28>
        __asm volatile
 800405a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800405e:	f383 8811 	msr	BASEPRI, r3
 8004062:	f3bf 8f6f 	isb	sy
 8004066:	f3bf 8f4f 	dsb	sy
 800406a:	60bb      	str	r3, [r7, #8]
    }
 800406c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800406e:	bf00      	nop
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d0fc      	beq.n	8004070 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004076:	bf00      	nop
 8004078:	bf00      	nop
 800407a:	3714      	adds	r7, #20
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr
 8004084:	20000010 	.word	0x20000010
	...

08004090 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004090:	4b07      	ldr	r3, [pc, #28]	; (80040b0 <pxCurrentTCBConst2>)
 8004092:	6819      	ldr	r1, [r3, #0]
 8004094:	6808      	ldr	r0, [r1, #0]
 8004096:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800409a:	f380 8809 	msr	PSP, r0
 800409e:	f3bf 8f6f 	isb	sy
 80040a2:	f04f 0000 	mov.w	r0, #0
 80040a6:	f380 8811 	msr	BASEPRI, r0
 80040aa:	4770      	bx	lr
 80040ac:	f3af 8000 	nop.w

080040b0 <pxCurrentTCBConst2>:
 80040b0:	200000c4 	.word	0x200000c4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80040b4:	bf00      	nop
 80040b6:	bf00      	nop

080040b8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80040b8:	4808      	ldr	r0, [pc, #32]	; (80040dc <prvPortStartFirstTask+0x24>)
 80040ba:	6800      	ldr	r0, [r0, #0]
 80040bc:	6800      	ldr	r0, [r0, #0]
 80040be:	f380 8808 	msr	MSP, r0
 80040c2:	f04f 0000 	mov.w	r0, #0
 80040c6:	f380 8814 	msr	CONTROL, r0
 80040ca:	b662      	cpsie	i
 80040cc:	b661      	cpsie	f
 80040ce:	f3bf 8f4f 	dsb	sy
 80040d2:	f3bf 8f6f 	isb	sy
 80040d6:	df00      	svc	0
 80040d8:	bf00      	nop
 80040da:	0000      	.short	0x0000
 80040dc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80040e0:	bf00      	nop
 80040e2:	bf00      	nop

080040e4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b086      	sub	sp, #24
 80040e8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80040ea:	4b46      	ldr	r3, [pc, #280]	; (8004204 <xPortStartScheduler+0x120>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a46      	ldr	r2, [pc, #280]	; (8004208 <xPortStartScheduler+0x124>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d10a      	bne.n	800410a <xPortStartScheduler+0x26>
        __asm volatile
 80040f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f8:	f383 8811 	msr	BASEPRI, r3
 80040fc:	f3bf 8f6f 	isb	sy
 8004100:	f3bf 8f4f 	dsb	sy
 8004104:	613b      	str	r3, [r7, #16]
    }
 8004106:	bf00      	nop
 8004108:	e7fe      	b.n	8004108 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800410a:	4b3e      	ldr	r3, [pc, #248]	; (8004204 <xPortStartScheduler+0x120>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a3f      	ldr	r2, [pc, #252]	; (800420c <xPortStartScheduler+0x128>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d10a      	bne.n	800412a <xPortStartScheduler+0x46>
        __asm volatile
 8004114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004118:	f383 8811 	msr	BASEPRI, r3
 800411c:	f3bf 8f6f 	isb	sy
 8004120:	f3bf 8f4f 	dsb	sy
 8004124:	60fb      	str	r3, [r7, #12]
    }
 8004126:	bf00      	nop
 8004128:	e7fe      	b.n	8004128 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800412a:	4b39      	ldr	r3, [pc, #228]	; (8004210 <xPortStartScheduler+0x12c>)
 800412c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	b2db      	uxtb	r3, r3
 8004134:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	22ff      	movs	r2, #255	; 0xff
 800413a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	b2db      	uxtb	r3, r3
 8004142:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004144:	78fb      	ldrb	r3, [r7, #3]
 8004146:	b2db      	uxtb	r3, r3
 8004148:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800414c:	b2da      	uxtb	r2, r3
 800414e:	4b31      	ldr	r3, [pc, #196]	; (8004214 <xPortStartScheduler+0x130>)
 8004150:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004152:	4b31      	ldr	r3, [pc, #196]	; (8004218 <xPortStartScheduler+0x134>)
 8004154:	2207      	movs	r2, #7
 8004156:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004158:	e009      	b.n	800416e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 800415a:	4b2f      	ldr	r3, [pc, #188]	; (8004218 <xPortStartScheduler+0x134>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	3b01      	subs	r3, #1
 8004160:	4a2d      	ldr	r2, [pc, #180]	; (8004218 <xPortStartScheduler+0x134>)
 8004162:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004164:	78fb      	ldrb	r3, [r7, #3]
 8004166:	b2db      	uxtb	r3, r3
 8004168:	005b      	lsls	r3, r3, #1
 800416a:	b2db      	uxtb	r3, r3
 800416c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800416e:	78fb      	ldrb	r3, [r7, #3]
 8004170:	b2db      	uxtb	r3, r3
 8004172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004176:	2b80      	cmp	r3, #128	; 0x80
 8004178:	d0ef      	beq.n	800415a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800417a:	4b27      	ldr	r3, [pc, #156]	; (8004218 <xPortStartScheduler+0x134>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f1c3 0307 	rsb	r3, r3, #7
 8004182:	2b04      	cmp	r3, #4
 8004184:	d00a      	beq.n	800419c <xPortStartScheduler+0xb8>
        __asm volatile
 8004186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800418a:	f383 8811 	msr	BASEPRI, r3
 800418e:	f3bf 8f6f 	isb	sy
 8004192:	f3bf 8f4f 	dsb	sy
 8004196:	60bb      	str	r3, [r7, #8]
    }
 8004198:	bf00      	nop
 800419a:	e7fe      	b.n	800419a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800419c:	4b1e      	ldr	r3, [pc, #120]	; (8004218 <xPortStartScheduler+0x134>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	021b      	lsls	r3, r3, #8
 80041a2:	4a1d      	ldr	r2, [pc, #116]	; (8004218 <xPortStartScheduler+0x134>)
 80041a4:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80041a6:	4b1c      	ldr	r3, [pc, #112]	; (8004218 <xPortStartScheduler+0x134>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80041ae:	4a1a      	ldr	r2, [pc, #104]	; (8004218 <xPortStartScheduler+0x134>)
 80041b0:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	b2da      	uxtb	r2, r3
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80041ba:	4b18      	ldr	r3, [pc, #96]	; (800421c <xPortStartScheduler+0x138>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a17      	ldr	r2, [pc, #92]	; (800421c <xPortStartScheduler+0x138>)
 80041c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80041c4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80041c6:	4b15      	ldr	r3, [pc, #84]	; (800421c <xPortStartScheduler+0x138>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a14      	ldr	r2, [pc, #80]	; (800421c <xPortStartScheduler+0x138>)
 80041cc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80041d0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80041d2:	f000 f963 	bl	800449c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80041d6:	4b12      	ldr	r3, [pc, #72]	; (8004220 <xPortStartScheduler+0x13c>)
 80041d8:	2200      	movs	r2, #0
 80041da:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80041dc:	f000 f982 	bl	80044e4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80041e0:	4b10      	ldr	r3, [pc, #64]	; (8004224 <xPortStartScheduler+0x140>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a0f      	ldr	r2, [pc, #60]	; (8004224 <xPortStartScheduler+0x140>)
 80041e6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80041ea:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80041ec:	f7ff ff64 	bl	80040b8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80041f0:	f7ff f8e0 	bl	80033b4 <vTaskSwitchContext>
    prvTaskExitError();
 80041f4:	f7ff ff1c 	bl	8004030 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3718      	adds	r7, #24
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	e000ed00 	.word	0xe000ed00
 8004208:	410fc271 	.word	0x410fc271
 800420c:	410fc270 	.word	0x410fc270
 8004210:	e000e400 	.word	0xe000e400
 8004214:	20000204 	.word	0x20000204
 8004218:	20000208 	.word	0x20000208
 800421c:	e000ed20 	.word	0xe000ed20
 8004220:	20000010 	.word	0x20000010
 8004224:	e000ef34 	.word	0xe000ef34

08004228 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8004228:	b480      	push	{r7}
 800422a:	b087      	sub	sp, #28
 800422c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800422e:	4b37      	ldr	r3, [pc, #220]	; (800430c <vInitPrioGroupValue+0xe4>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a37      	ldr	r2, [pc, #220]	; (8004310 <vInitPrioGroupValue+0xe8>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d10a      	bne.n	800424e <vInitPrioGroupValue+0x26>
        __asm volatile
 8004238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800423c:	f383 8811 	msr	BASEPRI, r3
 8004240:	f3bf 8f6f 	isb	sy
 8004244:	f3bf 8f4f 	dsb	sy
 8004248:	613b      	str	r3, [r7, #16]
    }
 800424a:	bf00      	nop
 800424c:	e7fe      	b.n	800424c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800424e:	4b2f      	ldr	r3, [pc, #188]	; (800430c <vInitPrioGroupValue+0xe4>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a30      	ldr	r2, [pc, #192]	; (8004314 <vInitPrioGroupValue+0xec>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d10a      	bne.n	800426e <vInitPrioGroupValue+0x46>
        __asm volatile
 8004258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800425c:	f383 8811 	msr	BASEPRI, r3
 8004260:	f3bf 8f6f 	isb	sy
 8004264:	f3bf 8f4f 	dsb	sy
 8004268:	60fb      	str	r3, [r7, #12]
    }
 800426a:	bf00      	nop
 800426c:	e7fe      	b.n	800426c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800426e:	4b2a      	ldr	r3, [pc, #168]	; (8004318 <vInitPrioGroupValue+0xf0>)
 8004270:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	b2db      	uxtb	r3, r3
 8004278:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	22ff      	movs	r2, #255	; 0xff
 800427e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	b2db      	uxtb	r3, r3
 8004286:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004288:	78fb      	ldrb	r3, [r7, #3]
 800428a:	b2db      	uxtb	r3, r3
 800428c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004290:	b2da      	uxtb	r2, r3
 8004292:	4b22      	ldr	r3, [pc, #136]	; (800431c <vInitPrioGroupValue+0xf4>)
 8004294:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004296:	4b22      	ldr	r3, [pc, #136]	; (8004320 <vInitPrioGroupValue+0xf8>)
 8004298:	2207      	movs	r2, #7
 800429a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800429c:	e009      	b.n	80042b2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800429e:	4b20      	ldr	r3, [pc, #128]	; (8004320 <vInitPrioGroupValue+0xf8>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	3b01      	subs	r3, #1
 80042a4:	4a1e      	ldr	r2, [pc, #120]	; (8004320 <vInitPrioGroupValue+0xf8>)
 80042a6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80042a8:	78fb      	ldrb	r3, [r7, #3]
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	005b      	lsls	r3, r3, #1
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80042b2:	78fb      	ldrb	r3, [r7, #3]
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ba:	2b80      	cmp	r3, #128	; 0x80
 80042bc:	d0ef      	beq.n	800429e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80042be:	4b18      	ldr	r3, [pc, #96]	; (8004320 <vInitPrioGroupValue+0xf8>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f1c3 0307 	rsb	r3, r3, #7
 80042c6:	2b04      	cmp	r3, #4
 80042c8:	d00a      	beq.n	80042e0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 80042ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ce:	f383 8811 	msr	BASEPRI, r3
 80042d2:	f3bf 8f6f 	isb	sy
 80042d6:	f3bf 8f4f 	dsb	sy
 80042da:	60bb      	str	r3, [r7, #8]
    }
 80042dc:	bf00      	nop
 80042de:	e7fe      	b.n	80042de <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80042e0:	4b0f      	ldr	r3, [pc, #60]	; (8004320 <vInitPrioGroupValue+0xf8>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	021b      	lsls	r3, r3, #8
 80042e6:	4a0e      	ldr	r2, [pc, #56]	; (8004320 <vInitPrioGroupValue+0xf8>)
 80042e8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80042ea:	4b0d      	ldr	r3, [pc, #52]	; (8004320 <vInitPrioGroupValue+0xf8>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80042f2:	4a0b      	ldr	r2, [pc, #44]	; (8004320 <vInitPrioGroupValue+0xf8>)
 80042f4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	b2da      	uxtb	r2, r3
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80042fe:	bf00      	nop
 8004300:	371c      	adds	r7, #28
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	e000ed00 	.word	0xe000ed00
 8004310:	410fc271 	.word	0x410fc271
 8004314:	410fc270 	.word	0x410fc270
 8004318:	e000e400 	.word	0xe000e400
 800431c:	20000204 	.word	0x20000204
 8004320:	20000208 	.word	0x20000208

08004324 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
        __asm volatile
 800432a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800432e:	f383 8811 	msr	BASEPRI, r3
 8004332:	f3bf 8f6f 	isb	sy
 8004336:	f3bf 8f4f 	dsb	sy
 800433a:	607b      	str	r3, [r7, #4]
    }
 800433c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800433e:	4b0f      	ldr	r3, [pc, #60]	; (800437c <vPortEnterCritical+0x58>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	3301      	adds	r3, #1
 8004344:	4a0d      	ldr	r2, [pc, #52]	; (800437c <vPortEnterCritical+0x58>)
 8004346:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004348:	4b0c      	ldr	r3, [pc, #48]	; (800437c <vPortEnterCritical+0x58>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2b01      	cmp	r3, #1
 800434e:	d10f      	bne.n	8004370 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004350:	4b0b      	ldr	r3, [pc, #44]	; (8004380 <vPortEnterCritical+0x5c>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	b2db      	uxtb	r3, r3
 8004356:	2b00      	cmp	r3, #0
 8004358:	d00a      	beq.n	8004370 <vPortEnterCritical+0x4c>
        __asm volatile
 800435a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800435e:	f383 8811 	msr	BASEPRI, r3
 8004362:	f3bf 8f6f 	isb	sy
 8004366:	f3bf 8f4f 	dsb	sy
 800436a:	603b      	str	r3, [r7, #0]
    }
 800436c:	bf00      	nop
 800436e:	e7fe      	b.n	800436e <vPortEnterCritical+0x4a>
    }
}
 8004370:	bf00      	nop
 8004372:	370c      	adds	r7, #12
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr
 800437c:	20000010 	.word	0x20000010
 8004380:	e000ed04 	.word	0xe000ed04

08004384 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800438a:	4b12      	ldr	r3, [pc, #72]	; (80043d4 <vPortExitCritical+0x50>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d10a      	bne.n	80043a8 <vPortExitCritical+0x24>
        __asm volatile
 8004392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004396:	f383 8811 	msr	BASEPRI, r3
 800439a:	f3bf 8f6f 	isb	sy
 800439e:	f3bf 8f4f 	dsb	sy
 80043a2:	607b      	str	r3, [r7, #4]
    }
 80043a4:	bf00      	nop
 80043a6:	e7fe      	b.n	80043a6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80043a8:	4b0a      	ldr	r3, [pc, #40]	; (80043d4 <vPortExitCritical+0x50>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	3b01      	subs	r3, #1
 80043ae:	4a09      	ldr	r2, [pc, #36]	; (80043d4 <vPortExitCritical+0x50>)
 80043b0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80043b2:	4b08      	ldr	r3, [pc, #32]	; (80043d4 <vPortExitCritical+0x50>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d105      	bne.n	80043c6 <vPortExitCritical+0x42>
 80043ba:	2300      	movs	r3, #0
 80043bc:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80043c4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80043c6:	bf00      	nop
 80043c8:	370c      	adds	r7, #12
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	20000010 	.word	0x20000010
	...

080043e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80043e0:	f3ef 8009 	mrs	r0, PSP
 80043e4:	f3bf 8f6f 	isb	sy
 80043e8:	4b15      	ldr	r3, [pc, #84]	; (8004440 <pxCurrentTCBConst>)
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	f01e 0f10 	tst.w	lr, #16
 80043f0:	bf08      	it	eq
 80043f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80043f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043fa:	6010      	str	r0, [r2, #0]
 80043fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004400:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004404:	f380 8811 	msr	BASEPRI, r0
 8004408:	f3bf 8f4f 	dsb	sy
 800440c:	f3bf 8f6f 	isb	sy
 8004410:	f7fe ffd0 	bl	80033b4 <vTaskSwitchContext>
 8004414:	f04f 0000 	mov.w	r0, #0
 8004418:	f380 8811 	msr	BASEPRI, r0
 800441c:	bc09      	pop	{r0, r3}
 800441e:	6819      	ldr	r1, [r3, #0]
 8004420:	6808      	ldr	r0, [r1, #0]
 8004422:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004426:	f01e 0f10 	tst.w	lr, #16
 800442a:	bf08      	it	eq
 800442c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004430:	f380 8809 	msr	PSP, r0
 8004434:	f3bf 8f6f 	isb	sy
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	f3af 8000 	nop.w

08004440 <pxCurrentTCBConst>:
 8004440:	200000c4 	.word	0x200000c4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004444:	bf00      	nop
 8004446:	bf00      	nop

08004448 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b082      	sub	sp, #8
 800444c:	af00      	add	r7, sp, #0
        __asm volatile
 800444e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004452:	f383 8811 	msr	BASEPRI, r3
 8004456:	f3bf 8f6f 	isb	sy
 800445a:	f3bf 8f4f 	dsb	sy
 800445e:	607b      	str	r3, [r7, #4]
    }
 8004460:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004462:	f001 ffb7 	bl	80063d4 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004466:	f7fe fe8b 	bl	8003180 <xTaskIncrementTick>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d006      	beq.n	800447e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004470:	f002 f80e 	bl	8006490 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004474:	4b08      	ldr	r3, [pc, #32]	; (8004498 <SysTick_Handler+0x50>)
 8004476:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800447a:	601a      	str	r2, [r3, #0]
 800447c:	e001      	b.n	8004482 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800447e:	f001 ffeb 	bl	8006458 <SEGGER_SYSVIEW_RecordExitISR>
 8004482:	2300      	movs	r3, #0
 8004484:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	f383 8811 	msr	BASEPRI, r3
    }
 800448c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800448e:	bf00      	nop
 8004490:	3708      	adds	r7, #8
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	e000ed04 	.word	0xe000ed04

0800449c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800449c:	b480      	push	{r7}
 800449e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80044a0:	4b0b      	ldr	r3, [pc, #44]	; (80044d0 <vPortSetupTimerInterrupt+0x34>)
 80044a2:	2200      	movs	r2, #0
 80044a4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80044a6:	4b0b      	ldr	r3, [pc, #44]	; (80044d4 <vPortSetupTimerInterrupt+0x38>)
 80044a8:	2200      	movs	r2, #0
 80044aa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80044ac:	4b0a      	ldr	r3, [pc, #40]	; (80044d8 <vPortSetupTimerInterrupt+0x3c>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a0a      	ldr	r2, [pc, #40]	; (80044dc <vPortSetupTimerInterrupt+0x40>)
 80044b2:	fba2 2303 	umull	r2, r3, r2, r3
 80044b6:	099b      	lsrs	r3, r3, #6
 80044b8:	4a09      	ldr	r2, [pc, #36]	; (80044e0 <vPortSetupTimerInterrupt+0x44>)
 80044ba:	3b01      	subs	r3, #1
 80044bc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80044be:	4b04      	ldr	r3, [pc, #16]	; (80044d0 <vPortSetupTimerInterrupt+0x34>)
 80044c0:	2207      	movs	r2, #7
 80044c2:	601a      	str	r2, [r3, #0]
}
 80044c4:	bf00      	nop
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop
 80044d0:	e000e010 	.word	0xe000e010
 80044d4:	e000e018 	.word	0xe000e018
 80044d8:	20000000 	.word	0x20000000
 80044dc:	10624dd3 	.word	0x10624dd3
 80044e0:	e000e014 	.word	0xe000e014

080044e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80044e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80044f4 <vPortEnableVFP+0x10>
 80044e8:	6801      	ldr	r1, [r0, #0]
 80044ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80044ee:	6001      	str	r1, [r0, #0]
 80044f0:	4770      	bx	lr
 80044f2:	0000      	.short	0x0000
 80044f4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80044f8:	bf00      	nop
 80044fa:	bf00      	nop

080044fc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80044fc:	b480      	push	{r7}
 80044fe:	b085      	sub	sp, #20
 8004500:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004502:	f3ef 8305 	mrs	r3, IPSR
 8004506:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2b0f      	cmp	r3, #15
 800450c:	d914      	bls.n	8004538 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800450e:	4a17      	ldr	r2, [pc, #92]	; (800456c <vPortValidateInterruptPriority+0x70>)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	4413      	add	r3, r2
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004518:	4b15      	ldr	r3, [pc, #84]	; (8004570 <vPortValidateInterruptPriority+0x74>)
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	7afa      	ldrb	r2, [r7, #11]
 800451e:	429a      	cmp	r2, r3
 8004520:	d20a      	bcs.n	8004538 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004526:	f383 8811 	msr	BASEPRI, r3
 800452a:	f3bf 8f6f 	isb	sy
 800452e:	f3bf 8f4f 	dsb	sy
 8004532:	607b      	str	r3, [r7, #4]
    }
 8004534:	bf00      	nop
 8004536:	e7fe      	b.n	8004536 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004538:	4b0e      	ldr	r3, [pc, #56]	; (8004574 <vPortValidateInterruptPriority+0x78>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004540:	4b0d      	ldr	r3, [pc, #52]	; (8004578 <vPortValidateInterruptPriority+0x7c>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	429a      	cmp	r2, r3
 8004546:	d90a      	bls.n	800455e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800454c:	f383 8811 	msr	BASEPRI, r3
 8004550:	f3bf 8f6f 	isb	sy
 8004554:	f3bf 8f4f 	dsb	sy
 8004558:	603b      	str	r3, [r7, #0]
    }
 800455a:	bf00      	nop
 800455c:	e7fe      	b.n	800455c <vPortValidateInterruptPriority+0x60>
    }
 800455e:	bf00      	nop
 8004560:	3714      	adds	r7, #20
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	e000e3f0 	.word	0xe000e3f0
 8004570:	20000204 	.word	0x20000204
 8004574:	e000ed0c 	.word	0xe000ed0c
 8004578:	20000208 	.word	0x20000208

0800457c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b08a      	sub	sp, #40	; 0x28
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004584:	2300      	movs	r3, #0
 8004586:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8004588:	f7fe fcca 	bl	8002f20 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800458c:	4b53      	ldr	r3, [pc, #332]	; (80046dc <pvPortMalloc+0x160>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d101      	bne.n	8004598 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004594:	f000 f908 	bl	80047a8 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d012      	beq.n	80045c4 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800459e:	2208      	movs	r2, #8
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f003 0307 	and.w	r3, r3, #7
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	3308      	adds	r3, #8
 80045aa:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80045ac:	69bb      	ldr	r3, [r7, #24]
 80045ae:	43db      	mvns	r3, r3
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d804      	bhi.n	80045c0 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	4413      	add	r3, r2
 80045bc:	607b      	str	r3, [r7, #4]
 80045be:	e001      	b.n	80045c4 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80045c0:	2300      	movs	r3, #0
 80045c2:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	db70      	blt.n	80046ac <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d06d      	beq.n	80046ac <pvPortMalloc+0x130>
 80045d0:	4b43      	ldr	r3, [pc, #268]	; (80046e0 <pvPortMalloc+0x164>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d868      	bhi.n	80046ac <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80045da:	4b42      	ldr	r3, [pc, #264]	; (80046e4 <pvPortMalloc+0x168>)
 80045dc:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80045de:	4b41      	ldr	r3, [pc, #260]	; (80046e4 <pvPortMalloc+0x168>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80045e4:	e004      	b.n	80045f0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80045e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80045ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80045f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d903      	bls.n	8004602 <pvPortMalloc+0x86>
 80045fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d1f1      	bne.n	80045e6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004602:	4b36      	ldr	r3, [pc, #216]	; (80046dc <pvPortMalloc+0x160>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004608:	429a      	cmp	r2, r3
 800460a:	d04f      	beq.n	80046ac <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800460c:	6a3b      	ldr	r3, [r7, #32]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2208      	movs	r2, #8
 8004612:	4413      	add	r3, r2
 8004614:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	6a3b      	ldr	r3, [r7, #32]
 800461c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800461e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004620:	685a      	ldr	r2, [r3, #4]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	1ad2      	subs	r2, r2, r3
 8004626:	2308      	movs	r3, #8
 8004628:	005b      	lsls	r3, r3, #1
 800462a:	429a      	cmp	r2, r3
 800462c:	d91f      	bls.n	800466e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800462e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4413      	add	r3, r2
 8004634:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	f003 0307 	and.w	r3, r3, #7
 800463c:	2b00      	cmp	r3, #0
 800463e:	d00a      	beq.n	8004656 <pvPortMalloc+0xda>
        __asm volatile
 8004640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004644:	f383 8811 	msr	BASEPRI, r3
 8004648:	f3bf 8f6f 	isb	sy
 800464c:	f3bf 8f4f 	dsb	sy
 8004650:	613b      	str	r3, [r7, #16]
    }
 8004652:	bf00      	nop
 8004654:	e7fe      	b.n	8004654 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004658:	685a      	ldr	r2, [r3, #4]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	1ad2      	subs	r2, r2, r3
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004668:	6978      	ldr	r0, [r7, #20]
 800466a:	f000 f8f9 	bl	8004860 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800466e:	4b1c      	ldr	r3, [pc, #112]	; (80046e0 <pvPortMalloc+0x164>)
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	4a19      	ldr	r2, [pc, #100]	; (80046e0 <pvPortMalloc+0x164>)
 800467a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800467c:	4b18      	ldr	r3, [pc, #96]	; (80046e0 <pvPortMalloc+0x164>)
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	4b19      	ldr	r3, [pc, #100]	; (80046e8 <pvPortMalloc+0x16c>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	429a      	cmp	r2, r3
 8004686:	d203      	bcs.n	8004690 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004688:	4b15      	ldr	r3, [pc, #84]	; (80046e0 <pvPortMalloc+0x164>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a16      	ldr	r2, [pc, #88]	; (80046e8 <pvPortMalloc+0x16c>)
 800468e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8004690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800469c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469e:	2200      	movs	r2, #0
 80046a0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80046a2:	4b12      	ldr	r3, [pc, #72]	; (80046ec <pvPortMalloc+0x170>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	3301      	adds	r3, #1
 80046a8:	4a10      	ldr	r2, [pc, #64]	; (80046ec <pvPortMalloc+0x170>)
 80046aa:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80046ac:	f7fe fc46 	bl	8002f3c <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	f003 0307 	and.w	r3, r3, #7
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d00a      	beq.n	80046d0 <pvPortMalloc+0x154>
        __asm volatile
 80046ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046be:	f383 8811 	msr	BASEPRI, r3
 80046c2:	f3bf 8f6f 	isb	sy
 80046c6:	f3bf 8f4f 	dsb	sy
 80046ca:	60fb      	str	r3, [r7, #12]
    }
 80046cc:	bf00      	nop
 80046ce:	e7fe      	b.n	80046ce <pvPortMalloc+0x152>
    return pvReturn;
 80046d0:	69fb      	ldr	r3, [r7, #28]
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3728      	adds	r7, #40	; 0x28
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	20012e14 	.word	0x20012e14
 80046e0:	20012e18 	.word	0x20012e18
 80046e4:	20012e0c 	.word	0x20012e0c
 80046e8:	20012e1c 	.word	0x20012e1c
 80046ec:	20012e20 	.word	0x20012e20

080046f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b086      	sub	sp, #24
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d049      	beq.n	8004796 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004702:	2308      	movs	r3, #8
 8004704:	425b      	negs	r3, r3
 8004706:	697a      	ldr	r2, [r7, #20]
 8004708:	4413      	add	r3, r2
 800470a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	2b00      	cmp	r3, #0
 8004716:	db0a      	blt.n	800472e <vPortFree+0x3e>
        __asm volatile
 8004718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800471c:	f383 8811 	msr	BASEPRI, r3
 8004720:	f3bf 8f6f 	isb	sy
 8004724:	f3bf 8f4f 	dsb	sy
 8004728:	60fb      	str	r3, [r7, #12]
    }
 800472a:	bf00      	nop
 800472c:	e7fe      	b.n	800472c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00a      	beq.n	800474c <vPortFree+0x5c>
        __asm volatile
 8004736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800473a:	f383 8811 	msr	BASEPRI, r3
 800473e:	f3bf 8f6f 	isb	sy
 8004742:	f3bf 8f4f 	dsb	sy
 8004746:	60bb      	str	r3, [r7, #8]
    }
 8004748:	bf00      	nop
 800474a:	e7fe      	b.n	800474a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	0fdb      	lsrs	r3, r3, #31
 8004752:	f003 0301 	and.w	r3, r3, #1
 8004756:	b2db      	uxtb	r3, r3
 8004758:	2b00      	cmp	r3, #0
 800475a:	d01c      	beq.n	8004796 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d118      	bne.n	8004796 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8004770:	f7fe fbd6 	bl	8002f20 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	685a      	ldr	r2, [r3, #4]
 8004778:	4b09      	ldr	r3, [pc, #36]	; (80047a0 <vPortFree+0xb0>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4413      	add	r3, r2
 800477e:	4a08      	ldr	r2, [pc, #32]	; (80047a0 <vPortFree+0xb0>)
 8004780:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004782:	6938      	ldr	r0, [r7, #16]
 8004784:	f000 f86c 	bl	8004860 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004788:	4b06      	ldr	r3, [pc, #24]	; (80047a4 <vPortFree+0xb4>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	3301      	adds	r3, #1
 800478e:	4a05      	ldr	r2, [pc, #20]	; (80047a4 <vPortFree+0xb4>)
 8004790:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004792:	f7fe fbd3 	bl	8002f3c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004796:	bf00      	nop
 8004798:	3718      	adds	r7, #24
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	20012e18 	.word	0x20012e18
 80047a4:	20012e24 	.word	0x20012e24

080047a8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80047a8:	b480      	push	{r7}
 80047aa:	b085      	sub	sp, #20
 80047ac:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80047ae:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80047b2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80047b4:	4b25      	ldr	r3, [pc, #148]	; (800484c <prvHeapInit+0xa4>)
 80047b6:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f003 0307 	and.w	r3, r3, #7
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00c      	beq.n	80047dc <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	3307      	adds	r3, #7
 80047c6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f023 0307 	bic.w	r3, r3, #7
 80047ce:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80047d0:	68ba      	ldr	r2, [r7, #8]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	4a1d      	ldr	r2, [pc, #116]	; (800484c <prvHeapInit+0xa4>)
 80047d8:	4413      	add	r3, r2
 80047da:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80047e0:	4a1b      	ldr	r2, [pc, #108]	; (8004850 <prvHeapInit+0xa8>)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80047e6:	4b1a      	ldr	r3, [pc, #104]	; (8004850 <prvHeapInit+0xa8>)
 80047e8:	2200      	movs	r2, #0
 80047ea:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	68ba      	ldr	r2, [r7, #8]
 80047f0:	4413      	add	r3, r2
 80047f2:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80047f4:	2208      	movs	r2, #8
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	1a9b      	subs	r3, r3, r2
 80047fa:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f023 0307 	bic.w	r3, r3, #7
 8004802:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	4a13      	ldr	r2, [pc, #76]	; (8004854 <prvHeapInit+0xac>)
 8004808:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800480a:	4b12      	ldr	r3, [pc, #72]	; (8004854 <prvHeapInit+0xac>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2200      	movs	r2, #0
 8004810:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004812:	4b10      	ldr	r3, [pc, #64]	; (8004854 <prvHeapInit+0xac>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2200      	movs	r2, #0
 8004818:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	68fa      	ldr	r2, [r7, #12]
 8004822:	1ad2      	subs	r2, r2, r3
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004828:	4b0a      	ldr	r3, [pc, #40]	; (8004854 <prvHeapInit+0xac>)
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	4a08      	ldr	r2, [pc, #32]	; (8004858 <prvHeapInit+0xb0>)
 8004836:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	4a07      	ldr	r2, [pc, #28]	; (800485c <prvHeapInit+0xb4>)
 800483e:	6013      	str	r3, [r2, #0]
}
 8004840:	bf00      	nop
 8004842:	3714      	adds	r7, #20
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr
 800484c:	2000020c 	.word	0x2000020c
 8004850:	20012e0c 	.word	0x20012e0c
 8004854:	20012e14 	.word	0x20012e14
 8004858:	20012e1c 	.word	0x20012e1c
 800485c:	20012e18 	.word	0x20012e18

08004860 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004860:	b480      	push	{r7}
 8004862:	b085      	sub	sp, #20
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004868:	4b28      	ldr	r3, [pc, #160]	; (800490c <prvInsertBlockIntoFreeList+0xac>)
 800486a:	60fb      	str	r3, [r7, #12]
 800486c:	e002      	b.n	8004874 <prvInsertBlockIntoFreeList+0x14>
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	60fb      	str	r3, [r7, #12]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	429a      	cmp	r2, r3
 800487c:	d8f7      	bhi.n	800486e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	68ba      	ldr	r2, [r7, #8]
 8004888:	4413      	add	r3, r2
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	429a      	cmp	r2, r3
 800488e:	d108      	bne.n	80048a2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	685a      	ldr	r2, [r3, #4]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	441a      	add	r2, r3
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	68ba      	ldr	r2, [r7, #8]
 80048ac:	441a      	add	r2, r3
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d118      	bne.n	80048e8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	4b15      	ldr	r3, [pc, #84]	; (8004910 <prvInsertBlockIntoFreeList+0xb0>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d00d      	beq.n	80048de <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685a      	ldr	r2, [r3, #4]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	441a      	add	r2, r3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	601a      	str	r2, [r3, #0]
 80048dc:	e008      	b.n	80048f0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80048de:	4b0c      	ldr	r3, [pc, #48]	; (8004910 <prvInsertBlockIntoFreeList+0xb0>)
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	601a      	str	r2, [r3, #0]
 80048e6:	e003      	b.n	80048f0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80048f0:	68fa      	ldr	r2, [r7, #12]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d002      	beq.n	80048fe <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80048fe:	bf00      	nop
 8004900:	3714      	adds	r7, #20
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	20012e0c 	.word	0x20012e0c
 8004910:	20012e14 	.word	0x20012e14

08004914 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004914:	b580      	push	{r7, lr}
 8004916:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004918:	4803      	ldr	r0, [pc, #12]	; (8004928 <_cbSendSystemDesc+0x14>)
 800491a:	f001 fd05 	bl	8006328 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800491e:	4803      	ldr	r0, [pc, #12]	; (800492c <_cbSendSystemDesc+0x18>)
 8004920:	f001 fd02 	bl	8006328 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004924:	bf00      	nop
 8004926:	bd80      	pop	{r7, pc}
 8004928:	08006a94 	.word	0x08006a94
 800492c:	08006ad0 	.word	0x08006ad0

08004930 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004930:	b580      	push	{r7, lr}
 8004932:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004934:	4b06      	ldr	r3, [pc, #24]	; (8004950 <SEGGER_SYSVIEW_Conf+0x20>)
 8004936:	6818      	ldr	r0, [r3, #0]
 8004938:	4b05      	ldr	r3, [pc, #20]	; (8004950 <SEGGER_SYSVIEW_Conf+0x20>)
 800493a:	6819      	ldr	r1, [r3, #0]
 800493c:	4b05      	ldr	r3, [pc, #20]	; (8004954 <SEGGER_SYSVIEW_Conf+0x24>)
 800493e:	4a06      	ldr	r2, [pc, #24]	; (8004958 <SEGGER_SYSVIEW_Conf+0x28>)
 8004940:	f001 f86e 	bl	8005a20 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004944:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004948:	f001 f8ae 	bl	8005aa8 <SEGGER_SYSVIEW_SetRAMBase>
}
 800494c:	bf00      	nop
 800494e:	bd80      	pop	{r7, pc}
 8004950:	20000000 	.word	0x20000000
 8004954:	08004915 	.word	0x08004915
 8004958:	08006b70 	.word	0x08006b70

0800495c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800495c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800495e:	b085      	sub	sp, #20
 8004960:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004962:	2300      	movs	r3, #0
 8004964:	607b      	str	r3, [r7, #4]
 8004966:	e033      	b.n	80049d0 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004968:	491e      	ldr	r1, [pc, #120]	; (80049e4 <_cbSendTaskList+0x88>)
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	4613      	mov	r3, r2
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	4413      	add	r3, r2
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	440b      	add	r3, r1
 8004976:	6818      	ldr	r0, [r3, #0]
 8004978:	491a      	ldr	r1, [pc, #104]	; (80049e4 <_cbSendTaskList+0x88>)
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	4613      	mov	r3, r2
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	4413      	add	r3, r2
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	440b      	add	r3, r1
 8004986:	3304      	adds	r3, #4
 8004988:	6819      	ldr	r1, [r3, #0]
 800498a:	4c16      	ldr	r4, [pc, #88]	; (80049e4 <_cbSendTaskList+0x88>)
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	4613      	mov	r3, r2
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	4413      	add	r3, r2
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	4423      	add	r3, r4
 8004998:	3308      	adds	r3, #8
 800499a:	681c      	ldr	r4, [r3, #0]
 800499c:	4d11      	ldr	r5, [pc, #68]	; (80049e4 <_cbSendTaskList+0x88>)
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	4613      	mov	r3, r2
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	4413      	add	r3, r2
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	442b      	add	r3, r5
 80049aa:	330c      	adds	r3, #12
 80049ac:	681d      	ldr	r5, [r3, #0]
 80049ae:	4e0d      	ldr	r6, [pc, #52]	; (80049e4 <_cbSendTaskList+0x88>)
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	4613      	mov	r3, r2
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	4413      	add	r3, r2
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	4433      	add	r3, r6
 80049bc:	3310      	adds	r3, #16
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	9300      	str	r3, [sp, #0]
 80049c2:	462b      	mov	r3, r5
 80049c4:	4622      	mov	r2, r4
 80049c6:	f000 f8bd 	bl	8004b44 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	3301      	adds	r3, #1
 80049ce:	607b      	str	r3, [r7, #4]
 80049d0:	4b05      	ldr	r3, [pc, #20]	; (80049e8 <_cbSendTaskList+0x8c>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d3c6      	bcc.n	8004968 <_cbSendTaskList+0xc>
  }
}
 80049da:	bf00      	nop
 80049dc:	bf00      	nop
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049e4:	20012e28 	.word	0x20012e28
 80049e8:	20012ec8 	.word	0x20012ec8

080049ec <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80049ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049f0:	b082      	sub	sp, #8
 80049f2:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80049f4:	f7fe fbb2 	bl	800315c <xTaskGetTickCountFromISR>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2200      	movs	r2, #0
 80049fc:	469a      	mov	sl, r3
 80049fe:	4693      	mov	fp, r2
 8004a00:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004a04:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004a08:	4602      	mov	r2, r0
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	f04f 0a00 	mov.w	sl, #0
 8004a10:	f04f 0b00 	mov.w	fp, #0
 8004a14:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004a18:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004a1c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004a20:	4652      	mov	r2, sl
 8004a22:	465b      	mov	r3, fp
 8004a24:	1a14      	subs	r4, r2, r0
 8004a26:	eb63 0501 	sbc.w	r5, r3, r1
 8004a2a:	f04f 0200 	mov.w	r2, #0
 8004a2e:	f04f 0300 	mov.w	r3, #0
 8004a32:	00ab      	lsls	r3, r5, #2
 8004a34:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004a38:	00a2      	lsls	r2, r4, #2
 8004a3a:	4614      	mov	r4, r2
 8004a3c:	461d      	mov	r5, r3
 8004a3e:	eb14 0800 	adds.w	r8, r4, r0
 8004a42:	eb45 0901 	adc.w	r9, r5, r1
 8004a46:	f04f 0200 	mov.w	r2, #0
 8004a4a:	f04f 0300 	mov.w	r3, #0
 8004a4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a5a:	4690      	mov	r8, r2
 8004a5c:	4699      	mov	r9, r3
 8004a5e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004a62:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004a66:	4610      	mov	r0, r2
 8004a68:	4619      	mov	r1, r3
 8004a6a:	3708      	adds	r7, #8
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004a74 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b086      	sub	sp, #24
 8004a78:	af02      	add	r7, sp, #8
 8004a7a:	60f8      	str	r0, [r7, #12]
 8004a7c:	60b9      	str	r1, [r7, #8]
 8004a7e:	607a      	str	r2, [r7, #4]
 8004a80:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004a82:	2205      	movs	r2, #5
 8004a84:	492b      	ldr	r1, [pc, #172]	; (8004b34 <SYSVIEW_AddTask+0xc0>)
 8004a86:	68b8      	ldr	r0, [r7, #8]
 8004a88:	f001 ff76 	bl	8006978 <memcmp>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d04b      	beq.n	8004b2a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004a92:	4b29      	ldr	r3, [pc, #164]	; (8004b38 <SYSVIEW_AddTask+0xc4>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2b07      	cmp	r3, #7
 8004a98:	d903      	bls.n	8004aa2 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004a9a:	4828      	ldr	r0, [pc, #160]	; (8004b3c <SYSVIEW_AddTask+0xc8>)
 8004a9c:	f001 fee2 	bl	8006864 <SEGGER_SYSVIEW_Warn>
    return;
 8004aa0:	e044      	b.n	8004b2c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004aa2:	4b25      	ldr	r3, [pc, #148]	; (8004b38 <SYSVIEW_AddTask+0xc4>)
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	4926      	ldr	r1, [pc, #152]	; (8004b40 <SYSVIEW_AddTask+0xcc>)
 8004aa8:	4613      	mov	r3, r2
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	4413      	add	r3, r2
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	440b      	add	r3, r1
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004ab6:	4b20      	ldr	r3, [pc, #128]	; (8004b38 <SYSVIEW_AddTask+0xc4>)
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	4921      	ldr	r1, [pc, #132]	; (8004b40 <SYSVIEW_AddTask+0xcc>)
 8004abc:	4613      	mov	r3, r2
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	4413      	add	r3, r2
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	440b      	add	r3, r1
 8004ac6:	3304      	adds	r3, #4
 8004ac8:	68ba      	ldr	r2, [r7, #8]
 8004aca:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004acc:	4b1a      	ldr	r3, [pc, #104]	; (8004b38 <SYSVIEW_AddTask+0xc4>)
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	491b      	ldr	r1, [pc, #108]	; (8004b40 <SYSVIEW_AddTask+0xcc>)
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	4413      	add	r3, r2
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	440b      	add	r3, r1
 8004adc:	3308      	adds	r3, #8
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004ae2:	4b15      	ldr	r3, [pc, #84]	; (8004b38 <SYSVIEW_AddTask+0xc4>)
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	4916      	ldr	r1, [pc, #88]	; (8004b40 <SYSVIEW_AddTask+0xcc>)
 8004ae8:	4613      	mov	r3, r2
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	4413      	add	r3, r2
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	440b      	add	r3, r1
 8004af2:	330c      	adds	r3, #12
 8004af4:	683a      	ldr	r2, [r7, #0]
 8004af6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004af8:	4b0f      	ldr	r3, [pc, #60]	; (8004b38 <SYSVIEW_AddTask+0xc4>)
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	4910      	ldr	r1, [pc, #64]	; (8004b40 <SYSVIEW_AddTask+0xcc>)
 8004afe:	4613      	mov	r3, r2
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	4413      	add	r3, r2
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	440b      	add	r3, r1
 8004b08:	3310      	adds	r3, #16
 8004b0a:	69ba      	ldr	r2, [r7, #24]
 8004b0c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004b0e:	4b0a      	ldr	r3, [pc, #40]	; (8004b38 <SYSVIEW_AddTask+0xc4>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	3301      	adds	r3, #1
 8004b14:	4a08      	ldr	r2, [pc, #32]	; (8004b38 <SYSVIEW_AddTask+0xc4>)
 8004b16:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	9300      	str	r3, [sp, #0]
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	68b9      	ldr	r1, [r7, #8]
 8004b22:	68f8      	ldr	r0, [r7, #12]
 8004b24:	f000 f80e 	bl	8004b44 <SYSVIEW_SendTaskInfo>
 8004b28:	e000      	b.n	8004b2c <SYSVIEW_AddTask+0xb8>
    return;
 8004b2a:	bf00      	nop

}
 8004b2c:	3710      	adds	r7, #16
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	08006ae0 	.word	0x08006ae0
 8004b38:	20012ec8 	.word	0x20012ec8
 8004b3c:	08006ae8 	.word	0x08006ae8
 8004b40:	20012e28 	.word	0x20012e28

08004b44 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b08a      	sub	sp, #40	; 0x28
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	607a      	str	r2, [r7, #4]
 8004b50:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004b52:	f107 0314 	add.w	r3, r7, #20
 8004b56:	2214      	movs	r2, #20
 8004b58:	2100      	movs	r1, #0
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f001 ff1c 	bl	8006998 <memset>
  TaskInfo.TaskID     = TaskID;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b72:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004b74:	f107 0314 	add.w	r3, r7, #20
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f001 fadd 	bl	8006138 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004b7e:	bf00      	nop
 8004b80:	3728      	adds	r7, #40	; 0x28
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
	...

08004b88 <__NVIC_EnableIRQ>:
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	4603      	mov	r3, r0
 8004b90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	db0b      	blt.n	8004bb2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b9a:	79fb      	ldrb	r3, [r7, #7]
 8004b9c:	f003 021f 	and.w	r2, r3, #31
 8004ba0:	4907      	ldr	r1, [pc, #28]	; (8004bc0 <__NVIC_EnableIRQ+0x38>)
 8004ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ba6:	095b      	lsrs	r3, r3, #5
 8004ba8:	2001      	movs	r0, #1
 8004baa:	fa00 f202 	lsl.w	r2, r0, r2
 8004bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004bb2:	bf00      	nop
 8004bb4:	370c      	adds	r7, #12
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr
 8004bbe:	bf00      	nop
 8004bc0:	e000e100 	.word	0xe000e100

08004bc4 <__NVIC_SetPriority>:
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	4603      	mov	r3, r0
 8004bcc:	6039      	str	r1, [r7, #0]
 8004bce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	db0a      	blt.n	8004bee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	b2da      	uxtb	r2, r3
 8004bdc:	490c      	ldr	r1, [pc, #48]	; (8004c10 <__NVIC_SetPriority+0x4c>)
 8004bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004be2:	0112      	lsls	r2, r2, #4
 8004be4:	b2d2      	uxtb	r2, r2
 8004be6:	440b      	add	r3, r1
 8004be8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004bec:	e00a      	b.n	8004c04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	b2da      	uxtb	r2, r3
 8004bf2:	4908      	ldr	r1, [pc, #32]	; (8004c14 <__NVIC_SetPriority+0x50>)
 8004bf4:	79fb      	ldrb	r3, [r7, #7]
 8004bf6:	f003 030f 	and.w	r3, r3, #15
 8004bfa:	3b04      	subs	r3, #4
 8004bfc:	0112      	lsls	r2, r2, #4
 8004bfe:	b2d2      	uxtb	r2, r2
 8004c00:	440b      	add	r3, r1
 8004c02:	761a      	strb	r2, [r3, #24]
}
 8004c04:	bf00      	nop
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr
 8004c10:	e000e100 	.word	0xe000e100
 8004c14:	e000ed00 	.word	0xe000ed00

08004c18 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b082      	sub	sp, #8
 8004c1c:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8004c1e:	f001 fe7d 	bl	800691c <SEGGER_SYSVIEW_IsStarted>
 8004c22:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d101      	bne.n	8004c2e <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8004c2a:	f001 f909 	bl	8005e40 <SEGGER_SYSVIEW_Start>
  }
}
 8004c2e:	bf00      	nop
 8004c30:	3708      	adds	r7, #8
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
	...

08004c38 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	4603      	mov	r3, r0
 8004c40:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8004c42:	4b0c      	ldr	r3, [pc, #48]	; (8004c74 <_cbOnUARTRx+0x3c>)
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	2b03      	cmp	r3, #3
 8004c48:	d806      	bhi.n	8004c58 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8004c4a:	4b0a      	ldr	r3, [pc, #40]	; (8004c74 <_cbOnUARTRx+0x3c>)
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	3301      	adds	r3, #1
 8004c50:	b2da      	uxtb	r2, r3
 8004c52:	4b08      	ldr	r3, [pc, #32]	; (8004c74 <_cbOnUARTRx+0x3c>)
 8004c54:	701a      	strb	r2, [r3, #0]
    goto Done;
 8004c56:	e009      	b.n	8004c6c <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8004c58:	f7ff ffde 	bl	8004c18 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8004c5c:	4b05      	ldr	r3, [pc, #20]	; (8004c74 <_cbOnUARTRx+0x3c>)
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	4618      	mov	r0, r3
 8004c62:	1dfb      	adds	r3, r7, #7
 8004c64:	2201      	movs	r2, #1
 8004c66:	4619      	mov	r1, r3
 8004c68:	f000 fb9a 	bl	80053a0 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8004c6c:	bf00      	nop
}
 8004c6e:	3708      	adds	r7, #8
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	20000014 	.word	0x20000014

08004c78 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8004c80:	4b14      	ldr	r3, [pc, #80]	; (8004cd4 <_cbOnUARTTx+0x5c>)
 8004c82:	785b      	ldrb	r3, [r3, #1]
 8004c84:	2b03      	cmp	r3, #3
 8004c86:	d80f      	bhi.n	8004ca8 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8004c88:	4b12      	ldr	r3, [pc, #72]	; (8004cd4 <_cbOnUARTTx+0x5c>)
 8004c8a:	785b      	ldrb	r3, [r3, #1]
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	4b12      	ldr	r3, [pc, #72]	; (8004cd8 <_cbOnUARTTx+0x60>)
 8004c90:	5c9a      	ldrb	r2, [r3, r2]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8004c96:	4b0f      	ldr	r3, [pc, #60]	; (8004cd4 <_cbOnUARTTx+0x5c>)
 8004c98:	785b      	ldrb	r3, [r3, #1]
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	b2da      	uxtb	r2, r3
 8004c9e:	4b0d      	ldr	r3, [pc, #52]	; (8004cd4 <_cbOnUARTTx+0x5c>)
 8004ca0:	705a      	strb	r2, [r3, #1]
    r = 1;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	60fb      	str	r3, [r7, #12]
    goto Done;
 8004ca6:	e00f      	b.n	8004cc8 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8004ca8:	4b0a      	ldr	r3, [pc, #40]	; (8004cd4 <_cbOnUARTTx+0x5c>)
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	2201      	movs	r2, #1
 8004cae:	6879      	ldr	r1, [r7, #4]
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f000 fa19 	bl	80050e8 <SEGGER_RTT_ReadUpBufferNoLock>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	da02      	bge.n	8004cc6 <_cbOnUARTTx+0x4e>
    r = 0;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	60fb      	str	r3, [r7, #12]
 8004cc4:	e000      	b.n	8004cc8 <_cbOnUARTTx+0x50>
  }
Done:
 8004cc6:	bf00      	nop
  return r;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3710      	adds	r7, #16
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	20000014 	.word	0x20000014
 8004cd8:	08006b78 	.word	0x08006b78

08004cdc <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b082      	sub	sp, #8
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8004ce4:	4a04      	ldr	r2, [pc, #16]	; (8004cf8 <SEGGER_UART_init+0x1c>)
 8004ce6:	4905      	ldr	r1, [pc, #20]	; (8004cfc <SEGGER_UART_init+0x20>)
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f000 f863 	bl	8004db4 <HIF_UART_Init>
}
 8004cee:	bf00      	nop
 8004cf0:	3708      	adds	r7, #8
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	08004c39 	.word	0x08004c39
 8004cfc:	08004c79 	.word	0x08004c79

08004d00 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8004d06:	4b1e      	ldr	r3, [pc, #120]	; (8004d80 <USART2_IRQHandler+0x80>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f003 0320 	and.w	r3, r3, #32
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d011      	beq.n	8004d3a <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8004d16:	4b1b      	ldr	r3, [pc, #108]	; (8004d84 <USART2_IRQHandler+0x84>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f003 030b 	and.w	r3, r3, #11
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d108      	bne.n	8004d3a <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8004d28:	4b17      	ldr	r3, [pc, #92]	; (8004d88 <USART2_IRQHandler+0x88>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d004      	beq.n	8004d3a <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8004d30:	4b15      	ldr	r3, [pc, #84]	; (8004d88 <USART2_IRQHandler+0x88>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	79fa      	ldrb	r2, [r7, #7]
 8004d36:	4610      	mov	r0, r2
 8004d38:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d01a      	beq.n	8004d7a <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8004d44:	4b11      	ldr	r3, [pc, #68]	; (8004d8c <USART2_IRQHandler+0x8c>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d015      	beq.n	8004d78 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8004d4c:	4b0f      	ldr	r3, [pc, #60]	; (8004d8c <USART2_IRQHandler+0x8c>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	1dfa      	adds	r2, r7, #7
 8004d52:	4610      	mov	r0, r2
 8004d54:	4798      	blx	r3
 8004d56:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d106      	bne.n	8004d6c <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8004d5e:	4b0c      	ldr	r3, [pc, #48]	; (8004d90 <USART2_IRQHandler+0x90>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a0b      	ldr	r2, [pc, #44]	; (8004d90 <USART2_IRQHandler+0x90>)
 8004d64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d68:	6013      	str	r3, [r2, #0]
 8004d6a:	e006      	b.n	8004d7a <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8004d6c:	4b04      	ldr	r3, [pc, #16]	; (8004d80 <USART2_IRQHandler+0x80>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8004d70:	79fa      	ldrb	r2, [r7, #7]
 8004d72:	4b04      	ldr	r3, [pc, #16]	; (8004d84 <USART2_IRQHandler+0x84>)
 8004d74:	601a      	str	r2, [r3, #0]
 8004d76:	e000      	b.n	8004d7a <USART2_IRQHandler+0x7a>
      return;
 8004d78:	bf00      	nop
    }
  }
}
 8004d7a:	3710      	adds	r7, #16
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	40004400 	.word	0x40004400
 8004d84:	40004404 	.word	0x40004404
 8004d88:	20012ecc 	.word	0x20012ecc
 8004d8c:	20012ed0 	.word	0x20012ed0
 8004d90:	4000440c 	.word	0x4000440c

08004d94 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8004d94:	b480      	push	{r7}
 8004d96:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8004d98:	4b05      	ldr	r3, [pc, #20]	; (8004db0 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a04      	ldr	r2, [pc, #16]	; (8004db0 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004d9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004da2:	6013      	str	r3, [r2, #0]
}
 8004da4:	bf00      	nop
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr
 8004dae:	bf00      	nop
 8004db0:	4000440c 	.word	0x4000440c

08004db4 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b086      	sub	sp, #24
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	60f8      	str	r0, [r7, #12]
 8004dbc:	60b9      	str	r1, [r7, #8]
 8004dbe:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8004dc0:	4b2e      	ldr	r3, [pc, #184]	; (8004e7c <HIF_UART_Init+0xc8>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a2d      	ldr	r2, [pc, #180]	; (8004e7c <HIF_UART_Init+0xc8>)
 8004dc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dca:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8004dcc:	4b2c      	ldr	r3, [pc, #176]	; (8004e80 <HIF_UART_Init+0xcc>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a2b      	ldr	r2, [pc, #172]	; (8004e80 <HIF_UART_Init+0xcc>)
 8004dd2:	f043 0301 	orr.w	r3, r3, #1
 8004dd6:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8004dd8:	4b2a      	ldr	r3, [pc, #168]	; (8004e84 <HIF_UART_Init+0xd0>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004de4:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8004dec:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8004dee:	4a25      	ldr	r2, [pc, #148]	; (8004e84 <HIF_UART_Init+0xd0>)
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8004df4:	4b24      	ldr	r3, [pc, #144]	; (8004e88 <HIF_UART_Init+0xd4>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e00:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8004e08:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8004e0a:	4a1f      	ldr	r2, [pc, #124]	; (8004e88 <HIF_UART_Init+0xd4>)
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8004e10:	4b1e      	ldr	r3, [pc, #120]	; (8004e8c <HIF_UART_Init+0xd8>)
 8004e12:	f24a 022c 	movw	r2, #41004	; 0xa02c
 8004e16:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8004e18:	4b1d      	ldr	r3, [pc, #116]	; (8004e90 <HIF_UART_Init+0xdc>)
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8004e1e:	4b1d      	ldr	r3, [pc, #116]	; (8004e94 <HIF_UART_Init+0xe0>)
 8004e20:	2280      	movs	r2, #128	; 0x80
 8004e22:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	00db      	lsls	r3, r3, #3
 8004e28:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8004e2a:	4a1b      	ldr	r2, [pc, #108]	; (8004e98 <HIF_UART_Init+0xe4>)
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e32:	3301      	adds	r3, #1
 8004e34:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	085b      	lsrs	r3, r3, #1
 8004e3a:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e42:	d302      	bcc.n	8004e4a <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8004e44:	f640 73ff 	movw	r3, #4095	; 0xfff
 8004e48:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d004      	beq.n	8004e5a <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	011b      	lsls	r3, r3, #4
 8004e54:	4a11      	ldr	r2, [pc, #68]	; (8004e9c <HIF_UART_Init+0xe8>)
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8004e5a:	4a11      	ldr	r2, [pc, #68]	; (8004ea0 <HIF_UART_Init+0xec>)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8004e60:	4a10      	ldr	r2, [pc, #64]	; (8004ea4 <HIF_UART_Init+0xf0>)
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8004e66:	2106      	movs	r1, #6
 8004e68:	2026      	movs	r0, #38	; 0x26
 8004e6a:	f7ff feab 	bl	8004bc4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8004e6e:	2026      	movs	r0, #38	; 0x26
 8004e70:	f7ff fe8a 	bl	8004b88 <__NVIC_EnableIRQ>
}
 8004e74:	bf00      	nop
 8004e76:	3718      	adds	r7, #24
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	40023840 	.word	0x40023840
 8004e80:	40023830 	.word	0x40023830
 8004e84:	40020020 	.word	0x40020020
 8004e88:	40020000 	.word	0x40020000
 8004e8c:	4000440c 	.word	0x4000440c
 8004e90:	40004410 	.word	0x40004410
 8004e94:	40004414 	.word	0x40004414
 8004e98:	0501bd00 	.word	0x0501bd00
 8004e9c:	40004408 	.word	0x40004408
 8004ea0:	20012ecc 	.word	0x20012ecc
 8004ea4:	20012ed0 	.word	0x20012ed0

08004ea8 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004eae:	4b24      	ldr	r3, [pc, #144]	; (8004f40 <_DoInit+0x98>)
 8004eb0:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2203      	movs	r2, #3
 8004eb6:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2203      	movs	r2, #3
 8004ebc:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a20      	ldr	r2, [pc, #128]	; (8004f44 <_DoInit+0x9c>)
 8004ec2:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4a20      	ldr	r2, [pc, #128]	; (8004f48 <_DoInit+0xa0>)
 8004ec8:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004ed0:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4a17      	ldr	r2, [pc, #92]	; (8004f44 <_DoInit+0x9c>)
 8004ee8:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a17      	ldr	r2, [pc, #92]	; (8004f4c <_DoInit+0xa4>)
 8004eee:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2210      	movs	r2, #16
 8004ef4:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	3307      	adds	r3, #7
 8004f0c:	4a10      	ldr	r2, [pc, #64]	; (8004f50 <_DoInit+0xa8>)
 8004f0e:	6810      	ldr	r0, [r2, #0]
 8004f10:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004f12:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a0e      	ldr	r2, [pc, #56]	; (8004f54 <_DoInit+0xac>)
 8004f1a:	6810      	ldr	r0, [r2, #0]
 8004f1c:	6018      	str	r0, [r3, #0]
 8004f1e:	8891      	ldrh	r1, [r2, #4]
 8004f20:	7992      	ldrb	r2, [r2, #6]
 8004f22:	8099      	strh	r1, [r3, #4]
 8004f24:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004f26:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2220      	movs	r2, #32
 8004f2e:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004f30:	f3bf 8f5f 	dmb	sy
}
 8004f34:	bf00      	nop
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr
 8004f40:	20012ed4 	.word	0x20012ed4
 8004f44:	08006b38 	.word	0x08006b38
 8004f48:	20012f7c 	.word	0x20012f7c
 8004f4c:	2001337c 	.word	0x2001337c
 8004f50:	08006b44 	.word	0x08006b44
 8004f54:	08006b48 	.word	0x08006b48

08004f58 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b08a      	sub	sp, #40	; 0x28
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8004f64:	2300      	movs	r3, #0
 8004f66:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8004f74:	69ba      	ldr	r2, [r7, #24]
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d905      	bls.n	8004f88 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8004f7c:	69ba      	ldr	r2, [r7, #24]
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	3b01      	subs	r3, #1
 8004f84:	627b      	str	r3, [r7, #36]	; 0x24
 8004f86:	e007      	b.n	8004f98 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	689a      	ldr	r2, [r3, #8]
 8004f8c:	69b9      	ldr	r1, [r7, #24]
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	1acb      	subs	r3, r1, r3
 8004f92:	4413      	add	r3, r2
 8004f94:	3b01      	subs	r3, #1
 8004f96:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	689a      	ldr	r2, [r3, #8]
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	bf28      	it	cs
 8004fa6:	4613      	movcs	r3, r2
 8004fa8:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8004faa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	bf28      	it	cs
 8004fb2:	4613      	movcs	r3, r2
 8004fb4:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	685a      	ldr	r2, [r3, #4]
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	4413      	add	r3, r2
 8004fbe:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8004fc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fc2:	68b9      	ldr	r1, [r7, #8]
 8004fc4:	6978      	ldr	r0, [r7, #20]
 8004fc6:	f001 fd13 	bl	80069f0 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8004fca:	6a3a      	ldr	r2, [r7, #32]
 8004fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fce:	4413      	add	r3, r2
 8004fd0:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8004fd2:	68ba      	ldr	r2, [r7, #8]
 8004fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd6:	4413      	add	r3, r2
 8004fd8:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fde:	1ad3      	subs	r3, r2, r3
 8004fe0:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8004fe2:	69fa      	ldr	r2, [r7, #28]
 8004fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe6:	4413      	add	r3, r2
 8004fe8:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	69fa      	ldr	r2, [r7, #28]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d101      	bne.n	8004ff8 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004ff8:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	69fa      	ldr	r2, [r7, #28]
 8005000:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d1b2      	bne.n	8004f6e <_WriteBlocking+0x16>
  return NumBytesWritten;
 8005008:	6a3b      	ldr	r3, [r7, #32]
}
 800500a:	4618      	mov	r0, r3
 800500c:	3728      	adds	r7, #40	; 0x28
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}

08005012 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8005012:	b580      	push	{r7, lr}
 8005014:	b088      	sub	sp, #32
 8005016:	af00      	add	r7, sp, #0
 8005018:	60f8      	str	r0, [r7, #12]
 800501a:	60b9      	str	r1, [r7, #8]
 800501c:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	689a      	ldr	r2, [r3, #8]
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	1ad3      	subs	r3, r2, r3
 800502c:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800502e:	69ba      	ldr	r2, [r7, #24]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	429a      	cmp	r2, r3
 8005034:	d911      	bls.n	800505a <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	685a      	ldr	r2, [r3, #4]
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	4413      	add	r3, r2
 800503e:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	68b9      	ldr	r1, [r7, #8]
 8005044:	6938      	ldr	r0, [r7, #16]
 8005046:	f001 fcd3 	bl	80069f0 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800504a:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 800504e:	69fa      	ldr	r2, [r7, #28]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	441a      	add	r2, r3
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8005058:	e01f      	b.n	800509a <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	685a      	ldr	r2, [r3, #4]
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	4413      	add	r3, r2
 8005066:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8005068:	697a      	ldr	r2, [r7, #20]
 800506a:	68b9      	ldr	r1, [r7, #8]
 800506c:	6938      	ldr	r0, [r7, #16]
 800506e:	f001 fcbf 	bl	80069f0 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	1ad3      	subs	r3, r2, r3
 8005078:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8005080:	68ba      	ldr	r2, [r7, #8]
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	4413      	add	r3, r2
 8005086:	697a      	ldr	r2, [r7, #20]
 8005088:	4619      	mov	r1, r3
 800508a:	6938      	ldr	r0, [r7, #16]
 800508c:	f001 fcb0 	bl	80069f0 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005090:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	697a      	ldr	r2, [r7, #20]
 8005098:	60da      	str	r2, [r3, #12]
}
 800509a:	bf00      	nop
 800509c:	3720      	adds	r7, #32
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}

080050a2 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80050a2:	b480      	push	{r7}
 80050a4:	b087      	sub	sp, #28
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80050b6:	693a      	ldr	r2, [r7, #16]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d808      	bhi.n	80050d0 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	689a      	ldr	r2, [r3, #8]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	1ad2      	subs	r2, r2, r3
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	4413      	add	r3, r2
 80050ca:	3b01      	subs	r3, #1
 80050cc:	617b      	str	r3, [r7, #20]
 80050ce:	e004      	b.n	80050da <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80050d0:	693a      	ldr	r2, [r7, #16]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	3b01      	subs	r3, #1
 80050d8:	617b      	str	r3, [r7, #20]
  }
  return r;
 80050da:	697b      	ldr	r3, [r7, #20]
}
 80050dc:	4618      	mov	r0, r3
 80050de:	371c      	adds	r7, #28
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr

080050e8 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b08c      	sub	sp, #48	; 0x30
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	60b9      	str	r1, [r7, #8]
 80050f2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 80050f4:	4b3e      	ldr	r3, [pc, #248]	; (80051f0 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80050f6:	623b      	str	r3, [r7, #32]
 80050f8:	6a3b      	ldr	r3, [r7, #32]
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d101      	bne.n	8005106 <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8005102:	f7ff fed1 	bl	8004ea8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	1c5a      	adds	r2, r3, #1
 800510a:	4613      	mov	r3, r2
 800510c:	005b      	lsls	r3, r3, #1
 800510e:	4413      	add	r3, r2
 8005110:	00db      	lsls	r3, r3, #3
 8005112:	4a37      	ldr	r2, [pc, #220]	; (80051f0 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005114:	4413      	add	r3, r2
 8005116:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	691b      	ldr	r3, [r3, #16]
 8005120:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005128:	2300      	movs	r3, #0
 800512a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800512c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	429a      	cmp	r2, r3
 8005132:	d92b      	bls.n	800518c <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	689a      	ldr	r2, [r3, #8]
 8005138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800513e:	697a      	ldr	r2, [r7, #20]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4293      	cmp	r3, r2
 8005144:	bf28      	it	cs
 8005146:	4613      	movcs	r3, r2
 8005148:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800514a:	69fb      	ldr	r3, [r7, #28]
 800514c:	685a      	ldr	r2, [r3, #4]
 800514e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005150:	4413      	add	r3, r2
 8005152:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005154:	697a      	ldr	r2, [r7, #20]
 8005156:	6939      	ldr	r1, [r7, #16]
 8005158:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800515a:	f001 fc49 	bl	80069f0 <memcpy>
    NumBytesRead += NumBytesRem;
 800515e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	4413      	add	r3, r2
 8005164:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	4413      	add	r3, r2
 800516c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	1ad3      	subs	r3, r2, r3
 8005174:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005176:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	4413      	add	r3, r2
 800517c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005184:	429a      	cmp	r2, r3
 8005186:	d101      	bne.n	800518c <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8005188:	2300      	movs	r3, #0
 800518a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800518c:	69ba      	ldr	r2, [r7, #24]
 800518e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005194:	697a      	ldr	r2, [r7, #20]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4293      	cmp	r3, r2
 800519a:	bf28      	it	cs
 800519c:	4613      	movcs	r3, r2
 800519e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d019      	beq.n	80051da <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	685a      	ldr	r2, [r3, #4]
 80051aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ac:	4413      	add	r3, r2
 80051ae:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80051b0:	697a      	ldr	r2, [r7, #20]
 80051b2:	6939      	ldr	r1, [r7, #16]
 80051b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80051b6:	f001 fc1b 	bl	80069f0 <memcpy>
    NumBytesRead += NumBytesRem;
 80051ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	4413      	add	r3, r2
 80051c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80051c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	4413      	add	r3, r2
 80051c8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	1ad3      	subs	r3, r2, r3
 80051d0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80051d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	4413      	add	r3, r2
 80051d8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 80051da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d002      	beq.n	80051e6 <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051e4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80051e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3730      	adds	r7, #48	; 0x30
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	20012ed4 	.word	0x20012ed4

080051f4 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b08c      	sub	sp, #48	; 0x30
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005200:	4b3e      	ldr	r3, [pc, #248]	; (80052fc <SEGGER_RTT_ReadNoLock+0x108>)
 8005202:	623b      	str	r3, [r7, #32]
 8005204:	6a3b      	ldr	r3, [r7, #32]
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	b2db      	uxtb	r3, r3
 800520a:	2b00      	cmp	r3, #0
 800520c:	d101      	bne.n	8005212 <SEGGER_RTT_ReadNoLock+0x1e>
 800520e:	f7ff fe4b 	bl	8004ea8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005212:	68fa      	ldr	r2, [r7, #12]
 8005214:	4613      	mov	r3, r2
 8005216:	005b      	lsls	r3, r3, #1
 8005218:	4413      	add	r3, r2
 800521a:	00db      	lsls	r3, r3, #3
 800521c:	3360      	adds	r3, #96	; 0x60
 800521e:	4a37      	ldr	r2, [pc, #220]	; (80052fc <SEGGER_RTT_ReadNoLock+0x108>)
 8005220:	4413      	add	r3, r2
 8005222:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	691b      	ldr	r3, [r3, #16]
 800522c:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005234:	2300      	movs	r3, #0
 8005236:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005238:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800523a:	69bb      	ldr	r3, [r7, #24]
 800523c:	429a      	cmp	r2, r3
 800523e:	d92b      	bls.n	8005298 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	689a      	ldr	r2, [r3, #8]
 8005244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800524a:	697a      	ldr	r2, [r7, #20]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	4293      	cmp	r3, r2
 8005250:	bf28      	it	cs
 8005252:	4613      	movcs	r3, r2
 8005254:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	685a      	ldr	r2, [r3, #4]
 800525a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800525c:	4413      	add	r3, r2
 800525e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005260:	697a      	ldr	r2, [r7, #20]
 8005262:	6939      	ldr	r1, [r7, #16]
 8005264:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005266:	f001 fbc3 	bl	80069f0 <memcpy>
    NumBytesRead += NumBytesRem;
 800526a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	4413      	add	r3, r2
 8005270:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005272:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	4413      	add	r3, r2
 8005278:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	1ad3      	subs	r3, r2, r3
 8005280:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005282:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	4413      	add	r3, r2
 8005288:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005290:	429a      	cmp	r2, r3
 8005292:	d101      	bne.n	8005298 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005294:	2300      	movs	r3, #0
 8005296:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005298:	69ba      	ldr	r2, [r7, #24]
 800529a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80052a0:	697a      	ldr	r2, [r7, #20]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4293      	cmp	r3, r2
 80052a6:	bf28      	it	cs
 80052a8:	4613      	movcs	r3, r2
 80052aa:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d019      	beq.n	80052e6 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	685a      	ldr	r2, [r3, #4]
 80052b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b8:	4413      	add	r3, r2
 80052ba:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80052bc:	697a      	ldr	r2, [r7, #20]
 80052be:	6939      	ldr	r1, [r7, #16]
 80052c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80052c2:	f001 fb95 	bl	80069f0 <memcpy>
    NumBytesRead += NumBytesRem;
 80052c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	4413      	add	r3, r2
 80052cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80052ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	4413      	add	r3, r2
 80052d4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	1ad3      	subs	r3, r2, r3
 80052dc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80052de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	4413      	add	r3, r2
 80052e4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80052e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d002      	beq.n	80052f2 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052f0:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80052f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3730      	adds	r7, #48	; 0x30
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}
 80052fc:	20012ed4 	.word	0x20012ed4

08005300 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005300:	b580      	push	{r7, lr}
 8005302:	b088      	sub	sp, #32
 8005304:	af00      	add	r7, sp, #0
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	60b9      	str	r1, [r7, #8]
 800530a:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005310:	68fa      	ldr	r2, [r7, #12]
 8005312:	4613      	mov	r3, r2
 8005314:	005b      	lsls	r3, r3, #1
 8005316:	4413      	add	r3, r2
 8005318:	00db      	lsls	r3, r3, #3
 800531a:	3360      	adds	r3, #96	; 0x60
 800531c:	4a1f      	ldr	r2, [pc, #124]	; (800539c <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 800531e:	4413      	add	r3, r2
 8005320:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	695b      	ldr	r3, [r3, #20]
 8005326:	2b02      	cmp	r3, #2
 8005328:	d029      	beq.n	800537e <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 800532a:	2b02      	cmp	r3, #2
 800532c:	d82e      	bhi.n	800538c <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 800532e:	2b00      	cmp	r3, #0
 8005330:	d002      	beq.n	8005338 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8005332:	2b01      	cmp	r3, #1
 8005334:	d013      	beq.n	800535e <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8005336:	e029      	b.n	800538c <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005338:	6978      	ldr	r0, [r7, #20]
 800533a:	f7ff feb2 	bl	80050a2 <_GetAvailWriteSpace>
 800533e:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8005340:	693a      	ldr	r2, [r7, #16]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	429a      	cmp	r2, r3
 8005346:	d202      	bcs.n	800534e <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8005348:	2300      	movs	r3, #0
 800534a:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 800534c:	e021      	b.n	8005392 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	69b9      	ldr	r1, [r7, #24]
 8005356:	6978      	ldr	r0, [r7, #20]
 8005358:	f7ff fe5b 	bl	8005012 <_WriteNoCheck>
    break;
 800535c:	e019      	b.n	8005392 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800535e:	6978      	ldr	r0, [r7, #20]
 8005360:	f7ff fe9f 	bl	80050a2 <_GetAvailWriteSpace>
 8005364:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	4293      	cmp	r3, r2
 800536c:	bf28      	it	cs
 800536e:	4613      	movcs	r3, r2
 8005370:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8005372:	69fa      	ldr	r2, [r7, #28]
 8005374:	69b9      	ldr	r1, [r7, #24]
 8005376:	6978      	ldr	r0, [r7, #20]
 8005378:	f7ff fe4b 	bl	8005012 <_WriteNoCheck>
    break;
 800537c:	e009      	b.n	8005392 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	69b9      	ldr	r1, [r7, #24]
 8005382:	6978      	ldr	r0, [r7, #20]
 8005384:	f7ff fde8 	bl	8004f58 <_WriteBlocking>
 8005388:	61f8      	str	r0, [r7, #28]
    break;
 800538a:	e002      	b.n	8005392 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 800538c:	2300      	movs	r3, #0
 800538e:	61fb      	str	r3, [r7, #28]
    break;
 8005390:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8005392:	69fb      	ldr	r3, [r7, #28]
}
 8005394:	4618      	mov	r0, r3
 8005396:	3720      	adds	r7, #32
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}
 800539c:	20012ed4 	.word	0x20012ed4

080053a0 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b088      	sub	sp, #32
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80053ac:	4b0e      	ldr	r3, [pc, #56]	; (80053e8 <SEGGER_RTT_WriteDownBuffer+0x48>)
 80053ae:	61fb      	str	r3, [r7, #28]
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d101      	bne.n	80053be <SEGGER_RTT_WriteDownBuffer+0x1e>
 80053ba:	f7ff fd75 	bl	8004ea8 <_DoInit>
  SEGGER_RTT_LOCK();
 80053be:	f3ef 8311 	mrs	r3, BASEPRI
 80053c2:	f04f 0120 	mov.w	r1, #32
 80053c6:	f381 8811 	msr	BASEPRI, r1
 80053ca:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	68b9      	ldr	r1, [r7, #8]
 80053d0:	68f8      	ldr	r0, [r7, #12]
 80053d2:	f7ff ff95 	bl	8005300 <SEGGER_RTT_WriteDownBufferNoLock>
 80053d6:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80053de:	697b      	ldr	r3, [r7, #20]
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3720      	adds	r7, #32
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}
 80053e8:	20012ed4 	.word	0x20012ed4

080053ec <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b088      	sub	sp, #32
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	607a      	str	r2, [r7, #4]
 80053f8:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80053fa:	4b3d      	ldr	r3, [pc, #244]	; (80054f0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80053fc:	61bb      	str	r3, [r7, #24]
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	b2db      	uxtb	r3, r3
 8005404:	2b00      	cmp	r3, #0
 8005406:	d101      	bne.n	800540c <SEGGER_RTT_AllocUpBuffer+0x20>
 8005408:	f7ff fd4e 	bl	8004ea8 <_DoInit>
  SEGGER_RTT_LOCK();
 800540c:	f3ef 8311 	mrs	r3, BASEPRI
 8005410:	f04f 0120 	mov.w	r1, #32
 8005414:	f381 8811 	msr	BASEPRI, r1
 8005418:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800541a:	4b35      	ldr	r3, [pc, #212]	; (80054f0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800541c:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800541e:	2300      	movs	r3, #0
 8005420:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8005422:	6939      	ldr	r1, [r7, #16]
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	1c5a      	adds	r2, r3, #1
 8005428:	4613      	mov	r3, r2
 800542a:	005b      	lsls	r3, r3, #1
 800542c:	4413      	add	r3, r2
 800542e:	00db      	lsls	r3, r3, #3
 8005430:	440b      	add	r3, r1
 8005432:	3304      	adds	r3, #4
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d008      	beq.n	800544c <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800543a:	69fb      	ldr	r3, [r7, #28]
 800543c:	3301      	adds	r3, #1
 800543e:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	691b      	ldr	r3, [r3, #16]
 8005444:	69fa      	ldr	r2, [r7, #28]
 8005446:	429a      	cmp	r2, r3
 8005448:	dbeb      	blt.n	8005422 <SEGGER_RTT_AllocUpBuffer+0x36>
 800544a:	e000      	b.n	800544e <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 800544c:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	69fa      	ldr	r2, [r7, #28]
 8005454:	429a      	cmp	r2, r3
 8005456:	da3f      	bge.n	80054d8 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005458:	6939      	ldr	r1, [r7, #16]
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	1c5a      	adds	r2, r3, #1
 800545e:	4613      	mov	r3, r2
 8005460:	005b      	lsls	r3, r3, #1
 8005462:	4413      	add	r3, r2
 8005464:	00db      	lsls	r3, r3, #3
 8005466:	440b      	add	r3, r1
 8005468:	68fa      	ldr	r2, [r7, #12]
 800546a:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800546c:	6939      	ldr	r1, [r7, #16]
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	1c5a      	adds	r2, r3, #1
 8005472:	4613      	mov	r3, r2
 8005474:	005b      	lsls	r3, r3, #1
 8005476:	4413      	add	r3, r2
 8005478:	00db      	lsls	r3, r3, #3
 800547a:	440b      	add	r3, r1
 800547c:	3304      	adds	r3, #4
 800547e:	68ba      	ldr	r2, [r7, #8]
 8005480:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005482:	6939      	ldr	r1, [r7, #16]
 8005484:	69fa      	ldr	r2, [r7, #28]
 8005486:	4613      	mov	r3, r2
 8005488:	005b      	lsls	r3, r3, #1
 800548a:	4413      	add	r3, r2
 800548c:	00db      	lsls	r3, r3, #3
 800548e:	440b      	add	r3, r1
 8005490:	3320      	adds	r3, #32
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005496:	6939      	ldr	r1, [r7, #16]
 8005498:	69fa      	ldr	r2, [r7, #28]
 800549a:	4613      	mov	r3, r2
 800549c:	005b      	lsls	r3, r3, #1
 800549e:	4413      	add	r3, r2
 80054a0:	00db      	lsls	r3, r3, #3
 80054a2:	440b      	add	r3, r1
 80054a4:	3328      	adds	r3, #40	; 0x28
 80054a6:	2200      	movs	r2, #0
 80054a8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80054aa:	6939      	ldr	r1, [r7, #16]
 80054ac:	69fa      	ldr	r2, [r7, #28]
 80054ae:	4613      	mov	r3, r2
 80054b0:	005b      	lsls	r3, r3, #1
 80054b2:	4413      	add	r3, r2
 80054b4:	00db      	lsls	r3, r3, #3
 80054b6:	440b      	add	r3, r1
 80054b8:	3324      	adds	r3, #36	; 0x24
 80054ba:	2200      	movs	r2, #0
 80054bc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80054be:	6939      	ldr	r1, [r7, #16]
 80054c0:	69fa      	ldr	r2, [r7, #28]
 80054c2:	4613      	mov	r3, r2
 80054c4:	005b      	lsls	r3, r3, #1
 80054c6:	4413      	add	r3, r2
 80054c8:	00db      	lsls	r3, r3, #3
 80054ca:	440b      	add	r3, r1
 80054cc:	332c      	adds	r3, #44	; 0x2c
 80054ce:	683a      	ldr	r2, [r7, #0]
 80054d0:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80054d2:	f3bf 8f5f 	dmb	sy
 80054d6:	e002      	b.n	80054de <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80054d8:	f04f 33ff 	mov.w	r3, #4294967295
 80054dc:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80054e4:	69fb      	ldr	r3, [r7, #28]
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3720      	adds	r7, #32
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
 80054ee:	bf00      	nop
 80054f0:	20012ed4 	.word	0x20012ed4

080054f4 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b088      	sub	sp, #32
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	60b9      	str	r1, [r7, #8]
 80054fe:	607a      	str	r2, [r7, #4]
 8005500:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005502:	4b33      	ldr	r3, [pc, #204]	; (80055d0 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005504:	61bb      	str	r3, [r7, #24]
 8005506:	69bb      	ldr	r3, [r7, #24]
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	b2db      	uxtb	r3, r3
 800550c:	2b00      	cmp	r3, #0
 800550e:	d101      	bne.n	8005514 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005510:	f7ff fcca 	bl	8004ea8 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005514:	4b2e      	ldr	r3, [pc, #184]	; (80055d0 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005516:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	695b      	ldr	r3, [r3, #20]
 800551c:	461a      	mov	r2, r3
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	4293      	cmp	r3, r2
 8005522:	d24d      	bcs.n	80055c0 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8005524:	f3ef 8311 	mrs	r3, BASEPRI
 8005528:	f04f 0120 	mov.w	r1, #32
 800552c:	f381 8811 	msr	BASEPRI, r1
 8005530:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d031      	beq.n	800559c <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8005538:	6979      	ldr	r1, [r7, #20]
 800553a:	68fa      	ldr	r2, [r7, #12]
 800553c:	4613      	mov	r3, r2
 800553e:	005b      	lsls	r3, r3, #1
 8005540:	4413      	add	r3, r2
 8005542:	00db      	lsls	r3, r3, #3
 8005544:	440b      	add	r3, r1
 8005546:	3360      	adds	r3, #96	; 0x60
 8005548:	68ba      	ldr	r2, [r7, #8]
 800554a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 800554c:	6979      	ldr	r1, [r7, #20]
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	4613      	mov	r3, r2
 8005552:	005b      	lsls	r3, r3, #1
 8005554:	4413      	add	r3, r2
 8005556:	00db      	lsls	r3, r3, #3
 8005558:	440b      	add	r3, r1
 800555a:	3364      	adds	r3, #100	; 0x64
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8005560:	6979      	ldr	r1, [r7, #20]
 8005562:	68fa      	ldr	r2, [r7, #12]
 8005564:	4613      	mov	r3, r2
 8005566:	005b      	lsls	r3, r3, #1
 8005568:	4413      	add	r3, r2
 800556a:	00db      	lsls	r3, r3, #3
 800556c:	440b      	add	r3, r1
 800556e:	3368      	adds	r3, #104	; 0x68
 8005570:	683a      	ldr	r2, [r7, #0]
 8005572:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8005574:	6979      	ldr	r1, [r7, #20]
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	4613      	mov	r3, r2
 800557a:	005b      	lsls	r3, r3, #1
 800557c:	4413      	add	r3, r2
 800557e:	00db      	lsls	r3, r3, #3
 8005580:	440b      	add	r3, r1
 8005582:	3370      	adds	r3, #112	; 0x70
 8005584:	2200      	movs	r2, #0
 8005586:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8005588:	6979      	ldr	r1, [r7, #20]
 800558a:	68fa      	ldr	r2, [r7, #12]
 800558c:	4613      	mov	r3, r2
 800558e:	005b      	lsls	r3, r3, #1
 8005590:	4413      	add	r3, r2
 8005592:	00db      	lsls	r3, r3, #3
 8005594:	440b      	add	r3, r1
 8005596:	336c      	adds	r3, #108	; 0x6c
 8005598:	2200      	movs	r2, #0
 800559a:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 800559c:	6979      	ldr	r1, [r7, #20]
 800559e:	68fa      	ldr	r2, [r7, #12]
 80055a0:	4613      	mov	r3, r2
 80055a2:	005b      	lsls	r3, r3, #1
 80055a4:	4413      	add	r3, r2
 80055a6:	00db      	lsls	r3, r3, #3
 80055a8:	440b      	add	r3, r1
 80055aa:	3374      	adds	r3, #116	; 0x74
 80055ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055ae:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80055b0:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80055ba:	2300      	movs	r3, #0
 80055bc:	61fb      	str	r3, [r7, #28]
 80055be:	e002      	b.n	80055c6 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 80055c0:	f04f 33ff 	mov.w	r3, #4294967295
 80055c4:	61fb      	str	r3, [r7, #28]
  }
  return r;
 80055c6:	69fb      	ldr	r3, [r7, #28]
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3720      	adds	r7, #32
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}
 80055d0:	20012ed4 	.word	0x20012ed4

080055d4 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80055d4:	b480      	push	{r7}
 80055d6:	b087      	sub	sp, #28
 80055d8:	af00      	add	r7, sp, #0
 80055da:	60f8      	str	r0, [r7, #12]
 80055dc:	60b9      	str	r1, [r7, #8]
 80055de:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80055e0:	2300      	movs	r3, #0
 80055e2:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80055e4:	e002      	b.n	80055ec <_EncodeStr+0x18>
    Len++;
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	3301      	adds	r3, #1
 80055ea:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80055ec:	68ba      	ldr	r2, [r7, #8]
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	4413      	add	r3, r2
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d1f6      	bne.n	80055e6 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80055f8:	693a      	ldr	r2, [r7, #16]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d901      	bls.n	8005604 <_EncodeStr+0x30>
    Len = Limit;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	2bfe      	cmp	r3, #254	; 0xfe
 8005608:	d806      	bhi.n	8005618 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	1c5a      	adds	r2, r3, #1
 800560e:	60fa      	str	r2, [r7, #12]
 8005610:	693a      	ldr	r2, [r7, #16]
 8005612:	b2d2      	uxtb	r2, r2
 8005614:	701a      	strb	r2, [r3, #0]
 8005616:	e011      	b.n	800563c <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	1c5a      	adds	r2, r3, #1
 800561c:	60fa      	str	r2, [r7, #12]
 800561e:	22ff      	movs	r2, #255	; 0xff
 8005620:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	1c5a      	adds	r2, r3, #1
 8005626:	60fa      	str	r2, [r7, #12]
 8005628:	693a      	ldr	r2, [r7, #16]
 800562a:	b2d2      	uxtb	r2, r2
 800562c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	0a19      	lsrs	r1, r3, #8
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	1c5a      	adds	r2, r3, #1
 8005636:	60fa      	str	r2, [r7, #12]
 8005638:	b2ca      	uxtb	r2, r1
 800563a:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800563c:	2300      	movs	r3, #0
 800563e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005640:	e00a      	b.n	8005658 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8005642:	68ba      	ldr	r2, [r7, #8]
 8005644:	1c53      	adds	r3, r2, #1
 8005646:	60bb      	str	r3, [r7, #8]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	1c59      	adds	r1, r3, #1
 800564c:	60f9      	str	r1, [r7, #12]
 800564e:	7812      	ldrb	r2, [r2, #0]
 8005650:	701a      	strb	r2, [r3, #0]
    n++;
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	3301      	adds	r3, #1
 8005656:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005658:	697a      	ldr	r2, [r7, #20]
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	429a      	cmp	r2, r3
 800565e:	d3f0      	bcc.n	8005642 <_EncodeStr+0x6e>
  }
  return pPayload;
 8005660:	68fb      	ldr	r3, [r7, #12]
}
 8005662:	4618      	mov	r0, r3
 8005664:	371c      	adds	r7, #28
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr

0800566e <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800566e:	b480      	push	{r7}
 8005670:	b083      	sub	sp, #12
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	3304      	adds	r3, #4
}
 800567a:	4618      	mov	r0, r3
 800567c:	370c      	adds	r7, #12
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr
	...

08005688 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005688:	b580      	push	{r7, lr}
 800568a:	b082      	sub	sp, #8
 800568c:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800568e:	4b35      	ldr	r3, [pc, #212]	; (8005764 <_HandleIncomingPacket+0xdc>)
 8005690:	7e1b      	ldrb	r3, [r3, #24]
 8005692:	4618      	mov	r0, r3
 8005694:	1cfb      	adds	r3, r7, #3
 8005696:	2201      	movs	r2, #1
 8005698:	4619      	mov	r1, r3
 800569a:	f7ff fdab 	bl	80051f4 <SEGGER_RTT_ReadNoLock>
 800569e:	4603      	mov	r3, r0
 80056a0:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	dd59      	ble.n	800575c <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 80056a8:	78fb      	ldrb	r3, [r7, #3]
 80056aa:	2b80      	cmp	r3, #128	; 0x80
 80056ac:	d032      	beq.n	8005714 <_HandleIncomingPacket+0x8c>
 80056ae:	2b80      	cmp	r3, #128	; 0x80
 80056b0:	dc42      	bgt.n	8005738 <_HandleIncomingPacket+0xb0>
 80056b2:	2b07      	cmp	r3, #7
 80056b4:	dc16      	bgt.n	80056e4 <_HandleIncomingPacket+0x5c>
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	dd3e      	ble.n	8005738 <_HandleIncomingPacket+0xb0>
 80056ba:	3b01      	subs	r3, #1
 80056bc:	2b06      	cmp	r3, #6
 80056be:	d83b      	bhi.n	8005738 <_HandleIncomingPacket+0xb0>
 80056c0:	a201      	add	r2, pc, #4	; (adr r2, 80056c8 <_HandleIncomingPacket+0x40>)
 80056c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c6:	bf00      	nop
 80056c8:	080056eb 	.word	0x080056eb
 80056cc:	080056f1 	.word	0x080056f1
 80056d0:	080056f7 	.word	0x080056f7
 80056d4:	080056fd 	.word	0x080056fd
 80056d8:	08005703 	.word	0x08005703
 80056dc:	08005709 	.word	0x08005709
 80056e0:	0800570f 	.word	0x0800570f
 80056e4:	2b7f      	cmp	r3, #127	; 0x7f
 80056e6:	d034      	beq.n	8005752 <_HandleIncomingPacket+0xca>
 80056e8:	e026      	b.n	8005738 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80056ea:	f000 fba9 	bl	8005e40 <SEGGER_SYSVIEW_Start>
      break;
 80056ee:	e035      	b.n	800575c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80056f0:	f000 fc62 	bl	8005fb8 <SEGGER_SYSVIEW_Stop>
      break;
 80056f4:	e032      	b.n	800575c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80056f6:	f000 fe3b 	bl	8006370 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80056fa:	e02f      	b.n	800575c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80056fc:	f000 fe00 	bl	8006300 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005700:	e02c      	b.n	800575c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005702:	f000 fc7f 	bl	8006004 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005706:	e029      	b.n	800575c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005708:	f001 f86e 	bl	80067e8 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800570c:	e026      	b.n	800575c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800570e:	f001 f84d 	bl	80067ac <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005712:	e023      	b.n	800575c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005714:	4b13      	ldr	r3, [pc, #76]	; (8005764 <_HandleIncomingPacket+0xdc>)
 8005716:	7e1b      	ldrb	r3, [r3, #24]
 8005718:	4618      	mov	r0, r3
 800571a:	1cfb      	adds	r3, r7, #3
 800571c:	2201      	movs	r2, #1
 800571e:	4619      	mov	r1, r3
 8005720:	f7ff fd68 	bl	80051f4 <SEGGER_RTT_ReadNoLock>
 8005724:	4603      	mov	r3, r0
 8005726:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2b00      	cmp	r3, #0
 800572c:	dd13      	ble.n	8005756 <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800572e:	78fb      	ldrb	r3, [r7, #3]
 8005730:	4618      	mov	r0, r3
 8005732:	f000 ffbb 	bl	80066ac <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005736:	e00e      	b.n	8005756 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005738:	78fb      	ldrb	r3, [r7, #3]
 800573a:	b25b      	sxtb	r3, r3
 800573c:	2b00      	cmp	r3, #0
 800573e:	da0c      	bge.n	800575a <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005740:	4b08      	ldr	r3, [pc, #32]	; (8005764 <_HandleIncomingPacket+0xdc>)
 8005742:	7e1b      	ldrb	r3, [r3, #24]
 8005744:	4618      	mov	r0, r3
 8005746:	1cfb      	adds	r3, r7, #3
 8005748:	2201      	movs	r2, #1
 800574a:	4619      	mov	r1, r3
 800574c:	f7ff fd52 	bl	80051f4 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005750:	e003      	b.n	800575a <_HandleIncomingPacket+0xd2>
      break;
 8005752:	bf00      	nop
 8005754:	e002      	b.n	800575c <_HandleIncomingPacket+0xd4>
      break;
 8005756:	bf00      	nop
 8005758:	e000      	b.n	800575c <_HandleIncomingPacket+0xd4>
      break;
 800575a:	bf00      	nop
    }
  }
}
 800575c:	bf00      	nop
 800575e:	3708      	adds	r7, #8
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}
 8005764:	20014394 	.word	0x20014394

08005768 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005768:	b580      	push	{r7, lr}
 800576a:	b08c      	sub	sp, #48	; 0x30
 800576c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800576e:	2301      	movs	r3, #1
 8005770:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005772:	1d3b      	adds	r3, r7, #4
 8005774:	3301      	adds	r3, #1
 8005776:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800577c:	4b32      	ldr	r3, [pc, #200]	; (8005848 <_TrySendOverflowPacket+0xe0>)
 800577e:	695b      	ldr	r3, [r3, #20]
 8005780:	62bb      	str	r3, [r7, #40]	; 0x28
 8005782:	e00b      	b.n	800579c <_TrySendOverflowPacket+0x34>
 8005784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005786:	b2da      	uxtb	r2, r3
 8005788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800578a:	1c59      	adds	r1, r3, #1
 800578c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800578e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005792:	b2d2      	uxtb	r2, r2
 8005794:	701a      	strb	r2, [r3, #0]
 8005796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005798:	09db      	lsrs	r3, r3, #7
 800579a:	62bb      	str	r3, [r7, #40]	; 0x28
 800579c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579e:	2b7f      	cmp	r3, #127	; 0x7f
 80057a0:	d8f0      	bhi.n	8005784 <_TrySendOverflowPacket+0x1c>
 80057a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a4:	1c5a      	adds	r2, r3, #1
 80057a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80057a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057aa:	b2d2      	uxtb	r2, r2
 80057ac:	701a      	strb	r2, [r3, #0]
 80057ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057b0:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80057b2:	4b26      	ldr	r3, [pc, #152]	; (800584c <_TrySendOverflowPacket+0xe4>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80057b8:	4b23      	ldr	r3, [pc, #140]	; (8005848 <_TrySendOverflowPacket+0xe0>)
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	69ba      	ldr	r2, [r7, #24]
 80057be:	1ad3      	subs	r3, r2, r3
 80057c0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	627b      	str	r3, [r7, #36]	; 0x24
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	623b      	str	r3, [r7, #32]
 80057ca:	e00b      	b.n	80057e4 <_TrySendOverflowPacket+0x7c>
 80057cc:	6a3b      	ldr	r3, [r7, #32]
 80057ce:	b2da      	uxtb	r2, r3
 80057d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d2:	1c59      	adds	r1, r3, #1
 80057d4:	6279      	str	r1, [r7, #36]	; 0x24
 80057d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057da:	b2d2      	uxtb	r2, r2
 80057dc:	701a      	strb	r2, [r3, #0]
 80057de:	6a3b      	ldr	r3, [r7, #32]
 80057e0:	09db      	lsrs	r3, r3, #7
 80057e2:	623b      	str	r3, [r7, #32]
 80057e4:	6a3b      	ldr	r3, [r7, #32]
 80057e6:	2b7f      	cmp	r3, #127	; 0x7f
 80057e8:	d8f0      	bhi.n	80057cc <_TrySendOverflowPacket+0x64>
 80057ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ec:	1c5a      	adds	r2, r3, #1
 80057ee:	627a      	str	r2, [r7, #36]	; 0x24
 80057f0:	6a3a      	ldr	r2, [r7, #32]
 80057f2:	b2d2      	uxtb	r2, r2
 80057f4:	701a      	strb	r2, [r3, #0]
 80057f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f8:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80057fa:	4b13      	ldr	r3, [pc, #76]	; (8005848 <_TrySendOverflowPacket+0xe0>)
 80057fc:	785b      	ldrb	r3, [r3, #1]
 80057fe:	4618      	mov	r0, r3
 8005800:	1d3b      	adds	r3, r7, #4
 8005802:	69fa      	ldr	r2, [r7, #28]
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	461a      	mov	r2, r3
 8005808:	1d3b      	adds	r3, r7, #4
 800580a:	4619      	mov	r1, r3
 800580c:	f7fa fd00 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005810:	4603      	mov	r3, r0
 8005812:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8005814:	f7ff fabe 	bl	8004d94 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d009      	beq.n	8005832 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800581e:	4a0a      	ldr	r2, [pc, #40]	; (8005848 <_TrySendOverflowPacket+0xe0>)
 8005820:	69bb      	ldr	r3, [r7, #24]
 8005822:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005824:	4b08      	ldr	r3, [pc, #32]	; (8005848 <_TrySendOverflowPacket+0xe0>)
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	3b01      	subs	r3, #1
 800582a:	b2da      	uxtb	r2, r3
 800582c:	4b06      	ldr	r3, [pc, #24]	; (8005848 <_TrySendOverflowPacket+0xe0>)
 800582e:	701a      	strb	r2, [r3, #0]
 8005830:	e004      	b.n	800583c <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005832:	4b05      	ldr	r3, [pc, #20]	; (8005848 <_TrySendOverflowPacket+0xe0>)
 8005834:	695b      	ldr	r3, [r3, #20]
 8005836:	3301      	adds	r3, #1
 8005838:	4a03      	ldr	r2, [pc, #12]	; (8005848 <_TrySendOverflowPacket+0xe0>)
 800583a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800583c:	693b      	ldr	r3, [r7, #16]
}
 800583e:	4618      	mov	r0, r3
 8005840:	3730      	adds	r7, #48	; 0x30
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
 8005846:	bf00      	nop
 8005848:	20014394 	.word	0x20014394
 800584c:	e0001004 	.word	0xe0001004

08005850 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005850:	b580      	push	{r7, lr}
 8005852:	b08a      	sub	sp, #40	; 0x28
 8005854:	af00      	add	r7, sp, #0
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	60b9      	str	r1, [r7, #8]
 800585a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800585c:	4b6d      	ldr	r3, [pc, #436]	; (8005a14 <_SendPacket+0x1c4>)
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	2b01      	cmp	r3, #1
 8005862:	d010      	beq.n	8005886 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005864:	4b6b      	ldr	r3, [pc, #428]	; (8005a14 <_SendPacket+0x1c4>)
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	2b00      	cmp	r3, #0
 800586a:	f000 80a5 	beq.w	80059b8 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800586e:	4b69      	ldr	r3, [pc, #420]	; (8005a14 <_SendPacket+0x1c4>)
 8005870:	781b      	ldrb	r3, [r3, #0]
 8005872:	2b02      	cmp	r3, #2
 8005874:	d109      	bne.n	800588a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005876:	f7ff ff77 	bl	8005768 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800587a:	4b66      	ldr	r3, [pc, #408]	; (8005a14 <_SendPacket+0x1c4>)
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	2b01      	cmp	r3, #1
 8005880:	f040 809c 	bne.w	80059bc <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8005884:	e001      	b.n	800588a <_SendPacket+0x3a>
    goto Send;
 8005886:	bf00      	nop
 8005888:	e000      	b.n	800588c <_SendPacket+0x3c>
Send:
 800588a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2b1f      	cmp	r3, #31
 8005890:	d809      	bhi.n	80058a6 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005892:	4b60      	ldr	r3, [pc, #384]	; (8005a14 <_SendPacket+0x1c4>)
 8005894:	69da      	ldr	r2, [r3, #28]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	fa22 f303 	lsr.w	r3, r2, r3
 800589c:	f003 0301 	and.w	r3, r3, #1
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	f040 808d 	bne.w	80059c0 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2b17      	cmp	r3, #23
 80058aa:	d807      	bhi.n	80058bc <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	3b01      	subs	r3, #1
 80058b0:	60fb      	str	r3, [r7, #12]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	b2da      	uxtb	r2, r3
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	701a      	strb	r2, [r3, #0]
 80058ba:	e03d      	b.n	8005938 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80058bc:	68ba      	ldr	r2, [r7, #8]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	1ad3      	subs	r3, r2, r3
 80058c2:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	2b7f      	cmp	r3, #127	; 0x7f
 80058c8:	d912      	bls.n	80058f0 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	09da      	lsrs	r2, r3, #7
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	3b01      	subs	r3, #1
 80058d2:	60fb      	str	r3, [r7, #12]
 80058d4:	b2d2      	uxtb	r2, r2
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80058da:	69fb      	ldr	r3, [r7, #28]
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	3a01      	subs	r2, #1
 80058e2:	60fa      	str	r2, [r7, #12]
 80058e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80058e8:	b2da      	uxtb	r2, r3
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	701a      	strb	r2, [r3, #0]
 80058ee:	e006      	b.n	80058fe <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	3b01      	subs	r3, #1
 80058f4:	60fb      	str	r3, [r7, #12]
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	b2da      	uxtb	r2, r3
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2b7f      	cmp	r3, #127	; 0x7f
 8005902:	d912      	bls.n	800592a <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	09da      	lsrs	r2, r3, #7
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	3b01      	subs	r3, #1
 800590c:	60fb      	str	r3, [r7, #12]
 800590e:	b2d2      	uxtb	r2, r2
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	b2db      	uxtb	r3, r3
 8005918:	68fa      	ldr	r2, [r7, #12]
 800591a:	3a01      	subs	r2, #1
 800591c:	60fa      	str	r2, [r7, #12]
 800591e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005922:	b2da      	uxtb	r2, r3
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	701a      	strb	r2, [r3, #0]
 8005928:	e006      	b.n	8005938 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	3b01      	subs	r3, #1
 800592e:	60fb      	str	r3, [r7, #12]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	b2da      	uxtb	r2, r3
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005938:	4b37      	ldr	r3, [pc, #220]	; (8005a18 <_SendPacket+0x1c8>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800593e:	4b35      	ldr	r3, [pc, #212]	; (8005a14 <_SendPacket+0x1c4>)
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	69ba      	ldr	r2, [r7, #24]
 8005944:	1ad3      	subs	r3, r2, r3
 8005946:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	627b      	str	r3, [r7, #36]	; 0x24
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	623b      	str	r3, [r7, #32]
 8005950:	e00b      	b.n	800596a <_SendPacket+0x11a>
 8005952:	6a3b      	ldr	r3, [r7, #32]
 8005954:	b2da      	uxtb	r2, r3
 8005956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005958:	1c59      	adds	r1, r3, #1
 800595a:	6279      	str	r1, [r7, #36]	; 0x24
 800595c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005960:	b2d2      	uxtb	r2, r2
 8005962:	701a      	strb	r2, [r3, #0]
 8005964:	6a3b      	ldr	r3, [r7, #32]
 8005966:	09db      	lsrs	r3, r3, #7
 8005968:	623b      	str	r3, [r7, #32]
 800596a:	6a3b      	ldr	r3, [r7, #32]
 800596c:	2b7f      	cmp	r3, #127	; 0x7f
 800596e:	d8f0      	bhi.n	8005952 <_SendPacket+0x102>
 8005970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005972:	1c5a      	adds	r2, r3, #1
 8005974:	627a      	str	r2, [r7, #36]	; 0x24
 8005976:	6a3a      	ldr	r2, [r7, #32]
 8005978:	b2d2      	uxtb	r2, r2
 800597a:	701a      	strb	r2, [r3, #0]
 800597c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597e:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005980:	4b24      	ldr	r3, [pc, #144]	; (8005a14 <_SendPacket+0x1c4>)
 8005982:	785b      	ldrb	r3, [r3, #1]
 8005984:	4618      	mov	r0, r3
 8005986:	68ba      	ldr	r2, [r7, #8]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	1ad3      	subs	r3, r2, r3
 800598c:	461a      	mov	r2, r3
 800598e:	68f9      	ldr	r1, [r7, #12]
 8005990:	f7fa fc3e 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005994:	4603      	mov	r3, r0
 8005996:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8005998:	f7ff f9fc 	bl	8004d94 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d003      	beq.n	80059aa <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80059a2:	4a1c      	ldr	r2, [pc, #112]	; (8005a14 <_SendPacket+0x1c4>)
 80059a4:	69bb      	ldr	r3, [r7, #24]
 80059a6:	60d3      	str	r3, [r2, #12]
 80059a8:	e00b      	b.n	80059c2 <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80059aa:	4b1a      	ldr	r3, [pc, #104]	; (8005a14 <_SendPacket+0x1c4>)
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	3301      	adds	r3, #1
 80059b0:	b2da      	uxtb	r2, r3
 80059b2:	4b18      	ldr	r3, [pc, #96]	; (8005a14 <_SendPacket+0x1c4>)
 80059b4:	701a      	strb	r2, [r3, #0]
 80059b6:	e004      	b.n	80059c2 <_SendPacket+0x172>
    goto SendDone;
 80059b8:	bf00      	nop
 80059ba:	e002      	b.n	80059c2 <_SendPacket+0x172>
      goto SendDone;
 80059bc:	bf00      	nop
 80059be:	e000      	b.n	80059c2 <_SendPacket+0x172>
      goto SendDone;
 80059c0:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80059c2:	4b14      	ldr	r3, [pc, #80]	; (8005a14 <_SendPacket+0x1c4>)
 80059c4:	7e1b      	ldrb	r3, [r3, #24]
 80059c6:	4619      	mov	r1, r3
 80059c8:	4a14      	ldr	r2, [pc, #80]	; (8005a1c <_SendPacket+0x1cc>)
 80059ca:	460b      	mov	r3, r1
 80059cc:	005b      	lsls	r3, r3, #1
 80059ce:	440b      	add	r3, r1
 80059d0:	00db      	lsls	r3, r3, #3
 80059d2:	4413      	add	r3, r2
 80059d4:	336c      	adds	r3, #108	; 0x6c
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	4b0e      	ldr	r3, [pc, #56]	; (8005a14 <_SendPacket+0x1c4>)
 80059da:	7e1b      	ldrb	r3, [r3, #24]
 80059dc:	4618      	mov	r0, r3
 80059de:	490f      	ldr	r1, [pc, #60]	; (8005a1c <_SendPacket+0x1cc>)
 80059e0:	4603      	mov	r3, r0
 80059e2:	005b      	lsls	r3, r3, #1
 80059e4:	4403      	add	r3, r0
 80059e6:	00db      	lsls	r3, r3, #3
 80059e8:	440b      	add	r3, r1
 80059ea:	3370      	adds	r3, #112	; 0x70
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d00b      	beq.n	8005a0a <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80059f2:	4b08      	ldr	r3, [pc, #32]	; (8005a14 <_SendPacket+0x1c4>)
 80059f4:	789b      	ldrb	r3, [r3, #2]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d107      	bne.n	8005a0a <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80059fa:	4b06      	ldr	r3, [pc, #24]	; (8005a14 <_SendPacket+0x1c4>)
 80059fc:	2201      	movs	r2, #1
 80059fe:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005a00:	f7ff fe42 	bl	8005688 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005a04:	4b03      	ldr	r3, [pc, #12]	; (8005a14 <_SendPacket+0x1c4>)
 8005a06:	2200      	movs	r2, #0
 8005a08:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005a0a:	bf00      	nop
 8005a0c:	3728      	adds	r7, #40	; 0x28
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	bf00      	nop
 8005a14:	20014394 	.word	0x20014394
 8005a18:	e0001004 	.word	0xe0001004
 8005a1c:	20012ed4 	.word	0x20012ed4

08005a20 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b086      	sub	sp, #24
 8005a24:	af02      	add	r7, sp, #8
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	60b9      	str	r1, [r7, #8]
 8005a2a:	607a      	str	r2, [r7, #4]
 8005a2c:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005a2e:	2300      	movs	r3, #0
 8005a30:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005a34:	4917      	ldr	r1, [pc, #92]	; (8005a94 <SEGGER_SYSVIEW_Init+0x74>)
 8005a36:	4818      	ldr	r0, [pc, #96]	; (8005a98 <SEGGER_SYSVIEW_Init+0x78>)
 8005a38:	f7ff fcd8 	bl	80053ec <SEGGER_RTT_AllocUpBuffer>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	b2da      	uxtb	r2, r3
 8005a40:	4b16      	ldr	r3, [pc, #88]	; (8005a9c <SEGGER_SYSVIEW_Init+0x7c>)
 8005a42:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005a44:	4b15      	ldr	r3, [pc, #84]	; (8005a9c <SEGGER_SYSVIEW_Init+0x7c>)
 8005a46:	785a      	ldrb	r2, [r3, #1]
 8005a48:	4b14      	ldr	r3, [pc, #80]	; (8005a9c <SEGGER_SYSVIEW_Init+0x7c>)
 8005a4a:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005a4c:	4b13      	ldr	r3, [pc, #76]	; (8005a9c <SEGGER_SYSVIEW_Init+0x7c>)
 8005a4e:	7e1b      	ldrb	r3, [r3, #24]
 8005a50:	4618      	mov	r0, r3
 8005a52:	2300      	movs	r3, #0
 8005a54:	9300      	str	r3, [sp, #0]
 8005a56:	2308      	movs	r3, #8
 8005a58:	4a11      	ldr	r2, [pc, #68]	; (8005aa0 <SEGGER_SYSVIEW_Init+0x80>)
 8005a5a:	490f      	ldr	r1, [pc, #60]	; (8005a98 <SEGGER_SYSVIEW_Init+0x78>)
 8005a5c:	f7ff fd4a 	bl	80054f4 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005a60:	4b0e      	ldr	r3, [pc, #56]	; (8005a9c <SEGGER_SYSVIEW_Init+0x7c>)
 8005a62:	2200      	movs	r2, #0
 8005a64:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005a66:	4b0f      	ldr	r3, [pc, #60]	; (8005aa4 <SEGGER_SYSVIEW_Init+0x84>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a0c      	ldr	r2, [pc, #48]	; (8005a9c <SEGGER_SYSVIEW_Init+0x7c>)
 8005a6c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005a6e:	4a0b      	ldr	r2, [pc, #44]	; (8005a9c <SEGGER_SYSVIEW_Init+0x7c>)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005a74:	4a09      	ldr	r2, [pc, #36]	; (8005a9c <SEGGER_SYSVIEW_Init+0x7c>)
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005a7a:	4a08      	ldr	r2, [pc, #32]	; (8005a9c <SEGGER_SYSVIEW_Init+0x7c>)
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005a80:	4a06      	ldr	r2, [pc, #24]	; (8005a9c <SEGGER_SYSVIEW_Init+0x7c>)
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005a86:	4b05      	ldr	r3, [pc, #20]	; (8005a9c <SEGGER_SYSVIEW_Init+0x7c>)
 8005a88:	2200      	movs	r2, #0
 8005a8a:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005a8c:	bf00      	nop
 8005a8e:	3710      	adds	r7, #16
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}
 8005a94:	2001338c 	.word	0x2001338c
 8005a98:	08006b50 	.word	0x08006b50
 8005a9c:	20014394 	.word	0x20014394
 8005aa0:	2001438c 	.word	0x2001438c
 8005aa4:	e0001004 	.word	0xe0001004

08005aa8 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005ab0:	4a04      	ldr	r2, [pc, #16]	; (8005ac4 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6113      	str	r3, [r2, #16]
}
 8005ab6:	bf00      	nop
 8005ab8:	370c      	adds	r7, #12
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr
 8005ac2:	bf00      	nop
 8005ac4:	20014394 	.word	0x20014394

08005ac8 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b084      	sub	sp, #16
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005ad0:	f3ef 8311 	mrs	r3, BASEPRI
 8005ad4:	f04f 0120 	mov.w	r1, #32
 8005ad8:	f381 8811 	msr	BASEPRI, r1
 8005adc:	60fb      	str	r3, [r7, #12]
 8005ade:	4808      	ldr	r0, [pc, #32]	; (8005b00 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005ae0:	f7ff fdc5 	bl	800566e <_PreparePacket>
 8005ae4:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	68b9      	ldr	r1, [r7, #8]
 8005aea:	68b8      	ldr	r0, [r7, #8]
 8005aec:	f7ff feb0 	bl	8005850 <_SendPacket>
  RECORD_END();
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f383 8811 	msr	BASEPRI, r3
}
 8005af6:	bf00      	nop
 8005af8:	3710      	adds	r7, #16
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	200143c4 	.word	0x200143c4

08005b04 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b088      	sub	sp, #32
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005b0e:	f3ef 8311 	mrs	r3, BASEPRI
 8005b12:	f04f 0120 	mov.w	r1, #32
 8005b16:	f381 8811 	msr	BASEPRI, r1
 8005b1a:	617b      	str	r3, [r7, #20]
 8005b1c:	4816      	ldr	r0, [pc, #88]	; (8005b78 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005b1e:	f7ff fda6 	bl	800566e <_PreparePacket>
 8005b22:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	61fb      	str	r3, [r7, #28]
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	61bb      	str	r3, [r7, #24]
 8005b30:	e00b      	b.n	8005b4a <SEGGER_SYSVIEW_RecordU32+0x46>
 8005b32:	69bb      	ldr	r3, [r7, #24]
 8005b34:	b2da      	uxtb	r2, r3
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	1c59      	adds	r1, r3, #1
 8005b3a:	61f9      	str	r1, [r7, #28]
 8005b3c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b40:	b2d2      	uxtb	r2, r2
 8005b42:	701a      	strb	r2, [r3, #0]
 8005b44:	69bb      	ldr	r3, [r7, #24]
 8005b46:	09db      	lsrs	r3, r3, #7
 8005b48:	61bb      	str	r3, [r7, #24]
 8005b4a:	69bb      	ldr	r3, [r7, #24]
 8005b4c:	2b7f      	cmp	r3, #127	; 0x7f
 8005b4e:	d8f0      	bhi.n	8005b32 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005b50:	69fb      	ldr	r3, [r7, #28]
 8005b52:	1c5a      	adds	r2, r3, #1
 8005b54:	61fa      	str	r2, [r7, #28]
 8005b56:	69ba      	ldr	r2, [r7, #24]
 8005b58:	b2d2      	uxtb	r2, r2
 8005b5a:	701a      	strb	r2, [r3, #0]
 8005b5c:	69fb      	ldr	r3, [r7, #28]
 8005b5e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	68f9      	ldr	r1, [r7, #12]
 8005b64:	6938      	ldr	r0, [r7, #16]
 8005b66:	f7ff fe73 	bl	8005850 <_SendPacket>
  RECORD_END();
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	f383 8811 	msr	BASEPRI, r3
}
 8005b70:	bf00      	nop
 8005b72:	3720      	adds	r7, #32
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	200143c4 	.word	0x200143c4

08005b7c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b08c      	sub	sp, #48	; 0x30
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	60f8      	str	r0, [r7, #12]
 8005b84:	60b9      	str	r1, [r7, #8]
 8005b86:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005b88:	f3ef 8311 	mrs	r3, BASEPRI
 8005b8c:	f04f 0120 	mov.w	r1, #32
 8005b90:	f381 8811 	msr	BASEPRI, r1
 8005b94:	61fb      	str	r3, [r7, #28]
 8005b96:	4825      	ldr	r0, [pc, #148]	; (8005c2c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005b98:	f7ff fd69 	bl	800566e <_PreparePacket>
 8005b9c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005baa:	e00b      	b.n	8005bc4 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bae:	b2da      	uxtb	r2, r3
 8005bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb2:	1c59      	adds	r1, r3, #1
 8005bb4:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005bb6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bba:	b2d2      	uxtb	r2, r2
 8005bbc:	701a      	strb	r2, [r3, #0]
 8005bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc0:	09db      	lsrs	r3, r3, #7
 8005bc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc6:	2b7f      	cmp	r3, #127	; 0x7f
 8005bc8:	d8f0      	bhi.n	8005bac <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bcc:	1c5a      	adds	r2, r3, #1
 8005bce:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005bd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bd2:	b2d2      	uxtb	r2, r2
 8005bd4:	701a      	strb	r2, [r3, #0]
 8005bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bd8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	627b      	str	r3, [r7, #36]	; 0x24
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	623b      	str	r3, [r7, #32]
 8005be2:	e00b      	b.n	8005bfc <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005be4:	6a3b      	ldr	r3, [r7, #32]
 8005be6:	b2da      	uxtb	r2, r3
 8005be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bea:	1c59      	adds	r1, r3, #1
 8005bec:	6279      	str	r1, [r7, #36]	; 0x24
 8005bee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bf2:	b2d2      	uxtb	r2, r2
 8005bf4:	701a      	strb	r2, [r3, #0]
 8005bf6:	6a3b      	ldr	r3, [r7, #32]
 8005bf8:	09db      	lsrs	r3, r3, #7
 8005bfa:	623b      	str	r3, [r7, #32]
 8005bfc:	6a3b      	ldr	r3, [r7, #32]
 8005bfe:	2b7f      	cmp	r3, #127	; 0x7f
 8005c00:	d8f0      	bhi.n	8005be4 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8005c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c04:	1c5a      	adds	r2, r3, #1
 8005c06:	627a      	str	r2, [r7, #36]	; 0x24
 8005c08:	6a3a      	ldr	r2, [r7, #32]
 8005c0a:	b2d2      	uxtb	r2, r2
 8005c0c:	701a      	strb	r2, [r3, #0]
 8005c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c10:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	6979      	ldr	r1, [r7, #20]
 8005c16:	69b8      	ldr	r0, [r7, #24]
 8005c18:	f7ff fe1a 	bl	8005850 <_SendPacket>
  RECORD_END();
 8005c1c:	69fb      	ldr	r3, [r7, #28]
 8005c1e:	f383 8811 	msr	BASEPRI, r3
}
 8005c22:	bf00      	nop
 8005c24:	3730      	adds	r7, #48	; 0x30
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
 8005c2a:	bf00      	nop
 8005c2c:	200143c4 	.word	0x200143c4

08005c30 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b08e      	sub	sp, #56	; 0x38
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	60b9      	str	r1, [r7, #8]
 8005c3a:	607a      	str	r2, [r7, #4]
 8005c3c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8005c3e:	f3ef 8311 	mrs	r3, BASEPRI
 8005c42:	f04f 0120 	mov.w	r1, #32
 8005c46:	f381 8811 	msr	BASEPRI, r1
 8005c4a:	61fb      	str	r3, [r7, #28]
 8005c4c:	4832      	ldr	r0, [pc, #200]	; (8005d18 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8005c4e:	f7ff fd0e 	bl	800566e <_PreparePacket>
 8005c52:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005c54:	69bb      	ldr	r3, [r7, #24]
 8005c56:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	637b      	str	r3, [r7, #52]	; 0x34
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	633b      	str	r3, [r7, #48]	; 0x30
 8005c60:	e00b      	b.n	8005c7a <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8005c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c64:	b2da      	uxtb	r2, r3
 8005c66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c68:	1c59      	adds	r1, r3, #1
 8005c6a:	6379      	str	r1, [r7, #52]	; 0x34
 8005c6c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c70:	b2d2      	uxtb	r2, r2
 8005c72:	701a      	strb	r2, [r3, #0]
 8005c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c76:	09db      	lsrs	r3, r3, #7
 8005c78:	633b      	str	r3, [r7, #48]	; 0x30
 8005c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c7c:	2b7f      	cmp	r3, #127	; 0x7f
 8005c7e:	d8f0      	bhi.n	8005c62 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8005c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c82:	1c5a      	adds	r2, r3, #1
 8005c84:	637a      	str	r2, [r7, #52]	; 0x34
 8005c86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c88:	b2d2      	uxtb	r2, r2
 8005c8a:	701a      	strb	r2, [r3, #0]
 8005c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c8e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c98:	e00b      	b.n	8005cb2 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8005c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c9c:	b2da      	uxtb	r2, r3
 8005c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca0:	1c59      	adds	r1, r3, #1
 8005ca2:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005ca4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ca8:	b2d2      	uxtb	r2, r2
 8005caa:	701a      	strb	r2, [r3, #0]
 8005cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cae:	09db      	lsrs	r3, r3, #7
 8005cb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb4:	2b7f      	cmp	r3, #127	; 0x7f
 8005cb6:	d8f0      	bhi.n	8005c9a <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8005cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cba:	1c5a      	adds	r2, r3, #1
 8005cbc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005cbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cc0:	b2d2      	uxtb	r2, r2
 8005cc2:	701a      	strb	r2, [r3, #0]
 8005cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cc6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	627b      	str	r3, [r7, #36]	; 0x24
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	623b      	str	r3, [r7, #32]
 8005cd0:	e00b      	b.n	8005cea <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8005cd2:	6a3b      	ldr	r3, [r7, #32]
 8005cd4:	b2da      	uxtb	r2, r3
 8005cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd8:	1c59      	adds	r1, r3, #1
 8005cda:	6279      	str	r1, [r7, #36]	; 0x24
 8005cdc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ce0:	b2d2      	uxtb	r2, r2
 8005ce2:	701a      	strb	r2, [r3, #0]
 8005ce4:	6a3b      	ldr	r3, [r7, #32]
 8005ce6:	09db      	lsrs	r3, r3, #7
 8005ce8:	623b      	str	r3, [r7, #32]
 8005cea:	6a3b      	ldr	r3, [r7, #32]
 8005cec:	2b7f      	cmp	r3, #127	; 0x7f
 8005cee:	d8f0      	bhi.n	8005cd2 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8005cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf2:	1c5a      	adds	r2, r3, #1
 8005cf4:	627a      	str	r2, [r7, #36]	; 0x24
 8005cf6:	6a3a      	ldr	r2, [r7, #32]
 8005cf8:	b2d2      	uxtb	r2, r2
 8005cfa:	701a      	strb	r2, [r3, #0]
 8005cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfe:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005d00:	68fa      	ldr	r2, [r7, #12]
 8005d02:	6979      	ldr	r1, [r7, #20]
 8005d04:	69b8      	ldr	r0, [r7, #24]
 8005d06:	f7ff fda3 	bl	8005850 <_SendPacket>
  RECORD_END();
 8005d0a:	69fb      	ldr	r3, [r7, #28]
 8005d0c:	f383 8811 	msr	BASEPRI, r3
}
 8005d10:	bf00      	nop
 8005d12:	3738      	adds	r7, #56	; 0x38
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	200143c4 	.word	0x200143c4

08005d1c <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b090      	sub	sp, #64	; 0x40
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	60f8      	str	r0, [r7, #12]
 8005d24:	60b9      	str	r1, [r7, #8]
 8005d26:	607a      	str	r2, [r7, #4]
 8005d28:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005d2a:	f3ef 8311 	mrs	r3, BASEPRI
 8005d2e:	f04f 0120 	mov.w	r1, #32
 8005d32:	f381 8811 	msr	BASEPRI, r1
 8005d36:	61fb      	str	r3, [r7, #28]
 8005d38:	4840      	ldr	r0, [pc, #256]	; (8005e3c <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8005d3a:	f7ff fc98 	bl	800566e <_PreparePacket>
 8005d3e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005d40:	69bb      	ldr	r3, [r7, #24]
 8005d42:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d4c:	e00b      	b.n	8005d66 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8005d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d50:	b2da      	uxtb	r2, r3
 8005d52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d54:	1c59      	adds	r1, r3, #1
 8005d56:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005d58:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d5c:	b2d2      	uxtb	r2, r2
 8005d5e:	701a      	strb	r2, [r3, #0]
 8005d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d62:	09db      	lsrs	r3, r3, #7
 8005d64:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d68:	2b7f      	cmp	r3, #127	; 0x7f
 8005d6a:	d8f0      	bhi.n	8005d4e <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8005d6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d6e:	1c5a      	adds	r2, r3, #1
 8005d70:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005d72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d74:	b2d2      	uxtb	r2, r2
 8005d76:	701a      	strb	r2, [r3, #0]
 8005d78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d7a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	637b      	str	r3, [r7, #52]	; 0x34
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	633b      	str	r3, [r7, #48]	; 0x30
 8005d84:	e00b      	b.n	8005d9e <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8005d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d88:	b2da      	uxtb	r2, r3
 8005d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d8c:	1c59      	adds	r1, r3, #1
 8005d8e:	6379      	str	r1, [r7, #52]	; 0x34
 8005d90:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d94:	b2d2      	uxtb	r2, r2
 8005d96:	701a      	strb	r2, [r3, #0]
 8005d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d9a:	09db      	lsrs	r3, r3, #7
 8005d9c:	633b      	str	r3, [r7, #48]	; 0x30
 8005d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da0:	2b7f      	cmp	r3, #127	; 0x7f
 8005da2:	d8f0      	bhi.n	8005d86 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8005da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005da6:	1c5a      	adds	r2, r3, #1
 8005da8:	637a      	str	r2, [r7, #52]	; 0x34
 8005daa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dac:	b2d2      	uxtb	r2, r2
 8005dae:	701a      	strb	r2, [r3, #0]
 8005db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005db2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	62bb      	str	r3, [r7, #40]	; 0x28
 8005dbc:	e00b      	b.n	8005dd6 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8005dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc0:	b2da      	uxtb	r2, r3
 8005dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dc4:	1c59      	adds	r1, r3, #1
 8005dc6:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005dc8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005dcc:	b2d2      	uxtb	r2, r2
 8005dce:	701a      	strb	r2, [r3, #0]
 8005dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd2:	09db      	lsrs	r3, r3, #7
 8005dd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd8:	2b7f      	cmp	r3, #127	; 0x7f
 8005dda:	d8f0      	bhi.n	8005dbe <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8005ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dde:	1c5a      	adds	r2, r3, #1
 8005de0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005de2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005de4:	b2d2      	uxtb	r2, r2
 8005de6:	701a      	strb	r2, [r3, #0]
 8005de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dea:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	627b      	str	r3, [r7, #36]	; 0x24
 8005df0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005df2:	623b      	str	r3, [r7, #32]
 8005df4:	e00b      	b.n	8005e0e <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8005df6:	6a3b      	ldr	r3, [r7, #32]
 8005df8:	b2da      	uxtb	r2, r3
 8005dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfc:	1c59      	adds	r1, r3, #1
 8005dfe:	6279      	str	r1, [r7, #36]	; 0x24
 8005e00:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e04:	b2d2      	uxtb	r2, r2
 8005e06:	701a      	strb	r2, [r3, #0]
 8005e08:	6a3b      	ldr	r3, [r7, #32]
 8005e0a:	09db      	lsrs	r3, r3, #7
 8005e0c:	623b      	str	r3, [r7, #32]
 8005e0e:	6a3b      	ldr	r3, [r7, #32]
 8005e10:	2b7f      	cmp	r3, #127	; 0x7f
 8005e12:	d8f0      	bhi.n	8005df6 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8005e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e16:	1c5a      	adds	r2, r3, #1
 8005e18:	627a      	str	r2, [r7, #36]	; 0x24
 8005e1a:	6a3a      	ldr	r2, [r7, #32]
 8005e1c:	b2d2      	uxtb	r2, r2
 8005e1e:	701a      	strb	r2, [r3, #0]
 8005e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e22:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005e24:	68fa      	ldr	r2, [r7, #12]
 8005e26:	6979      	ldr	r1, [r7, #20]
 8005e28:	69b8      	ldr	r0, [r7, #24]
 8005e2a:	f7ff fd11 	bl	8005850 <_SendPacket>
  RECORD_END();
 8005e2e:	69fb      	ldr	r3, [r7, #28]
 8005e30:	f383 8811 	msr	BASEPRI, r3
}
 8005e34:	bf00      	nop
 8005e36:	3740      	adds	r7, #64	; 0x40
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}
 8005e3c:	200143c4 	.word	0x200143c4

08005e40 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b08c      	sub	sp, #48	; 0x30
 8005e44:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005e46:	4b59      	ldr	r3, [pc, #356]	; (8005fac <SEGGER_SYSVIEW_Start+0x16c>)
 8005e48:	2201      	movs	r2, #1
 8005e4a:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005e4c:	f3ef 8311 	mrs	r3, BASEPRI
 8005e50:	f04f 0120 	mov.w	r1, #32
 8005e54:	f381 8811 	msr	BASEPRI, r1
 8005e58:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005e5a:	4b54      	ldr	r3, [pc, #336]	; (8005fac <SEGGER_SYSVIEW_Start+0x16c>)
 8005e5c:	785b      	ldrb	r3, [r3, #1]
 8005e5e:	220a      	movs	r2, #10
 8005e60:	4953      	ldr	r1, [pc, #332]	; (8005fb0 <SEGGER_SYSVIEW_Start+0x170>)
 8005e62:	4618      	mov	r0, r3
 8005e64:	f7fa f9d4 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8005e6e:	f7fe ff91 	bl	8004d94 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005e72:	200a      	movs	r0, #10
 8005e74:	f7ff fe28 	bl	8005ac8 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005e78:	f3ef 8311 	mrs	r3, BASEPRI
 8005e7c:	f04f 0120 	mov.w	r1, #32
 8005e80:	f381 8811 	msr	BASEPRI, r1
 8005e84:	60bb      	str	r3, [r7, #8]
 8005e86:	484b      	ldr	r0, [pc, #300]	; (8005fb4 <SEGGER_SYSVIEW_Start+0x174>)
 8005e88:	f7ff fbf1 	bl	800566e <_PreparePacket>
 8005e8c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e96:	4b45      	ldr	r3, [pc, #276]	; (8005fac <SEGGER_SYSVIEW_Start+0x16c>)
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e9c:	e00b      	b.n	8005eb6 <SEGGER_SYSVIEW_Start+0x76>
 8005e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea0:	b2da      	uxtb	r2, r3
 8005ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ea4:	1c59      	adds	r1, r3, #1
 8005ea6:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005ea8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005eac:	b2d2      	uxtb	r2, r2
 8005eae:	701a      	strb	r2, [r3, #0]
 8005eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb2:	09db      	lsrs	r3, r3, #7
 8005eb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb8:	2b7f      	cmp	r3, #127	; 0x7f
 8005eba:	d8f0      	bhi.n	8005e9e <SEGGER_SYSVIEW_Start+0x5e>
 8005ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ebe:	1c5a      	adds	r2, r3, #1
 8005ec0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ec2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ec4:	b2d2      	uxtb	r2, r2
 8005ec6:	701a      	strb	r2, [r3, #0]
 8005ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eca:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	627b      	str	r3, [r7, #36]	; 0x24
 8005ed0:	4b36      	ldr	r3, [pc, #216]	; (8005fac <SEGGER_SYSVIEW_Start+0x16c>)
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	623b      	str	r3, [r7, #32]
 8005ed6:	e00b      	b.n	8005ef0 <SEGGER_SYSVIEW_Start+0xb0>
 8005ed8:	6a3b      	ldr	r3, [r7, #32]
 8005eda:	b2da      	uxtb	r2, r3
 8005edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ede:	1c59      	adds	r1, r3, #1
 8005ee0:	6279      	str	r1, [r7, #36]	; 0x24
 8005ee2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ee6:	b2d2      	uxtb	r2, r2
 8005ee8:	701a      	strb	r2, [r3, #0]
 8005eea:	6a3b      	ldr	r3, [r7, #32]
 8005eec:	09db      	lsrs	r3, r3, #7
 8005eee:	623b      	str	r3, [r7, #32]
 8005ef0:	6a3b      	ldr	r3, [r7, #32]
 8005ef2:	2b7f      	cmp	r3, #127	; 0x7f
 8005ef4:	d8f0      	bhi.n	8005ed8 <SEGGER_SYSVIEW_Start+0x98>
 8005ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef8:	1c5a      	adds	r2, r3, #1
 8005efa:	627a      	str	r2, [r7, #36]	; 0x24
 8005efc:	6a3a      	ldr	r2, [r7, #32]
 8005efe:	b2d2      	uxtb	r2, r2
 8005f00:	701a      	strb	r2, [r3, #0]
 8005f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f04:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	61fb      	str	r3, [r7, #28]
 8005f0a:	4b28      	ldr	r3, [pc, #160]	; (8005fac <SEGGER_SYSVIEW_Start+0x16c>)
 8005f0c:	691b      	ldr	r3, [r3, #16]
 8005f0e:	61bb      	str	r3, [r7, #24]
 8005f10:	e00b      	b.n	8005f2a <SEGGER_SYSVIEW_Start+0xea>
 8005f12:	69bb      	ldr	r3, [r7, #24]
 8005f14:	b2da      	uxtb	r2, r3
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	1c59      	adds	r1, r3, #1
 8005f1a:	61f9      	str	r1, [r7, #28]
 8005f1c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f20:	b2d2      	uxtb	r2, r2
 8005f22:	701a      	strb	r2, [r3, #0]
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	09db      	lsrs	r3, r3, #7
 8005f28:	61bb      	str	r3, [r7, #24]
 8005f2a:	69bb      	ldr	r3, [r7, #24]
 8005f2c:	2b7f      	cmp	r3, #127	; 0x7f
 8005f2e:	d8f0      	bhi.n	8005f12 <SEGGER_SYSVIEW_Start+0xd2>
 8005f30:	69fb      	ldr	r3, [r7, #28]
 8005f32:	1c5a      	adds	r2, r3, #1
 8005f34:	61fa      	str	r2, [r7, #28]
 8005f36:	69ba      	ldr	r2, [r7, #24]
 8005f38:	b2d2      	uxtb	r2, r2
 8005f3a:	701a      	strb	r2, [r3, #0]
 8005f3c:	69fb      	ldr	r3, [r7, #28]
 8005f3e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	617b      	str	r3, [r7, #20]
 8005f44:	2300      	movs	r3, #0
 8005f46:	613b      	str	r3, [r7, #16]
 8005f48:	e00b      	b.n	8005f62 <SEGGER_SYSVIEW_Start+0x122>
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	b2da      	uxtb	r2, r3
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	1c59      	adds	r1, r3, #1
 8005f52:	6179      	str	r1, [r7, #20]
 8005f54:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f58:	b2d2      	uxtb	r2, r2
 8005f5a:	701a      	strb	r2, [r3, #0]
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	09db      	lsrs	r3, r3, #7
 8005f60:	613b      	str	r3, [r7, #16]
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	2b7f      	cmp	r3, #127	; 0x7f
 8005f66:	d8f0      	bhi.n	8005f4a <SEGGER_SYSVIEW_Start+0x10a>
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	1c5a      	adds	r2, r3, #1
 8005f6c:	617a      	str	r2, [r7, #20]
 8005f6e:	693a      	ldr	r2, [r7, #16]
 8005f70:	b2d2      	uxtb	r2, r2
 8005f72:	701a      	strb	r2, [r3, #0]
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005f78:	2218      	movs	r2, #24
 8005f7a:	6839      	ldr	r1, [r7, #0]
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f7ff fc67 	bl	8005850 <_SendPacket>
      RECORD_END();
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005f88:	4b08      	ldr	r3, [pc, #32]	; (8005fac <SEGGER_SYSVIEW_Start+0x16c>)
 8005f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d002      	beq.n	8005f96 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005f90:	4b06      	ldr	r3, [pc, #24]	; (8005fac <SEGGER_SYSVIEW_Start+0x16c>)
 8005f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f94:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005f96:	f000 f9eb 	bl	8006370 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005f9a:	f000 f9b1 	bl	8006300 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005f9e:	f000 fc23 	bl	80067e8 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005fa2:	bf00      	nop
 8005fa4:	3730      	adds	r7, #48	; 0x30
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}
 8005faa:	bf00      	nop
 8005fac:	20014394 	.word	0x20014394
 8005fb0:	08006b7c 	.word	0x08006b7c
 8005fb4:	200143c4 	.word	0x200143c4

08005fb8 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b082      	sub	sp, #8
 8005fbc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005fbe:	f3ef 8311 	mrs	r3, BASEPRI
 8005fc2:	f04f 0120 	mov.w	r1, #32
 8005fc6:	f381 8811 	msr	BASEPRI, r1
 8005fca:	607b      	str	r3, [r7, #4]
 8005fcc:	480b      	ldr	r0, [pc, #44]	; (8005ffc <SEGGER_SYSVIEW_Stop+0x44>)
 8005fce:	f7ff fb4e 	bl	800566e <_PreparePacket>
 8005fd2:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005fd4:	4b0a      	ldr	r3, [pc, #40]	; (8006000 <SEGGER_SYSVIEW_Stop+0x48>)
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d007      	beq.n	8005fec <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005fdc:	220b      	movs	r2, #11
 8005fde:	6839      	ldr	r1, [r7, #0]
 8005fe0:	6838      	ldr	r0, [r7, #0]
 8005fe2:	f7ff fc35 	bl	8005850 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005fe6:	4b06      	ldr	r3, [pc, #24]	; (8006000 <SEGGER_SYSVIEW_Stop+0x48>)
 8005fe8:	2200      	movs	r2, #0
 8005fea:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f383 8811 	msr	BASEPRI, r3
}
 8005ff2:	bf00      	nop
 8005ff4:	3708      	adds	r7, #8
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
 8005ffa:	bf00      	nop
 8005ffc:	200143c4 	.word	0x200143c4
 8006000:	20014394 	.word	0x20014394

08006004 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006004:	b580      	push	{r7, lr}
 8006006:	b08c      	sub	sp, #48	; 0x30
 8006008:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800600a:	f3ef 8311 	mrs	r3, BASEPRI
 800600e:	f04f 0120 	mov.w	r1, #32
 8006012:	f381 8811 	msr	BASEPRI, r1
 8006016:	60fb      	str	r3, [r7, #12]
 8006018:	4845      	ldr	r0, [pc, #276]	; (8006130 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800601a:	f7ff fb28 	bl	800566e <_PreparePacket>
 800601e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006028:	4b42      	ldr	r3, [pc, #264]	; (8006134 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	62bb      	str	r3, [r7, #40]	; 0x28
 800602e:	e00b      	b.n	8006048 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006032:	b2da      	uxtb	r2, r3
 8006034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006036:	1c59      	adds	r1, r3, #1
 8006038:	62f9      	str	r1, [r7, #44]	; 0x2c
 800603a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800603e:	b2d2      	uxtb	r2, r2
 8006040:	701a      	strb	r2, [r3, #0]
 8006042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006044:	09db      	lsrs	r3, r3, #7
 8006046:	62bb      	str	r3, [r7, #40]	; 0x28
 8006048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800604a:	2b7f      	cmp	r3, #127	; 0x7f
 800604c:	d8f0      	bhi.n	8006030 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800604e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006050:	1c5a      	adds	r2, r3, #1
 8006052:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006054:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006056:	b2d2      	uxtb	r2, r2
 8006058:	701a      	strb	r2, [r3, #0]
 800605a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800605c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	627b      	str	r3, [r7, #36]	; 0x24
 8006062:	4b34      	ldr	r3, [pc, #208]	; (8006134 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	623b      	str	r3, [r7, #32]
 8006068:	e00b      	b.n	8006082 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800606a:	6a3b      	ldr	r3, [r7, #32]
 800606c:	b2da      	uxtb	r2, r3
 800606e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006070:	1c59      	adds	r1, r3, #1
 8006072:	6279      	str	r1, [r7, #36]	; 0x24
 8006074:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006078:	b2d2      	uxtb	r2, r2
 800607a:	701a      	strb	r2, [r3, #0]
 800607c:	6a3b      	ldr	r3, [r7, #32]
 800607e:	09db      	lsrs	r3, r3, #7
 8006080:	623b      	str	r3, [r7, #32]
 8006082:	6a3b      	ldr	r3, [r7, #32]
 8006084:	2b7f      	cmp	r3, #127	; 0x7f
 8006086:	d8f0      	bhi.n	800606a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608a:	1c5a      	adds	r2, r3, #1
 800608c:	627a      	str	r2, [r7, #36]	; 0x24
 800608e:	6a3a      	ldr	r2, [r7, #32]
 8006090:	b2d2      	uxtb	r2, r2
 8006092:	701a      	strb	r2, [r3, #0]
 8006094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006096:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	61fb      	str	r3, [r7, #28]
 800609c:	4b25      	ldr	r3, [pc, #148]	; (8006134 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800609e:	691b      	ldr	r3, [r3, #16]
 80060a0:	61bb      	str	r3, [r7, #24]
 80060a2:	e00b      	b.n	80060bc <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80060a4:	69bb      	ldr	r3, [r7, #24]
 80060a6:	b2da      	uxtb	r2, r3
 80060a8:	69fb      	ldr	r3, [r7, #28]
 80060aa:	1c59      	adds	r1, r3, #1
 80060ac:	61f9      	str	r1, [r7, #28]
 80060ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060b2:	b2d2      	uxtb	r2, r2
 80060b4:	701a      	strb	r2, [r3, #0]
 80060b6:	69bb      	ldr	r3, [r7, #24]
 80060b8:	09db      	lsrs	r3, r3, #7
 80060ba:	61bb      	str	r3, [r7, #24]
 80060bc:	69bb      	ldr	r3, [r7, #24]
 80060be:	2b7f      	cmp	r3, #127	; 0x7f
 80060c0:	d8f0      	bhi.n	80060a4 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80060c2:	69fb      	ldr	r3, [r7, #28]
 80060c4:	1c5a      	adds	r2, r3, #1
 80060c6:	61fa      	str	r2, [r7, #28]
 80060c8:	69ba      	ldr	r2, [r7, #24]
 80060ca:	b2d2      	uxtb	r2, r2
 80060cc:	701a      	strb	r2, [r3, #0]
 80060ce:	69fb      	ldr	r3, [r7, #28]
 80060d0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	617b      	str	r3, [r7, #20]
 80060d6:	2300      	movs	r3, #0
 80060d8:	613b      	str	r3, [r7, #16]
 80060da:	e00b      	b.n	80060f4 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	b2da      	uxtb	r2, r3
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	1c59      	adds	r1, r3, #1
 80060e4:	6179      	str	r1, [r7, #20]
 80060e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060ea:	b2d2      	uxtb	r2, r2
 80060ec:	701a      	strb	r2, [r3, #0]
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	09db      	lsrs	r3, r3, #7
 80060f2:	613b      	str	r3, [r7, #16]
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	2b7f      	cmp	r3, #127	; 0x7f
 80060f8:	d8f0      	bhi.n	80060dc <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	1c5a      	adds	r2, r3, #1
 80060fe:	617a      	str	r2, [r7, #20]
 8006100:	693a      	ldr	r2, [r7, #16]
 8006102:	b2d2      	uxtb	r2, r2
 8006104:	701a      	strb	r2, [r3, #0]
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800610a:	2218      	movs	r2, #24
 800610c:	6879      	ldr	r1, [r7, #4]
 800610e:	68b8      	ldr	r0, [r7, #8]
 8006110:	f7ff fb9e 	bl	8005850 <_SendPacket>
  RECORD_END();
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800611a:	4b06      	ldr	r3, [pc, #24]	; (8006134 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800611c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611e:	2b00      	cmp	r3, #0
 8006120:	d002      	beq.n	8006128 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006122:	4b04      	ldr	r3, [pc, #16]	; (8006134 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006126:	4798      	blx	r3
  }
}
 8006128:	bf00      	nop
 800612a:	3730      	adds	r7, #48	; 0x30
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}
 8006130:	200143c4 	.word	0x200143c4
 8006134:	20014394 	.word	0x20014394

08006138 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006138:	b580      	push	{r7, lr}
 800613a:	b092      	sub	sp, #72	; 0x48
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006140:	f3ef 8311 	mrs	r3, BASEPRI
 8006144:	f04f 0120 	mov.w	r1, #32
 8006148:	f381 8811 	msr	BASEPRI, r1
 800614c:	617b      	str	r3, [r7, #20]
 800614e:	486a      	ldr	r0, [pc, #424]	; (80062f8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006150:	f7ff fa8d 	bl	800566e <_PreparePacket>
 8006154:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	647b      	str	r3, [r7, #68]	; 0x44
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	4b66      	ldr	r3, [pc, #408]	; (80062fc <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	1ad3      	subs	r3, r2, r3
 8006168:	643b      	str	r3, [r7, #64]	; 0x40
 800616a:	e00b      	b.n	8006184 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800616c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800616e:	b2da      	uxtb	r2, r3
 8006170:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006172:	1c59      	adds	r1, r3, #1
 8006174:	6479      	str	r1, [r7, #68]	; 0x44
 8006176:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800617a:	b2d2      	uxtb	r2, r2
 800617c:	701a      	strb	r2, [r3, #0]
 800617e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006180:	09db      	lsrs	r3, r3, #7
 8006182:	643b      	str	r3, [r7, #64]	; 0x40
 8006184:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006186:	2b7f      	cmp	r3, #127	; 0x7f
 8006188:	d8f0      	bhi.n	800616c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800618a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800618c:	1c5a      	adds	r2, r3, #1
 800618e:	647a      	str	r2, [r7, #68]	; 0x44
 8006190:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006192:	b2d2      	uxtb	r2, r2
 8006194:	701a      	strb	r2, [r3, #0]
 8006196:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006198:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80061a4:	e00b      	b.n	80061be <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80061a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061a8:	b2da      	uxtb	r2, r3
 80061aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061ac:	1c59      	adds	r1, r3, #1
 80061ae:	63f9      	str	r1, [r7, #60]	; 0x3c
 80061b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061b4:	b2d2      	uxtb	r2, r2
 80061b6:	701a      	strb	r2, [r3, #0]
 80061b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ba:	09db      	lsrs	r3, r3, #7
 80061bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80061be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061c0:	2b7f      	cmp	r3, #127	; 0x7f
 80061c2:	d8f0      	bhi.n	80061a6 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80061c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061c6:	1c5a      	adds	r2, r3, #1
 80061c8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80061ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80061cc:	b2d2      	uxtb	r2, r2
 80061ce:	701a      	strb	r2, [r3, #0]
 80061d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061d2:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	2220      	movs	r2, #32
 80061da:	4619      	mov	r1, r3
 80061dc:	68f8      	ldr	r0, [r7, #12]
 80061de:	f7ff f9f9 	bl	80055d4 <_EncodeStr>
 80061e2:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80061e4:	2209      	movs	r2, #9
 80061e6:	68f9      	ldr	r1, [r7, #12]
 80061e8:	6938      	ldr	r0, [r7, #16]
 80061ea:	f7ff fb31 	bl	8005850 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	637b      	str	r3, [r7, #52]	; 0x34
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	4b40      	ldr	r3, [pc, #256]	; (80062fc <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80061fc:	691b      	ldr	r3, [r3, #16]
 80061fe:	1ad3      	subs	r3, r2, r3
 8006200:	633b      	str	r3, [r7, #48]	; 0x30
 8006202:	e00b      	b.n	800621c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006206:	b2da      	uxtb	r2, r3
 8006208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800620a:	1c59      	adds	r1, r3, #1
 800620c:	6379      	str	r1, [r7, #52]	; 0x34
 800620e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006212:	b2d2      	uxtb	r2, r2
 8006214:	701a      	strb	r2, [r3, #0]
 8006216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006218:	09db      	lsrs	r3, r3, #7
 800621a:	633b      	str	r3, [r7, #48]	; 0x30
 800621c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800621e:	2b7f      	cmp	r3, #127	; 0x7f
 8006220:	d8f0      	bhi.n	8006204 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006224:	1c5a      	adds	r2, r3, #1
 8006226:	637a      	str	r2, [r7, #52]	; 0x34
 8006228:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800622a:	b2d2      	uxtb	r2, r2
 800622c:	701a      	strb	r2, [r3, #0]
 800622e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006230:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	68db      	ldr	r3, [r3, #12]
 800623a:	62bb      	str	r3, [r7, #40]	; 0x28
 800623c:	e00b      	b.n	8006256 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800623e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006240:	b2da      	uxtb	r2, r3
 8006242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006244:	1c59      	adds	r1, r3, #1
 8006246:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006248:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800624c:	b2d2      	uxtb	r2, r2
 800624e:	701a      	strb	r2, [r3, #0]
 8006250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006252:	09db      	lsrs	r3, r3, #7
 8006254:	62bb      	str	r3, [r7, #40]	; 0x28
 8006256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006258:	2b7f      	cmp	r3, #127	; 0x7f
 800625a:	d8f0      	bhi.n	800623e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800625c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800625e:	1c5a      	adds	r2, r3, #1
 8006260:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006262:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006264:	b2d2      	uxtb	r2, r2
 8006266:	701a      	strb	r2, [r3, #0]
 8006268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800626a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	627b      	str	r3, [r7, #36]	; 0x24
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	691b      	ldr	r3, [r3, #16]
 8006274:	623b      	str	r3, [r7, #32]
 8006276:	e00b      	b.n	8006290 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006278:	6a3b      	ldr	r3, [r7, #32]
 800627a:	b2da      	uxtb	r2, r3
 800627c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627e:	1c59      	adds	r1, r3, #1
 8006280:	6279      	str	r1, [r7, #36]	; 0x24
 8006282:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006286:	b2d2      	uxtb	r2, r2
 8006288:	701a      	strb	r2, [r3, #0]
 800628a:	6a3b      	ldr	r3, [r7, #32]
 800628c:	09db      	lsrs	r3, r3, #7
 800628e:	623b      	str	r3, [r7, #32]
 8006290:	6a3b      	ldr	r3, [r7, #32]
 8006292:	2b7f      	cmp	r3, #127	; 0x7f
 8006294:	d8f0      	bhi.n	8006278 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006298:	1c5a      	adds	r2, r3, #1
 800629a:	627a      	str	r2, [r7, #36]	; 0x24
 800629c:	6a3a      	ldr	r2, [r7, #32]
 800629e:	b2d2      	uxtb	r2, r2
 80062a0:	701a      	strb	r2, [r3, #0]
 80062a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	61fb      	str	r3, [r7, #28]
 80062aa:	2300      	movs	r3, #0
 80062ac:	61bb      	str	r3, [r7, #24]
 80062ae:	e00b      	b.n	80062c8 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80062b0:	69bb      	ldr	r3, [r7, #24]
 80062b2:	b2da      	uxtb	r2, r3
 80062b4:	69fb      	ldr	r3, [r7, #28]
 80062b6:	1c59      	adds	r1, r3, #1
 80062b8:	61f9      	str	r1, [r7, #28]
 80062ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062be:	b2d2      	uxtb	r2, r2
 80062c0:	701a      	strb	r2, [r3, #0]
 80062c2:	69bb      	ldr	r3, [r7, #24]
 80062c4:	09db      	lsrs	r3, r3, #7
 80062c6:	61bb      	str	r3, [r7, #24]
 80062c8:	69bb      	ldr	r3, [r7, #24]
 80062ca:	2b7f      	cmp	r3, #127	; 0x7f
 80062cc:	d8f0      	bhi.n	80062b0 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80062ce:	69fb      	ldr	r3, [r7, #28]
 80062d0:	1c5a      	adds	r2, r3, #1
 80062d2:	61fa      	str	r2, [r7, #28]
 80062d4:	69ba      	ldr	r2, [r7, #24]
 80062d6:	b2d2      	uxtb	r2, r2
 80062d8:	701a      	strb	r2, [r3, #0]
 80062da:	69fb      	ldr	r3, [r7, #28]
 80062dc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80062de:	2215      	movs	r2, #21
 80062e0:	68f9      	ldr	r1, [r7, #12]
 80062e2:	6938      	ldr	r0, [r7, #16]
 80062e4:	f7ff fab4 	bl	8005850 <_SendPacket>
  RECORD_END();
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	f383 8811 	msr	BASEPRI, r3
}
 80062ee:	bf00      	nop
 80062f0:	3748      	adds	r7, #72	; 0x48
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	bf00      	nop
 80062f8:	200143c4 	.word	0x200143c4
 80062fc:	20014394 	.word	0x20014394

08006300 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006300:	b580      	push	{r7, lr}
 8006302:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006304:	4b07      	ldr	r3, [pc, #28]	; (8006324 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006306:	6a1b      	ldr	r3, [r3, #32]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d008      	beq.n	800631e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800630c:	4b05      	ldr	r3, [pc, #20]	; (8006324 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800630e:	6a1b      	ldr	r3, [r3, #32]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d003      	beq.n	800631e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006316:	4b03      	ldr	r3, [pc, #12]	; (8006324 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006318:	6a1b      	ldr	r3, [r3, #32]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	4798      	blx	r3
  }
}
 800631e:	bf00      	nop
 8006320:	bd80      	pop	{r7, pc}
 8006322:	bf00      	nop
 8006324:	20014394 	.word	0x20014394

08006328 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006328:	b580      	push	{r7, lr}
 800632a:	b086      	sub	sp, #24
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006330:	f3ef 8311 	mrs	r3, BASEPRI
 8006334:	f04f 0120 	mov.w	r1, #32
 8006338:	f381 8811 	msr	BASEPRI, r1
 800633c:	617b      	str	r3, [r7, #20]
 800633e:	480b      	ldr	r0, [pc, #44]	; (800636c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006340:	f7ff f995 	bl	800566e <_PreparePacket>
 8006344:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006346:	2280      	movs	r2, #128	; 0x80
 8006348:	6879      	ldr	r1, [r7, #4]
 800634a:	6938      	ldr	r0, [r7, #16]
 800634c:	f7ff f942 	bl	80055d4 <_EncodeStr>
 8006350:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006352:	220e      	movs	r2, #14
 8006354:	68f9      	ldr	r1, [r7, #12]
 8006356:	6938      	ldr	r0, [r7, #16]
 8006358:	f7ff fa7a 	bl	8005850 <_SendPacket>
  RECORD_END();
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	f383 8811 	msr	BASEPRI, r3
}
 8006362:	bf00      	nop
 8006364:	3718      	adds	r7, #24
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
 800636a:	bf00      	nop
 800636c:	200143c4 	.word	0x200143c4

08006370 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006370:	b590      	push	{r4, r7, lr}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006376:	4b15      	ldr	r3, [pc, #84]	; (80063cc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006378:	6a1b      	ldr	r3, [r3, #32]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d01a      	beq.n	80063b4 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800637e:	4b13      	ldr	r3, [pc, #76]	; (80063cc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006380:	6a1b      	ldr	r3, [r3, #32]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d015      	beq.n	80063b4 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006388:	4b10      	ldr	r3, [pc, #64]	; (80063cc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800638a:	6a1b      	ldr	r3, [r3, #32]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4798      	blx	r3
 8006390:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006394:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006396:	e9d7 0100 	ldrd	r0, r1, [r7]
 800639a:	f04f 0200 	mov.w	r2, #0
 800639e:	f04f 0300 	mov.w	r3, #0
 80063a2:	000a      	movs	r2, r1
 80063a4:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80063a6:	4613      	mov	r3, r2
 80063a8:	461a      	mov	r2, r3
 80063aa:	4621      	mov	r1, r4
 80063ac:	200d      	movs	r0, #13
 80063ae:	f7ff fbe5 	bl	8005b7c <SEGGER_SYSVIEW_RecordU32x2>
 80063b2:	e006      	b.n	80063c2 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80063b4:	4b06      	ldr	r3, [pc, #24]	; (80063d0 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4619      	mov	r1, r3
 80063ba:	200c      	movs	r0, #12
 80063bc:	f7ff fba2 	bl	8005b04 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80063c0:	bf00      	nop
 80063c2:	bf00      	nop
 80063c4:	370c      	adds	r7, #12
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd90      	pop	{r4, r7, pc}
 80063ca:	bf00      	nop
 80063cc:	20014394 	.word	0x20014394
 80063d0:	e0001004 	.word	0xe0001004

080063d4 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b086      	sub	sp, #24
 80063d8:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80063da:	f3ef 8311 	mrs	r3, BASEPRI
 80063de:	f04f 0120 	mov.w	r1, #32
 80063e2:	f381 8811 	msr	BASEPRI, r1
 80063e6:	60fb      	str	r3, [r7, #12]
 80063e8:	4819      	ldr	r0, [pc, #100]	; (8006450 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80063ea:	f7ff f940 	bl	800566e <_PreparePacket>
 80063ee:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80063f4:	4b17      	ldr	r3, [pc, #92]	; (8006454 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063fc:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	617b      	str	r3, [r7, #20]
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	613b      	str	r3, [r7, #16]
 8006406:	e00b      	b.n	8006420 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	b2da      	uxtb	r2, r3
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	1c59      	adds	r1, r3, #1
 8006410:	6179      	str	r1, [r7, #20]
 8006412:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006416:	b2d2      	uxtb	r2, r2
 8006418:	701a      	strb	r2, [r3, #0]
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	09db      	lsrs	r3, r3, #7
 800641e:	613b      	str	r3, [r7, #16]
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	2b7f      	cmp	r3, #127	; 0x7f
 8006424:	d8f0      	bhi.n	8006408 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	1c5a      	adds	r2, r3, #1
 800642a:	617a      	str	r2, [r7, #20]
 800642c:	693a      	ldr	r2, [r7, #16]
 800642e:	b2d2      	uxtb	r2, r2
 8006430:	701a      	strb	r2, [r3, #0]
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006436:	2202      	movs	r2, #2
 8006438:	6879      	ldr	r1, [r7, #4]
 800643a:	68b8      	ldr	r0, [r7, #8]
 800643c:	f7ff fa08 	bl	8005850 <_SendPacket>
  RECORD_END();
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f383 8811 	msr	BASEPRI, r3
}
 8006446:	bf00      	nop
 8006448:	3718      	adds	r7, #24
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
 800644e:	bf00      	nop
 8006450:	200143c4 	.word	0x200143c4
 8006454:	e000ed04 	.word	0xe000ed04

08006458 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006458:	b580      	push	{r7, lr}
 800645a:	b082      	sub	sp, #8
 800645c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800645e:	f3ef 8311 	mrs	r3, BASEPRI
 8006462:	f04f 0120 	mov.w	r1, #32
 8006466:	f381 8811 	msr	BASEPRI, r1
 800646a:	607b      	str	r3, [r7, #4]
 800646c:	4807      	ldr	r0, [pc, #28]	; (800648c <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800646e:	f7ff f8fe 	bl	800566e <_PreparePacket>
 8006472:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006474:	2203      	movs	r2, #3
 8006476:	6839      	ldr	r1, [r7, #0]
 8006478:	6838      	ldr	r0, [r7, #0]
 800647a:	f7ff f9e9 	bl	8005850 <_SendPacket>
  RECORD_END();
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f383 8811 	msr	BASEPRI, r3
}
 8006484:	bf00      	nop
 8006486:	3708      	adds	r7, #8
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}
 800648c:	200143c4 	.word	0x200143c4

08006490 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006490:	b580      	push	{r7, lr}
 8006492:	b082      	sub	sp, #8
 8006494:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006496:	f3ef 8311 	mrs	r3, BASEPRI
 800649a:	f04f 0120 	mov.w	r1, #32
 800649e:	f381 8811 	msr	BASEPRI, r1
 80064a2:	607b      	str	r3, [r7, #4]
 80064a4:	4807      	ldr	r0, [pc, #28]	; (80064c4 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80064a6:	f7ff f8e2 	bl	800566e <_PreparePacket>
 80064aa:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80064ac:	2212      	movs	r2, #18
 80064ae:	6839      	ldr	r1, [r7, #0]
 80064b0:	6838      	ldr	r0, [r7, #0]
 80064b2:	f7ff f9cd 	bl	8005850 <_SendPacket>
  RECORD_END();
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f383 8811 	msr	BASEPRI, r3
}
 80064bc:	bf00      	nop
 80064be:	3708      	adds	r7, #8
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}
 80064c4:	200143c4 	.word	0x200143c4

080064c8 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b082      	sub	sp, #8
 80064cc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80064ce:	f3ef 8311 	mrs	r3, BASEPRI
 80064d2:	f04f 0120 	mov.w	r1, #32
 80064d6:	f381 8811 	msr	BASEPRI, r1
 80064da:	607b      	str	r3, [r7, #4]
 80064dc:	4807      	ldr	r0, [pc, #28]	; (80064fc <SEGGER_SYSVIEW_OnIdle+0x34>)
 80064de:	f7ff f8c6 	bl	800566e <_PreparePacket>
 80064e2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80064e4:	2211      	movs	r2, #17
 80064e6:	6839      	ldr	r1, [r7, #0]
 80064e8:	6838      	ldr	r0, [r7, #0]
 80064ea:	f7ff f9b1 	bl	8005850 <_SendPacket>
  RECORD_END();
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f383 8811 	msr	BASEPRI, r3
}
 80064f4:	bf00      	nop
 80064f6:	3708      	adds	r7, #8
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}
 80064fc:	200143c4 	.word	0x200143c4

08006500 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006500:	b580      	push	{r7, lr}
 8006502:	b088      	sub	sp, #32
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006508:	f3ef 8311 	mrs	r3, BASEPRI
 800650c:	f04f 0120 	mov.w	r1, #32
 8006510:	f381 8811 	msr	BASEPRI, r1
 8006514:	617b      	str	r3, [r7, #20]
 8006516:	4819      	ldr	r0, [pc, #100]	; (800657c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006518:	f7ff f8a9 	bl	800566e <_PreparePacket>
 800651c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006522:	4b17      	ldr	r3, [pc, #92]	; (8006580 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006524:	691b      	ldr	r3, [r3, #16]
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	1ad3      	subs	r3, r2, r3
 800652a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	61fb      	str	r3, [r7, #28]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	61bb      	str	r3, [r7, #24]
 8006534:	e00b      	b.n	800654e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006536:	69bb      	ldr	r3, [r7, #24]
 8006538:	b2da      	uxtb	r2, r3
 800653a:	69fb      	ldr	r3, [r7, #28]
 800653c:	1c59      	adds	r1, r3, #1
 800653e:	61f9      	str	r1, [r7, #28]
 8006540:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006544:	b2d2      	uxtb	r2, r2
 8006546:	701a      	strb	r2, [r3, #0]
 8006548:	69bb      	ldr	r3, [r7, #24]
 800654a:	09db      	lsrs	r3, r3, #7
 800654c:	61bb      	str	r3, [r7, #24]
 800654e:	69bb      	ldr	r3, [r7, #24]
 8006550:	2b7f      	cmp	r3, #127	; 0x7f
 8006552:	d8f0      	bhi.n	8006536 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006554:	69fb      	ldr	r3, [r7, #28]
 8006556:	1c5a      	adds	r2, r3, #1
 8006558:	61fa      	str	r2, [r7, #28]
 800655a:	69ba      	ldr	r2, [r7, #24]
 800655c:	b2d2      	uxtb	r2, r2
 800655e:	701a      	strb	r2, [r3, #0]
 8006560:	69fb      	ldr	r3, [r7, #28]
 8006562:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006564:	2208      	movs	r2, #8
 8006566:	68f9      	ldr	r1, [r7, #12]
 8006568:	6938      	ldr	r0, [r7, #16]
 800656a:	f7ff f971 	bl	8005850 <_SendPacket>
  RECORD_END();
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	f383 8811 	msr	BASEPRI, r3
}
 8006574:	bf00      	nop
 8006576:	3720      	adds	r7, #32
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}
 800657c:	200143c4 	.word	0x200143c4
 8006580:	20014394 	.word	0x20014394

08006584 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006584:	b580      	push	{r7, lr}
 8006586:	b088      	sub	sp, #32
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800658c:	f3ef 8311 	mrs	r3, BASEPRI
 8006590:	f04f 0120 	mov.w	r1, #32
 8006594:	f381 8811 	msr	BASEPRI, r1
 8006598:	617b      	str	r3, [r7, #20]
 800659a:	4819      	ldr	r0, [pc, #100]	; (8006600 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800659c:	f7ff f867 	bl	800566e <_PreparePacket>
 80065a0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80065a6:	4b17      	ldr	r3, [pc, #92]	; (8006604 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80065a8:	691b      	ldr	r3, [r3, #16]
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	1ad3      	subs	r3, r2, r3
 80065ae:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	61fb      	str	r3, [r7, #28]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	61bb      	str	r3, [r7, #24]
 80065b8:	e00b      	b.n	80065d2 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80065ba:	69bb      	ldr	r3, [r7, #24]
 80065bc:	b2da      	uxtb	r2, r3
 80065be:	69fb      	ldr	r3, [r7, #28]
 80065c0:	1c59      	adds	r1, r3, #1
 80065c2:	61f9      	str	r1, [r7, #28]
 80065c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065c8:	b2d2      	uxtb	r2, r2
 80065ca:	701a      	strb	r2, [r3, #0]
 80065cc:	69bb      	ldr	r3, [r7, #24]
 80065ce:	09db      	lsrs	r3, r3, #7
 80065d0:	61bb      	str	r3, [r7, #24]
 80065d2:	69bb      	ldr	r3, [r7, #24]
 80065d4:	2b7f      	cmp	r3, #127	; 0x7f
 80065d6:	d8f0      	bhi.n	80065ba <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80065d8:	69fb      	ldr	r3, [r7, #28]
 80065da:	1c5a      	adds	r2, r3, #1
 80065dc:	61fa      	str	r2, [r7, #28]
 80065de:	69ba      	ldr	r2, [r7, #24]
 80065e0:	b2d2      	uxtb	r2, r2
 80065e2:	701a      	strb	r2, [r3, #0]
 80065e4:	69fb      	ldr	r3, [r7, #28]
 80065e6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80065e8:	2204      	movs	r2, #4
 80065ea:	68f9      	ldr	r1, [r7, #12]
 80065ec:	6938      	ldr	r0, [r7, #16]
 80065ee:	f7ff f92f 	bl	8005850 <_SendPacket>
  RECORD_END();
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	f383 8811 	msr	BASEPRI, r3
}
 80065f8:	bf00      	nop
 80065fa:	3720      	adds	r7, #32
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}
 8006600:	200143c4 	.word	0x200143c4
 8006604:	20014394 	.word	0x20014394

08006608 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006608:	b580      	push	{r7, lr}
 800660a:	b088      	sub	sp, #32
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006610:	f3ef 8311 	mrs	r3, BASEPRI
 8006614:	f04f 0120 	mov.w	r1, #32
 8006618:	f381 8811 	msr	BASEPRI, r1
 800661c:	617b      	str	r3, [r7, #20]
 800661e:	4819      	ldr	r0, [pc, #100]	; (8006684 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006620:	f7ff f825 	bl	800566e <_PreparePacket>
 8006624:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800662a:	4b17      	ldr	r3, [pc, #92]	; (8006688 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800662c:	691b      	ldr	r3, [r3, #16]
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	1ad3      	subs	r3, r2, r3
 8006632:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	61fb      	str	r3, [r7, #28]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	61bb      	str	r3, [r7, #24]
 800663c:	e00b      	b.n	8006656 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800663e:	69bb      	ldr	r3, [r7, #24]
 8006640:	b2da      	uxtb	r2, r3
 8006642:	69fb      	ldr	r3, [r7, #28]
 8006644:	1c59      	adds	r1, r3, #1
 8006646:	61f9      	str	r1, [r7, #28]
 8006648:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800664c:	b2d2      	uxtb	r2, r2
 800664e:	701a      	strb	r2, [r3, #0]
 8006650:	69bb      	ldr	r3, [r7, #24]
 8006652:	09db      	lsrs	r3, r3, #7
 8006654:	61bb      	str	r3, [r7, #24]
 8006656:	69bb      	ldr	r3, [r7, #24]
 8006658:	2b7f      	cmp	r3, #127	; 0x7f
 800665a:	d8f0      	bhi.n	800663e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	1c5a      	adds	r2, r3, #1
 8006660:	61fa      	str	r2, [r7, #28]
 8006662:	69ba      	ldr	r2, [r7, #24]
 8006664:	b2d2      	uxtb	r2, r2
 8006666:	701a      	strb	r2, [r3, #0]
 8006668:	69fb      	ldr	r3, [r7, #28]
 800666a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800666c:	2206      	movs	r2, #6
 800666e:	68f9      	ldr	r1, [r7, #12]
 8006670:	6938      	ldr	r0, [r7, #16]
 8006672:	f7ff f8ed 	bl	8005850 <_SendPacket>
  RECORD_END();
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	f383 8811 	msr	BASEPRI, r3
}
 800667c:	bf00      	nop
 800667e:	3720      	adds	r7, #32
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}
 8006684:	200143c4 	.word	0x200143c4
 8006688:	20014394 	.word	0x20014394

0800668c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006694:	4b04      	ldr	r3, [pc, #16]	; (80066a8 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006696:	691b      	ldr	r3, [r3, #16]
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	1ad3      	subs	r3, r2, r3
}
 800669c:	4618      	mov	r0, r3
 800669e:	370c      	adds	r7, #12
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr
 80066a8:	20014394 	.word	0x20014394

080066ac <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b08c      	sub	sp, #48	; 0x30
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	4603      	mov	r3, r0
 80066b4:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80066b6:	4b3b      	ldr	r3, [pc, #236]	; (80067a4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d06d      	beq.n	800679a <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80066be:	4b39      	ldr	r3, [pc, #228]	; (80067a4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80066c4:	2300      	movs	r3, #0
 80066c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80066c8:	e008      	b.n	80066dc <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80066ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066cc:	691b      	ldr	r3, [r3, #16]
 80066ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80066d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d007      	beq.n	80066e6 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80066d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d8:	3301      	adds	r3, #1
 80066da:	62bb      	str	r3, [r7, #40]	; 0x28
 80066dc:	79fb      	ldrb	r3, [r7, #7]
 80066de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d3f2      	bcc.n	80066ca <SEGGER_SYSVIEW_SendModule+0x1e>
 80066e4:	e000      	b.n	80066e8 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80066e6:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80066e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d055      	beq.n	800679a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80066ee:	f3ef 8311 	mrs	r3, BASEPRI
 80066f2:	f04f 0120 	mov.w	r1, #32
 80066f6:	f381 8811 	msr	BASEPRI, r1
 80066fa:	617b      	str	r3, [r7, #20]
 80066fc:	482a      	ldr	r0, [pc, #168]	; (80067a8 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80066fe:	f7fe ffb6 	bl	800566e <_PreparePacket>
 8006702:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	627b      	str	r3, [r7, #36]	; 0x24
 800670c:	79fb      	ldrb	r3, [r7, #7]
 800670e:	623b      	str	r3, [r7, #32]
 8006710:	e00b      	b.n	800672a <SEGGER_SYSVIEW_SendModule+0x7e>
 8006712:	6a3b      	ldr	r3, [r7, #32]
 8006714:	b2da      	uxtb	r2, r3
 8006716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006718:	1c59      	adds	r1, r3, #1
 800671a:	6279      	str	r1, [r7, #36]	; 0x24
 800671c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006720:	b2d2      	uxtb	r2, r2
 8006722:	701a      	strb	r2, [r3, #0]
 8006724:	6a3b      	ldr	r3, [r7, #32]
 8006726:	09db      	lsrs	r3, r3, #7
 8006728:	623b      	str	r3, [r7, #32]
 800672a:	6a3b      	ldr	r3, [r7, #32]
 800672c:	2b7f      	cmp	r3, #127	; 0x7f
 800672e:	d8f0      	bhi.n	8006712 <SEGGER_SYSVIEW_SendModule+0x66>
 8006730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006732:	1c5a      	adds	r2, r3, #1
 8006734:	627a      	str	r2, [r7, #36]	; 0x24
 8006736:	6a3a      	ldr	r2, [r7, #32]
 8006738:	b2d2      	uxtb	r2, r2
 800673a:	701a      	strb	r2, [r3, #0]
 800673c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	61fb      	str	r3, [r7, #28]
 8006744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	61bb      	str	r3, [r7, #24]
 800674a:	e00b      	b.n	8006764 <SEGGER_SYSVIEW_SendModule+0xb8>
 800674c:	69bb      	ldr	r3, [r7, #24]
 800674e:	b2da      	uxtb	r2, r3
 8006750:	69fb      	ldr	r3, [r7, #28]
 8006752:	1c59      	adds	r1, r3, #1
 8006754:	61f9      	str	r1, [r7, #28]
 8006756:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800675a:	b2d2      	uxtb	r2, r2
 800675c:	701a      	strb	r2, [r3, #0]
 800675e:	69bb      	ldr	r3, [r7, #24]
 8006760:	09db      	lsrs	r3, r3, #7
 8006762:	61bb      	str	r3, [r7, #24]
 8006764:	69bb      	ldr	r3, [r7, #24]
 8006766:	2b7f      	cmp	r3, #127	; 0x7f
 8006768:	d8f0      	bhi.n	800674c <SEGGER_SYSVIEW_SendModule+0xa0>
 800676a:	69fb      	ldr	r3, [r7, #28]
 800676c:	1c5a      	adds	r2, r3, #1
 800676e:	61fa      	str	r2, [r7, #28]
 8006770:	69ba      	ldr	r2, [r7, #24]
 8006772:	b2d2      	uxtb	r2, r2
 8006774:	701a      	strb	r2, [r3, #0]
 8006776:	69fb      	ldr	r3, [r7, #28]
 8006778:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800677a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	2280      	movs	r2, #128	; 0x80
 8006780:	4619      	mov	r1, r3
 8006782:	68f8      	ldr	r0, [r7, #12]
 8006784:	f7fe ff26 	bl	80055d4 <_EncodeStr>
 8006788:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800678a:	2216      	movs	r2, #22
 800678c:	68f9      	ldr	r1, [r7, #12]
 800678e:	6938      	ldr	r0, [r7, #16]
 8006790:	f7ff f85e 	bl	8005850 <_SendPacket>
      RECORD_END();
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800679a:	bf00      	nop
 800679c:	3730      	adds	r7, #48	; 0x30
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
 80067a2:	bf00      	nop
 80067a4:	200143bc 	.word	0x200143bc
 80067a8:	200143c4 	.word	0x200143c4

080067ac <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b082      	sub	sp, #8
 80067b0:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80067b2:	4b0c      	ldr	r3, [pc, #48]	; (80067e4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d00f      	beq.n	80067da <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80067ba:	4b0a      	ldr	r3, [pc, #40]	; (80067e4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d002      	beq.n	80067ce <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	691b      	ldr	r3, [r3, #16]
 80067d2:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d1f2      	bne.n	80067c0 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80067da:	bf00      	nop
 80067dc:	3708      	adds	r7, #8
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	bf00      	nop
 80067e4:	200143bc 	.word	0x200143bc

080067e8 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b086      	sub	sp, #24
 80067ec:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80067ee:	f3ef 8311 	mrs	r3, BASEPRI
 80067f2:	f04f 0120 	mov.w	r1, #32
 80067f6:	f381 8811 	msr	BASEPRI, r1
 80067fa:	60fb      	str	r3, [r7, #12]
 80067fc:	4817      	ldr	r0, [pc, #92]	; (800685c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80067fe:	f7fe ff36 	bl	800566e <_PreparePacket>
 8006802:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	617b      	str	r3, [r7, #20]
 800680c:	4b14      	ldr	r3, [pc, #80]	; (8006860 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	613b      	str	r3, [r7, #16]
 8006812:	e00b      	b.n	800682c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	b2da      	uxtb	r2, r3
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	1c59      	adds	r1, r3, #1
 800681c:	6179      	str	r1, [r7, #20]
 800681e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006822:	b2d2      	uxtb	r2, r2
 8006824:	701a      	strb	r2, [r3, #0]
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	09db      	lsrs	r3, r3, #7
 800682a:	613b      	str	r3, [r7, #16]
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	2b7f      	cmp	r3, #127	; 0x7f
 8006830:	d8f0      	bhi.n	8006814 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	1c5a      	adds	r2, r3, #1
 8006836:	617a      	str	r2, [r7, #20]
 8006838:	693a      	ldr	r2, [r7, #16]
 800683a:	b2d2      	uxtb	r2, r2
 800683c:	701a      	strb	r2, [r3, #0]
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006842:	221b      	movs	r2, #27
 8006844:	6879      	ldr	r1, [r7, #4]
 8006846:	68b8      	ldr	r0, [r7, #8]
 8006848:	f7ff f802 	bl	8005850 <_SendPacket>
  RECORD_END();
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f383 8811 	msr	BASEPRI, r3
}
 8006852:	bf00      	nop
 8006854:	3718      	adds	r7, #24
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}
 800685a:	bf00      	nop
 800685c:	200143c4 	.word	0x200143c4
 8006860:	200143c0 	.word	0x200143c0

08006864 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006864:	b580      	push	{r7, lr}
 8006866:	b08a      	sub	sp, #40	; 0x28
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800686c:	f3ef 8311 	mrs	r3, BASEPRI
 8006870:	f04f 0120 	mov.w	r1, #32
 8006874:	f381 8811 	msr	BASEPRI, r1
 8006878:	617b      	str	r3, [r7, #20]
 800687a:	4827      	ldr	r0, [pc, #156]	; (8006918 <SEGGER_SYSVIEW_Warn+0xb4>)
 800687c:	f7fe fef7 	bl	800566e <_PreparePacket>
 8006880:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006882:	2280      	movs	r2, #128	; 0x80
 8006884:	6879      	ldr	r1, [r7, #4]
 8006886:	6938      	ldr	r0, [r7, #16]
 8006888:	f7fe fea4 	bl	80055d4 <_EncodeStr>
 800688c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	627b      	str	r3, [r7, #36]	; 0x24
 8006892:	2301      	movs	r3, #1
 8006894:	623b      	str	r3, [r7, #32]
 8006896:	e00b      	b.n	80068b0 <SEGGER_SYSVIEW_Warn+0x4c>
 8006898:	6a3b      	ldr	r3, [r7, #32]
 800689a:	b2da      	uxtb	r2, r3
 800689c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689e:	1c59      	adds	r1, r3, #1
 80068a0:	6279      	str	r1, [r7, #36]	; 0x24
 80068a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068a6:	b2d2      	uxtb	r2, r2
 80068a8:	701a      	strb	r2, [r3, #0]
 80068aa:	6a3b      	ldr	r3, [r7, #32]
 80068ac:	09db      	lsrs	r3, r3, #7
 80068ae:	623b      	str	r3, [r7, #32]
 80068b0:	6a3b      	ldr	r3, [r7, #32]
 80068b2:	2b7f      	cmp	r3, #127	; 0x7f
 80068b4:	d8f0      	bhi.n	8006898 <SEGGER_SYSVIEW_Warn+0x34>
 80068b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b8:	1c5a      	adds	r2, r3, #1
 80068ba:	627a      	str	r2, [r7, #36]	; 0x24
 80068bc:	6a3a      	ldr	r2, [r7, #32]
 80068be:	b2d2      	uxtb	r2, r2
 80068c0:	701a      	strb	r2, [r3, #0]
 80068c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	61fb      	str	r3, [r7, #28]
 80068ca:	2300      	movs	r3, #0
 80068cc:	61bb      	str	r3, [r7, #24]
 80068ce:	e00b      	b.n	80068e8 <SEGGER_SYSVIEW_Warn+0x84>
 80068d0:	69bb      	ldr	r3, [r7, #24]
 80068d2:	b2da      	uxtb	r2, r3
 80068d4:	69fb      	ldr	r3, [r7, #28]
 80068d6:	1c59      	adds	r1, r3, #1
 80068d8:	61f9      	str	r1, [r7, #28]
 80068da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068de:	b2d2      	uxtb	r2, r2
 80068e0:	701a      	strb	r2, [r3, #0]
 80068e2:	69bb      	ldr	r3, [r7, #24]
 80068e4:	09db      	lsrs	r3, r3, #7
 80068e6:	61bb      	str	r3, [r7, #24]
 80068e8:	69bb      	ldr	r3, [r7, #24]
 80068ea:	2b7f      	cmp	r3, #127	; 0x7f
 80068ec:	d8f0      	bhi.n	80068d0 <SEGGER_SYSVIEW_Warn+0x6c>
 80068ee:	69fb      	ldr	r3, [r7, #28]
 80068f0:	1c5a      	adds	r2, r3, #1
 80068f2:	61fa      	str	r2, [r7, #28]
 80068f4:	69ba      	ldr	r2, [r7, #24]
 80068f6:	b2d2      	uxtb	r2, r2
 80068f8:	701a      	strb	r2, [r3, #0]
 80068fa:	69fb      	ldr	r3, [r7, #28]
 80068fc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80068fe:	221a      	movs	r2, #26
 8006900:	68f9      	ldr	r1, [r7, #12]
 8006902:	6938      	ldr	r0, [r7, #16]
 8006904:	f7fe ffa4 	bl	8005850 <_SendPacket>
  RECORD_END();
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	f383 8811 	msr	BASEPRI, r3
}
 800690e:	bf00      	nop
 8006910:	3728      	adds	r7, #40	; 0x28
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}
 8006916:	bf00      	nop
 8006918:	200143c4 	.word	0x200143c4

0800691c <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 800691c:	b580      	push	{r7, lr}
 800691e:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8006920:	4b13      	ldr	r3, [pc, #76]	; (8006970 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006922:	7e1b      	ldrb	r3, [r3, #24]
 8006924:	4619      	mov	r1, r3
 8006926:	4a13      	ldr	r2, [pc, #76]	; (8006974 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8006928:	460b      	mov	r3, r1
 800692a:	005b      	lsls	r3, r3, #1
 800692c:	440b      	add	r3, r1
 800692e:	00db      	lsls	r3, r3, #3
 8006930:	4413      	add	r3, r2
 8006932:	336c      	adds	r3, #108	; 0x6c
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	4b0e      	ldr	r3, [pc, #56]	; (8006970 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006938:	7e1b      	ldrb	r3, [r3, #24]
 800693a:	4618      	mov	r0, r3
 800693c:	490d      	ldr	r1, [pc, #52]	; (8006974 <SEGGER_SYSVIEW_IsStarted+0x58>)
 800693e:	4603      	mov	r3, r0
 8006940:	005b      	lsls	r3, r3, #1
 8006942:	4403      	add	r3, r0
 8006944:	00db      	lsls	r3, r3, #3
 8006946:	440b      	add	r3, r1
 8006948:	3370      	adds	r3, #112	; 0x70
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	429a      	cmp	r2, r3
 800694e:	d00b      	beq.n	8006968 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8006950:	4b07      	ldr	r3, [pc, #28]	; (8006970 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006952:	789b      	ldrb	r3, [r3, #2]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d107      	bne.n	8006968 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8006958:	4b05      	ldr	r3, [pc, #20]	; (8006970 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800695a:	2201      	movs	r2, #1
 800695c:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800695e:	f7fe fe93 	bl	8005688 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006962:	4b03      	ldr	r3, [pc, #12]	; (8006970 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006964:	2200      	movs	r2, #0
 8006966:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8006968:	4b01      	ldr	r3, [pc, #4]	; (8006970 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800696a:	781b      	ldrb	r3, [r3, #0]
}
 800696c:	4618      	mov	r0, r3
 800696e:	bd80      	pop	{r7, pc}
 8006970:	20014394 	.word	0x20014394
 8006974:	20012ed4 	.word	0x20012ed4

08006978 <memcmp>:
 8006978:	b510      	push	{r4, lr}
 800697a:	3901      	subs	r1, #1
 800697c:	4402      	add	r2, r0
 800697e:	4290      	cmp	r0, r2
 8006980:	d101      	bne.n	8006986 <memcmp+0xe>
 8006982:	2000      	movs	r0, #0
 8006984:	e005      	b.n	8006992 <memcmp+0x1a>
 8006986:	7803      	ldrb	r3, [r0, #0]
 8006988:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800698c:	42a3      	cmp	r3, r4
 800698e:	d001      	beq.n	8006994 <memcmp+0x1c>
 8006990:	1b18      	subs	r0, r3, r4
 8006992:	bd10      	pop	{r4, pc}
 8006994:	3001      	adds	r0, #1
 8006996:	e7f2      	b.n	800697e <memcmp+0x6>

08006998 <memset>:
 8006998:	4402      	add	r2, r0
 800699a:	4603      	mov	r3, r0
 800699c:	4293      	cmp	r3, r2
 800699e:	d100      	bne.n	80069a2 <memset+0xa>
 80069a0:	4770      	bx	lr
 80069a2:	f803 1b01 	strb.w	r1, [r3], #1
 80069a6:	e7f9      	b.n	800699c <memset+0x4>

080069a8 <__libc_init_array>:
 80069a8:	b570      	push	{r4, r5, r6, lr}
 80069aa:	4d0d      	ldr	r5, [pc, #52]	; (80069e0 <__libc_init_array+0x38>)
 80069ac:	4c0d      	ldr	r4, [pc, #52]	; (80069e4 <__libc_init_array+0x3c>)
 80069ae:	1b64      	subs	r4, r4, r5
 80069b0:	10a4      	asrs	r4, r4, #2
 80069b2:	2600      	movs	r6, #0
 80069b4:	42a6      	cmp	r6, r4
 80069b6:	d109      	bne.n	80069cc <__libc_init_array+0x24>
 80069b8:	4d0b      	ldr	r5, [pc, #44]	; (80069e8 <__libc_init_array+0x40>)
 80069ba:	4c0c      	ldr	r4, [pc, #48]	; (80069ec <__libc_init_array+0x44>)
 80069bc:	f000 f826 	bl	8006a0c <_init>
 80069c0:	1b64      	subs	r4, r4, r5
 80069c2:	10a4      	asrs	r4, r4, #2
 80069c4:	2600      	movs	r6, #0
 80069c6:	42a6      	cmp	r6, r4
 80069c8:	d105      	bne.n	80069d6 <__libc_init_array+0x2e>
 80069ca:	bd70      	pop	{r4, r5, r6, pc}
 80069cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80069d0:	4798      	blx	r3
 80069d2:	3601      	adds	r6, #1
 80069d4:	e7ee      	b.n	80069b4 <__libc_init_array+0xc>
 80069d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80069da:	4798      	blx	r3
 80069dc:	3601      	adds	r6, #1
 80069de:	e7f2      	b.n	80069c6 <__libc_init_array+0x1e>
 80069e0:	08006b90 	.word	0x08006b90
 80069e4:	08006b90 	.word	0x08006b90
 80069e8:	08006b90 	.word	0x08006b90
 80069ec:	08006b94 	.word	0x08006b94

080069f0 <memcpy>:
 80069f0:	440a      	add	r2, r1
 80069f2:	4291      	cmp	r1, r2
 80069f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80069f8:	d100      	bne.n	80069fc <memcpy+0xc>
 80069fa:	4770      	bx	lr
 80069fc:	b510      	push	{r4, lr}
 80069fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a06:	4291      	cmp	r1, r2
 8006a08:	d1f9      	bne.n	80069fe <memcpy+0xe>
 8006a0a:	bd10      	pop	{r4, pc}

08006a0c <_init>:
 8006a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a0e:	bf00      	nop
 8006a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a12:	bc08      	pop	{r3}
 8006a14:	469e      	mov	lr, r3
 8006a16:	4770      	bx	lr

08006a18 <_fini>:
 8006a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a1a:	bf00      	nop
 8006a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a1e:	bc08      	pop	{r3}
 8006a20:	469e      	mov	lr, r3
 8006a22:	4770      	bx	lr
